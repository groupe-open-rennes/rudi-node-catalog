{
	"info": {
		"_postman_id": "aec3de11-cc9e-4c67-b9c3-5cdbc2811e5f",
		"name": "01. Catalog",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13557783",
		"_collection_link": "https://rudirisa.postman.co/workspace/ce1a24e7-e510-4854-8451-d9ba84797044/collection/13557783-aec3de11-cc9e-4c67-b9c3-5cdbc2811e5f?action=share&source=collection_link&creator=13557783"
	},
	"item": [
		{
			"name": "00. Tokens",
			"item": [
				{
					"name": "Forge JWT & wipe cache",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"mem.wipeCollectionVars(pm.collectionVariables,[],1)",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Token loaded\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const res =  pm.response.text()",
									"    pm.expect(secu.isTokenValid(res)).to.be.true",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followAuthorizationHeader": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sub\": \"{{jwtAuthDelegate}}\",\n    \"client_id\": \"{{jwtAuthUser}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{jwtAuthUrl}}/forge",
							"host": [
								"{{jwtAuthUrl}}"
							],
							"path": [
								"forge"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Token loaded\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const res = pm.response.json()",
									"    pm.expect(res?.message).to.eq('JWT is valid')",
									"    const jwtName = pm.variables.get('catalogJwtName')",
									"    const jwt = pm.variables.get(jwtName)",
									"    pm.expect(secu.isTokenValid(jwt)).to.be.true",
									"    const b64Payload = jwt.split('.')[1]",
									"    const payload = JSON.parse(codec.fromBase64Url(b64Payload))",
									"    log.d(JSON.stringify(payload))",
									"    pm.expect(payload.sub == pm.variables.get('jwtAuthDelegate')).to.be.true",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followAuthorizationHeader": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{jwtAuthUrl}}/check",
							"host": [
								"{{jwtAuthUrl}}"
							],
							"path": [
								"check"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get portal token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Testing portal connection\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const portalJwtName = mem.get('portalJwtName')",
									"    if (pm.response.text() === pm.variables.get('noPortalMsg')) {",
									"        pm.collectionVariables.unset(portalJwtName)",
									"        return true",
									"    }",
									"    const token = pm.response.json().access_token",
									"    pm.expect(!!match.jwt(token)).to.be.true",
									"    pm.collectionVariables.set(portalJwtName, token)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/portal/token",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"portal",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check portal token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Testing portal connection\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    pm.expect(pm.response.text() === pm.variables.get('noPortalMsg') || pm.response.json().active).to.be.true       ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/portal/token/check",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"portal",
								"token",
								"check"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get logs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logs accessible\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json()",
									"    // responseJson.map(coll => console.log(coll))",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/logs?limit=20000&sort_by=-updatedAt",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"logs"
							],
							"query": [
								{
									"key": "limit",
									"value": "20000"
								},
								{
									"key": "sort_by",
									"value": "-updatedAt"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "00. Check app online",
			"item": [
				{
					"name": "Get app env",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`Env: ${pm.variables.get('env')}`, () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const env = pm.variables.get('env')",
									"    const responseStr = pm.response.text()",
									"    pm.expect(responseStr).to.eq(env)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/env",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"env"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get git hash pub",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Git hash : 7 alphanumerical characters\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseStr = pm.response.text()",
									"    pm.expect(!!match.gitHash(responseStr)).to.be.true",
									"    pm.collectionVariables.set('gitHash', responseStr)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/hash",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"hash"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get git hash",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Git hash : 7 alphanumerical characters\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseStr = pm.response.text()",
									"    pm.expect(!!match.gitHash(responseStr)).to.be.true",
									"    pm.collectionVariables.set('gitHash', responseStr)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/hash",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"hash"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get app hash",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Current app hash = git hash\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const gitHash = pm.variables.get('gitHash');",
									"    const responseStr = pm.response.text()",
									"    pm.expect(!!match.gitHash(responseStr)).to.be.true",
									"    pm.expect(responseStr).to.eq(gitHash)",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/apphash",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"apphash"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get API version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"API version\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const apiVersion = pm.response.text()",
									"    pm.expect(!!match.version(apiVersion)).to.be.true",
									"    pm.collectionVariables.set('apiVersion', apiVersion)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/version",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"version"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get API version (admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"API version\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const apiVersion = pm.response.text()",
									"    pm.expect(!!match.version(apiVersion)).to.be.true",
									"    pm.collectionVariables.set('apiVersion', apiVersion)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/version",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"version"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Node.js version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Node.js version > 20, npm version > 6\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    const nodeVersion = responseJson.node",
									"    const nodeVersionMajor = parseInt(nodeVersion.split(/[v\\.]/)[1])",
									"    pm.expect(nodeVersionMajor).to.be.gte(20)",
									"",
									"    const npmVersion = responseJson.npm",
									"    if(npmVersion == \"n/a\") return true",
									"    const npmVersionMajor = parseInt(npmVersion.split('.')[0])",
									"    pm.expect(npmVersionMajor).to.be.gt(6)",
									"    //pm.expect(pm.response.stream.toString('utf8')).to.match(/^[0-9a-z]{7}$/)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/nv",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"nv"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request new UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get new UUID\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseStr = pm.response.text()",
									"    pm.expect(!!match.uuid(responseStr)).to.be.true",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/id_generation",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"id_generation"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get REST API doc: markdown",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Database accessible\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const res = pm.response.text()",
									"    pm.expect(res.startsWith('| Auth')).to.be.true",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/routes",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get route list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"REST API documentation: route list\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const res = pm.response.json()",
									"    pm.expect(res.length).to.be.gt(70)",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/routes?format=list",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"routes"
							],
							"query": [
								{
									"key": "format",
									"value": "list"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get route groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"REST API documentation: route groups\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const res = pm.response.json()",
									"    pm.expect(res.jwt.length).to.be.gte(52)",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/routes?format=group",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"routes"
							],
							"query": [
								{
									"key": "format",
									"value": "group"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Database accessible\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json()",
									"    // responseJson.map(coll => console.log(coll))",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/db",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"db"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get node RUDI objects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Downloading the node metadata\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const resJson = pm.response.json()",
									"    pm.expect(resJson.logs).to.be.undefined;",
									"    pm.collectionVariables.set('rudiData', pm.response.stream.toString('utf8'))",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/db/data",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"db",
								"data"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check node data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Downloading all the node data\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    //const res = pm.response.stream.toString('utf8')",
									"    const res = pm.response.json()",
									"    //pm.expect(res.logs).to.be.undefined;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/db/data?type=all",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"db",
								"data"
							],
							"query": [
								{
									"key": "type",
									"value": "all"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get orgs and contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Downloading the node orgs and contacts\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const res = pm.response.json()",
									"    pm.expect(res.logs).to.be.undefined;",
									"    pm.expect(res.contacts.length).to.be.gt(0);",
									"    pm.expect(res.organizations.length).to.be.gt(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/db/data?type=organizations,contacts",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"db",
								"data"
							],
							"query": [
								{
									"key": "type",
									"value": "organizations,contacts"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get node logs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Downloading the logs\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const res = pm.response.json()",
									"    pm.expect(res.logs.length).to.gt(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/db/data?type=logs",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"db",
								"data"
							],
							"query": [
								{
									"key": "type",
									"value": "logs"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get node data + logs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Downloading the node data, logs included\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const res = pm.response.json()",
									"    pm.expect(res.logs.length).to.gt(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/db/data?type=all&logs=true",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"db",
								"data"
							],
							"query": [
								{
									"key": "type",
									"value": "all"
								},
								{
									"key": "logs",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Test app",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`Test app`, () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const res = (pm.response.json())",
									"    pm.expect(res.test).to.eq('ok')",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{{{catalogJwtName}}}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/test",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"test"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "01. Clean",
			"item": [
				{
					"name": "Delete previous test metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const stamp = pm.variables.get('stamp')",
									"pm.test(`Delete metadata with '${stamp}' stamp`, () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    \"{{softMeta1Id}}\",\n    \"{{softMeta2Id}}\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/resources?collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							],
							"query": [
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete previous test contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const stamp = pm.variables.get('stamp')",
									"pm.test(`Delete contacts with '${stamp}' stamp`, () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    \"{{softMeta1Id}}\",\n    \"{{softMeta2Id}}\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/contacts?collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"contacts"
							],
							"query": [
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete previous test orgs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const stamp = pm.variables.get('stamp')",
									"pm.test(`Delete orgs with '${stamp}' stamp`, () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    \"{{softMeta1Id}}\",\n    \"{{softMeta2Id}}\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/organizations?collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"organizations"
							],
							"query": [
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete previous test media",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const stamp = pm.variables.get('stamp')",
									"pm.test(`Delete media with '${stamp}' stamp`, () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    \"{{softMeta1Id}}\",\n    \"{{softMeta2Id}}\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/media?collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"media"
							],
							"query": [
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete previous test reports",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const stamp = pm.variables.get('stamp')",
									"pm.test(`Delete reports with '${stamp}' stamp`, () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    \"{{softMeta1Id}}\",\n    \"{{softMeta2Id}}\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/reports?collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"reports"
							],
							"query": [
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete previous test keys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const stamp = pm.variables.get('stamp')",
									"pm.test(`Delete public keys with '${stamp}' stamp`, () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    \"{{softMeta1Id}}\",\n    \"{{softMeta2Id}}\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/pub_keys?collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"pub_keys"
							],
							"query": [
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "02. Init lists",
			"item": [
				{
					"name": "Get all licenses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"All licence concepts retrieved\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.length).to.gt(0)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"concept_id\": \"1d5bb2d7-983a-4254-9fb3-d69ca020227c\",\n    \"concept_code\": \"etalab-1.0\",\n    \"concept_uri\": \"https://www.etalab.gouv.fr/wp-content/uploads/2014/05/Licence_Ouverte.pdf\",\n    \"pref_label\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Licence Ouverte Etalab v1.0\"\n        },\n        {\n            \"lang\": \"en\",\n            \"text\": \"Etalab Open License 1.0\"\n        }\n    ],\n    \"of_scheme\": {\n        \"_id\": \"621784ea5f77a604879df6a8\",\n        \"scheme_id\": \"6ab102e7-98e3-4d01-aa5d-d39105eebf34\",\n        \"scheme_code\": \"scheme-licence\"\n    },\n    \"concept_role\": \"licence\",\n    \"broader_concepts\": [\n        {\n            \"_id\": \"621784ec5f77a604879df6ad\",\n            \"concept_id\": \"237eb90b-36b2-4fef-bd40-a5b7a23dcd4d\",\n            \"concept_code\": \"open-source-licence\"\n        }\n    ],\n    \"narrower_concepts\": [],\n    \"siblings_concepts\": [],\n    \"relative_concepts\": [],\n    \"alt_labels\": [],\n    \"hidden_labels\": [],\n    \"scope_note\": [],\n    \"concept_definition\": [],\n    \"concept_example\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/licences/",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"licences",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all licenses codes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"All licence codes retrieved\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.indexOf('mit')).to.gte(0)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/licence_codes",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"licence_codes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get every thesaurus values",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Every thesaurus values received\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    const listEnums = Object.keys(responseJson);",
									"    pm.expect(listEnums.length).to.eq(12);",
									"    pm.expect(typeof responseJson.themes[0]).to.eq('string')",
									"",
									"    pm.collectionVariables.set('keywords', responseJson.keywords);",
									"    pm.collectionVariables.set('themes', responseJson.themes);",
									"    pm.collectionVariables.set('sanityLicence', responseJson.licences[1])",
									"    pm.collectionVariables.set('licences', responseJson.licences)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/enum",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"enum"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get thesaurus fr labels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Thesaurus fr labels received\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    const listEnums = Object.keys(responseJson);",
									"    pm.expect(listEnums.length).to.eq(12);",
									"    pm.expect(Object.keys(responseJson.fileextensions).length).to.gt(0)",
									"    pm.expect(responseJson.fileextensions.aac).to.eq(\"audio/aac\")",
									"    const themeKeys = Object.keys(responseJson.themes)",
									"    pm.expect(responseJson.themes.environment).to.eq('Environnement')",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/enum?lang=fr",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"enum"
							],
							"query": [
								{
									"key": "lang",
									"value": "fr"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get languages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Languages received\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.length).to.gt(0)",
									"    pm.expect(typeof responseJson[0]).to.eq('string')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/enum/Languages",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"enum",
								"Languages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get keywords",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Keywords received\", () => {",
									"    pm.expect(pm.response.code).to.eql(200)",
									"    const responseJson = pm.response.json()",
									"    pm.expect(responseJson.length).to.gt(0)",
									"    pm.expect(typeof responseJson[0]).to.eq('string')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/enum/Keywords",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"enum",
								"Keywords"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get themes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Themes received\", () => {",
									"    pm.expect(pm.response.code).to.eql(200)",
									"    const responseJson = pm.response.json()",
									"    pm.expect(responseJson.length).to.gt(0)",
									"    pm.expect(typeof responseJson[0]).to.eq('string')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/enum/Themes",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"enum",
								"Themes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get file MIME types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Themes received\", () => {",
									"    pm.expect(pm.response.code).to.eql(200)",
									"    const responseJson = pm.response.json()",
									"    pm.expect(responseJson.length).to.gt(0)",
									"    pm.expect(typeof responseJson[0]).to.eq('string')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/enum/Themes",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"enum",
								"Themes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get theme labels FR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Theme labels received\", () => {",
									"    pm.expect(pm.response.code).to.eql(200)",
									"    const res = pm.response.json()",
									"    const keys = Object.keys(res)",
									"    pm.expect(keys.length).to.gt(0)",
									"    pm.expect(typeof res[keys[0]]).to.eq('string')",
									"    pm.expect(res['environment']).to.eq('Environnement')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/enum/Themes/fr",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"enum",
								"Themes",
								"fr"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get theme labels EN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Theme labels received\", () => {",
									"    pm.expect(pm.response.code).to.eql(200)",
									"    const res = pm.response.json()",
									"    const keys = Object.keys(res)",
									"    pm.expect(keys.length).to.gt(0)",
									"    pm.expect(typeof res[keys[0]]).to.eq('string')",
									"    pm.expect(res['environment']).to.eq('Environment')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/enum/Themes/en",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"enum",
								"Themes",
								"en"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get searchable properties",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`Searchable properties`, () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const res = pm.response.json()",
									"    pm.expect(res.resources.length).to.gte(3)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/search",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"search"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "03. Add/edit/get organizations",
			"item": [
				{
					"name": "Add org 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Producer 1 created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    const orgId = pm.variables.get('softOrg1Id');",
									"    pm.expect(responseJson.organization_id).to.eq(orgId);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('softOrg1Id', rand.get('{{$randomUUID}}'))",
									"pm.collectionVariables.set('softOrg1Name', rand.get('{{$randomCompanyName}}'))",
									"const orgAddress = `${rand.get('{{$randomStreetAddress}}')}, ${rand.get('{{$randomCity}}')}`",
									"pm.collectionVariables.set('softOrg1Address', orgAddress)",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"organization_id\": \"{{softOrg1Id}}\",\n    \"organization_name\": \"{{softOrg1Name}}\",\n    \"organization_address\": \"{{softOrg1Address}}\",\n    \"collection_tag\": \"{{stamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/organizations",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get org 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Producer 2 edition correctly saved\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    const orgId = pm.variables.get('softOrg1Id');",
									"    pm.expect(responseJson.organization_id).to.eq(orgId);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/organizations/{{softOrg1Id}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"organizations",
								"{{softOrg1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add org 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Producer 2 created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    const orgId = pm.variables.get('softOrg2Id');",
									"    pm.expect(responseJson.organization_id).to.eq(orgId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('softOrg2Id', rand.get('{{$randomUUID}}'))",
									"let newCompanyName = rand.get('{{$randomCompanyName}}')",
									"let previousCompanyName = pm.variables.get('softOrg1Name')",
									"while (newCompanyName == previousCompanyName) {",
									"    newCompanyName = rand.get('{{$randomCompanyName}}')",
									"}",
									"pm.collectionVariables.set('softOrg2Name', newCompanyName)",
									"const orgAddress = `${rand.get('{{$randomStreetAddress}}')}, ${rand.get('{{$randomCity}}')}`",
									"pm.collectionVariables.set('softOrg2Address', orgAddress)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"organization_id\": \"{{softOrg2Id}}\",\n    \"organization_name\": \"{{softOrg2Name}}\",\n    \"organization_address\": \"{{softOrg2Address}}\",\n    \"collection_tag\": \"{{stamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/organizations",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit org 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Producer 2 edited\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    const orgId = pm.variables.get('softOrg2Id');",
									"    const orgName = pm.variables.get('softOrg2Name');",
									"    const orgAddress = pm.variables.get('softOrg2Address');",
									"    ",
									"    pm.expect(responseJson.organization_name).to.eq(orgName);",
									"    pm.expect(responseJson.organization_address).to.eq(orgAddress);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('softOrg2Name', rand.get('{{$randomCompanyName}}'))",
									"const orgAddress = `${rand.get('{{$randomStreetAddress}}')}, ${rand.get('{{$randomCity}}')}`",
									"pm.collectionVariables.set('softOrg2Address', orgAddress)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"organization_id\": \"{{softOrg2Id}}\",\n    \"organization_name\": \"{{softOrg2Name}}\",\n    \"organization_address\": \"{{softOrg2Address}}\",\n    \"collection_tag\": \"{{stamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/organizations",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get org 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Producer 2 edition correctly saved\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    const orgId = pm.variables.get('softOrg2Id');",
									"    pm.expect(responseJson.organization_id).to.eq(orgId);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/organizations/{{softOrg2Id}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"organizations",
								"{{softOrg2Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all organizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"2 producers created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const orgList = pm.response.json();",
									"    pm.expect(orgList.length).to.gte(2);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"time.wait(1000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/organizations?collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"organizations"
							],
							"query": [
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUB] Get all organizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"2 producers created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const orgList = pm.response.json();",
									"    pm.expect(orgList.length).to.gte(2);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"time.wait(1000)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/v1/organizations",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"v1",
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1 organization found\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const res = pm.response.json();",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"time.wait(3000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/organizations/search?{{softOrg1Id}}&collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"organizations",
								"search"
							],
							"query": [
								{
									"key": "{{softOrg1Id}}",
									"value": null
								},
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "04. Add/edit/get contacts",
			"item": [
				{
					"name": "Add contact 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Contact 1 created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    const contact1 = pm.variables.get('softContact1Id');",
									"    pm.expect(responseJson.contact_id).to.eq(contact1);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const contactName = rand.get('{{$randomFullName}}');",
									"",
									"pm.collectionVariables.set('softContact1Id', rand.get('{{$randomUUID}}'))",
									"pm.collectionVariables.set('softContact1Name', contactName)",
									"pm.collectionVariables.set('softContact1Email', rand.getContactEmail(contactName))",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contact_id\": \"{{softContact1Id}}\",\n    \"contact_name\": \"{{softContact1Name}}\",\n    \"email\": \"{{softContact1Email}}\",\n    \"collection_tag\": \"{{stamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/contacts",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add contact 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Contact 2 created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    const contId = pm.variables.get('softContact2Id');",
									"    pm.expect(responseJson.contact_id).to.eq(contId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const contactName = rand.get('{{$randomFullName}}');",
									"",
									"pm.collectionVariables.set('softContact2Id', rand.get('{{$randomUUID}}'))",
									"pm.collectionVariables.set('softContact2Name', contactName)",
									"pm.collectionVariables.set('softContact2Email', rand.getContactEmail(contactName))",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contact_id\": \"{{softContact2Id}}\",\n    \"contact_name\": \"{{softContact2Name}}\",\n    \"email\": \"{{softContact2Email}}\",\n    \"collection_tag\": \"{{stamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/contacts",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add contact 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Contact 3 created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    const contId = pm.variables.get('softContact3Id');",
									"    pm.expect(responseJson.contact_id).to.eq(contId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const contactName = rand.get('{{$randomFullName}}');",
									"",
									"pm.collectionVariables.set('softContact3Id', rand.get('{{$randomUUID}}'))",
									"pm.collectionVariables.set('softContact3Name', contactName)",
									"pm.collectionVariables.set('softContact3Email', rand.getContactEmail(contactName))",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contact_id\": \"{{softContact3Id}}\",\n    \"contact_name\": \"{{softContact3Name}}\",\n    \"email\": \"{{softContact3Email}}\",\n    \"collection_tag\": \"{{stamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/contacts",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit contact 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Contact 1 edited\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    //console.log(responseJson);",
									"    const contactName = pm.variables.get('softContact3Name')",
									"    const contactMail = pm.variables.get('softContact3Email')",
									"  ",
									"    pm.expect(responseJson.contact_name).to.eq(contactName);",
									"    pm.expect(responseJson.email).to.eq(contactMail);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const contactName = pm.variables.replaceIn('{{$randomFullName}}');",
									"",
									"pm.collectionVariables.set('softContact3Name', contactName)",
									"pm.collectionVariables.set('softContact3Email', rand.getContactEmail(contactName))",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contact_id\": \"{{softContact1Id}}\",\n    \"contact_name\": \"{{softContact3Name}}\",\n    \"email\": \"{{softContact3Email}}\",\n    \"collection_tag\": \"{{stamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/contacts",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get contact 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Contact 1 edition correctly saved\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    const contId = pm.variables.get('softContact1Id');",
									"    pm.expect(responseJson.contact_id).to.eq(contId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/contacts/{{softContact1Id}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"contacts",
								"{{softContact1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"3 contacts created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const contactList = pm.response.json();",
									"    // console.log(contactList.length)",
									"    //const contactList = _.map(responseJson, 'name');",
									"    pm.expect(contactList.length).to.gte(3);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"time.wait(1000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/contacts",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUB] Get all contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"3 contacts created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const contactList = pm.response.json();",
									"    // console.log(contactList.length)",
									"    //const contactList = _.map(responseJson, 'name');",
									"    pm.expect(contactList.length).to.gte(3);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"time.wait(1000)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/v1/contacts",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"v1",
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1 contact found\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const res = pm.response.json();",
									"    pm.expect(res.total).to.gte(1);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"time.wait(1000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/contacts/search?{{softContact2Name}}&collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"contacts",
								"search"
							],
							"query": [
								{
									"key": "{{softContact2Name}}",
									"value": null
								},
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "05. Media",
			"item": [
				{
					"name": "PUT media",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creation of a new media\", () => {",
									"    pm.expect(pm.response.code).to.eq(200)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const media1 = pm.variables.get('media1')",
									"console.log('media1:', media1)",
									"const media2 = { ...media1, media_id: rand.uuid(), collection_tag: pm.variables.get('stamp') }",
									"console.log(media2)",
									"pm.collectionVariables.set('media2', JSON.stringify(media2))",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n            \"media_type\": \"FILE\",\n            \"media_id\": \"{{$randomUUID}}\",\n            \"connector\": {\n                \"url\": \"https://app.swaggerhub.com/apis/OlivierMartineau/RUDI-PRODUCER/{{apiVersion}}\"\n            },\n            \"file_type\": \"application/json\",\n            \"file_size\": 59016,\n            \"checksum\": {\n                \"algo\": \"MD5\",\n                \"hash\": \"4c9ee0f14e835927a1bbafde0eb89fb3\"\n            },\n            \"collection_tag\": \"{{stamp}}\"\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/media",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT media binary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creation of a new media\", () => {",
									"    pm.expect(pm.response.code).to.eq(200)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const media1 = pm.variables.get('media1')",
									"console.log('media1:', media1)",
									"const media2 = { ...media1, media_id: rand.uuid(), collection_tag: pm.variables.get('stamp') }",
									"console.log(media2)",
									"pm.collectionVariables.set('media2', JSON.stringify(media2))",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n            \"media_type\": \"FILE\",\n            \"media_id\": \"{{$randomUUID}}\",\n            \"connector\": {\n                \"url\": \"https://app.swaggerhub.com/apis/OlivierMartineau/RUDI-PRODUCER/{{apiVersion}}\"\n            },\n            \"file_type\": \"application/octet-stream\",\n            \"file_size\": 59016,\n            \"checksum\": {\n                \"algo\": \"MD5\",\n                \"hash\": \"4c9ee0f14e835927a1bbafde0eb89fb3\"\n            },\n            \"collection_tag\": \"{{stamp}}\"\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/media",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT media service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creation of a new media\", () => {",
									"    pm.expect(pm.response.code).to.eq(200)",
									"    pm.expect(pm.response.json().media_dates?.created.startsWith('20')).to.be.true",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const media1 = pm.variables.get('media1')",
									"console.log('media1:', media1)",
									"const media2 = { ...media1, media_id: rand.uuid(), collection_tag: pm.variables.get('stamp') }",
									"console.log(media2)",
									"pm.collectionVariables.set('media2', JSON.stringify(media2))",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"media_type\": \"SERVICE\",\n    \"media_id\": \"{{$randomUUID}}\",\n    \"media_name\": \"test\",\n    \"connector\": {\n        \"url\": \"https://app.swaggerhub.com/apis/OlivierMartineau/RUDI-PRODUCER\",\n        \"interface_contract\": \"dwnl\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/media",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET media list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"List of existing media\", () => {",
									"    const mediaList = pm.response.json()",
									"    pm.expect(Array.isArray(mediaList))",
									"    pm.collectionVariables.set('media1', JSON.stringify(mediaList[0]))",
									"    pm.collectionVariables.set('media1Id', mediaList[0]['media_id'])",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/media",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"media"
							]
						}
					},
					"response": []
				},
				{
					"name": "commit media X Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"List of existing media\", () => {",
									"    pm.expect(pm.response.code ).to.eq(200)",
									"    const mediaInfo = pm.response.json()",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"commitId\": \"myCommitId\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/media/{{media1Id}}/commit",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"media",
								"{{media1Id}}",
								"commit"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "06. Add/edit/get metadata",
			"item": [
				{
					"name": "Add meta 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//log.lvl = 3",
									"pm.collectionVariables.set('now', time.now())",
									"",
									"//————— Id",
									"log.d('Ids')",
									"pm.collectionVariables.set('softMeta1Id', rand.uuid())",
									"pm.collectionVariables.set('softMedia1Id', rand.uuid())",
									"",
									"log.d('Ids', 'softMedia1Id', pm.variables.get('softMedia1Id'))",
									"",
									"//————— Thesauri",
									"log.d('Thesaurus: themes')",
									"pm.collectionVariables.set('randomTheme', rand.pick('themes'));",
									"",
									"log.d('Thesaurus: keywords')",
									"pm.collectionVariables.set('randomKeyword1', rand.pick('keywords'));",
									"pm.collectionVariables.set('randomKeyword2', rand.pick('keywords'));",
									"log.d('Thesaurus: licences')",
									"pm.collectionVariables.set('softLicence', rand.pick('licences'));",
									"log.d('Thesaurus: ok')",
									"",
									"//————— Producer",
									"log.d('Producer')",
									"const orgs = [",
									"    pm.variables.get('softOrg1Id'),",
									"    pm.variables.get('softOrg2Id')]",
									"const randomOrgId = rand.pickInList(orgs)",
									"",
									"pm.collectionVariables.set('randomOrgId', randomOrgId);",
									"console.log(`randomOrgId: ${pm.variables.get('randomOrgId')}`)",
									"console.log(`mem.randomOrgId: ${pm.variables.get('randomOrgId')}`)",
									"console.log(`collectionVariables.randomOrgId: ${pm.variables.get('randomOrgId')}`)",
									"console.log(`variables.randomOrgId: ${pm.variables.get('randomOrgId')}`)",
									"console.log(`globals.randomOrgId: ${pm.globals.get('randomOrgId')}`)",
									"",
									"//————— Contact 1",
									"log.d('Contact 1')",
									"const contacts = [",
									"    pm.variables.get('softContact1Id'),",
									"    pm.variables.get('softContact2Id'),",
									"    pm.variables.get('softContact3Id')];",
									"//console.log(`contacts: ${contacts}`)",
									"",
									"",
									"const randomContId1 = rand.pickInList(contacts)",
									"//console.log(`randomContId1: ${randomContId1}`)",
									"",
									"pm.collectionVariables.set('randomContact1', randomContId1);",
									"",
									"//————— Contact 2",
									"log.d('Contact 2')",
									"const contactsLeft = contacts",
									"    .filter(function (value, index, arr) { return value != randomContId1 });",
									"",
									"const randomContId2 = rand.pickInList(contactsLeft)",
									"//console.log(`randomContId2: ${randomContId2}`)",
									"",
									"pm.collectionVariables.set('randomContact2', randomContId2);",
									"",
									"//————— Description",
									"log.d('Description')",
									"pm.collectionVariables.set('randomTitle', rand.get('{{$randomCatchPhrase}}'));",
									"pm.collectionVariables.set('randomSynopsis', `${rand.get('{{$randomProductAdjective}}')} ${rand.get('{{$randomBs}}')}`);",
									"pm.collectionVariables.set('randomSummary',",
									"    `${rand.get('{{$randomPhrase}}')} ${rand.get('{{$randomPhrase}}')} ${rand.get('{{$randomLoremParagraph}}')}`)",
									"",
									"// log.d('Description', 'randomSummary', pm.variables.get('randomSummary'))"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Metadata 1 created\", () => {",
									"    try {",
									"        pm.expect(pm.response.code).to.eql(200);",
									"    } catch (err) {",
									"        console.log(pm.response)",
									"        throw err",
									"    }",
									"    const meta = pm.response.json();",
									"    const metaId = pm.collectionVariables.get('softMeta1Id');",
									"    const orgId = pm.collectionVariables.get('softOrg1Id');",
									"    pm.expect(meta.global_id).to.eq(metaId);",
									"    pm.expect(meta.producer.organization_id).to.eq(orgId);",
									"    pm.expect(!!match.uuid(meta.contacts[0]));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"global_id\": \"{{softMeta1Id}}\",\n    \"local_id\": \"testingID {{softMeta1Id}}\",\n    \"doi\": \"10.1007/s00223-003-0070-444/{{softMeta1Id}}\",\n    \"resource_title\": \"Test de RUDI en local {{softMeta1Id}}\",\n    \"synopsis\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Courte description de RUDI en local 4444\"\n        }\n    ],\n    \"summary\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Mon résumé chg 4\"\n        }\n    ],\n    \"purpose\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"{{stamp}}\"\n        }\n    ],\n    \"theme\": \"{{randomTheme}}\",\n    \"keywords\": [\n        \"{{randomKeyword1}}\",\n        \"{{randomKeyword2}}\"\n    ],\n    \"geography\": {\n        \"bounding_box\": {\n            \"west_longitude\": -1.677803,\n            \"east_longitude\": -1.677803,\n            \"north_latitude\": 48.112834,\n            \"south_latitude\": 48.112834\n        }\n    },\n    \"temporal_spread\": {\n        \"start_date\": \"2021-02-12T10:33:15Z\"\n    },\n    \"resource_languages\": [\n        \"fr\"\n    ],\n    \"producer\": {\n        \"organization_id\": \"{{softOrg1Id}}\",\n        \"organization_name\": \"{{softOrg1Name}}\",\n        \"organization_address\": \"{{softOrg1Address}}\",\n        \"collection_tag\": \"{{stamp}}\"\n    },\n    \"contacts\": [\n        {\n            \"contact_id\": \"{{softContact1Id}}\",\n            \"contact_name\": \"M. Fazo\",\n            \"email\": \"gpizj@pzorjeg.gt\",\n            \"collection_tag\": \"{{stamp}}\"\n        },\n        {\n            \"contact_id\": \"{{softContact2Id}}\",\n            \"contact_name\": \"Mme. Feya\",\n            \"email\": \"feya@irisa.fr\",\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"metadata_info\": {\n        \"api_version\": \"{{apiVersion}}\",\n        \"metadata_provider\": {\n            \"organization_id\": \"{{softOrg1Id}}\",\n            \"collection_tag\": \"{{stamp}}\"\n        },\n        \"metadata_contacts\": [\n            {\n                \"contact_id\": \"{{softContact2Id}}\",\n                \"collection_tag\": \"{{stamp}}\"\n            }\n        ]\n    },\n    \"dataset_dates\": {\n        \"created\": \"{{now}}\",\n        \"published\": \"{{now}}\"\n    },\n    \"storage_status\": \"online\",\n    \"access_condition\": {\n        \"licence\": {\n            \"licence_type\": \"STANDARD\",\n            \"licence_label\": \"{{softLicence}}\"\n        },\n        \"confidentiality\": {\n            \"restricted_access\": true\n        }\n    },\n    \"available_formats\": [\n        {\n            \"media_type\": \"FILE\",\n            \"media_id\": \"{{softMedia1Id}}\",\n            \"connector\": {\n                \"url\": \"https://app.swaggerhub.com/apis/OlivierMartineau/RUDI-PRODUCER/{{apiVersion}}\"\n            },\n            \"file_type\": \"application/json\",\n            \"file_size\": 59016,\n            \"checksum\": {\n                \"algo\": \"MD5\",\n                \"hash\": \"4c9ee0f14e835927a1bbafde0eb89fb3\"\n            },\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"collection_tag\": \"{{stamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/resources",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add meta 2 fails 'bounding_box\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Metadata 2 creation: missing property 'geography.bounding_box'\", () => {",
									"    pm.expect(pm.response.code).to.gte(400);",
									"    const responseJson = pm.response.json();",
									"    ////console.log(responseJson.message);",
									"",
									"    const msg = \"La propriété 'geography.bounding_box' est requise lorsque la propriété parente 'geography' est renseignée\"",
									"    pm.expect(responseJson.message.substring(0, msg.length)).to.eql(msg);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('softMeta2Id', rand.get('{{$randomUUID}}'));",
									"pm.collectionVariables.set('mediaId2', rand.get('{{$randomUUID}}'));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"global_id\": \"{{softMeta2Id}}\",\n    \"local_id\": \"testingID {{softMeta2Id}}\",\n    \"doi\": \"10.1007/s00223-003-0070-333/{{softMeta2Id}}\",\n    \"resource_title\": \"Test de RUDI en local {{softMeta2Id}}\",\n    \"synopsis\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Courte description de RUDI en local 33\"\n        }\n    ],\n    \"summary\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Mon résumé chg 3\"\n        }\n    ],\n    \"purpose\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"{{stamp}}\"\n        }\n    ],\n    \"theme\": \"energyNetworks\",\n    \"keywords\": [\n        \"plu\",\n        \"municipality\"\n    ],\n    \"geography\": {\n        \"spatial_representation\": \"test\"\n    },\n    \"temporal_spread\": {\n        \"start_date\": \"2021-02-12T10:33:15Z\"\n    },\n    \"resource_languages\": [\n        \"fr\"\n    ],\n    \"producer\": {\n        \"organization_id\": \"{{softOrg1Id}}\",\n        \"organization_name\": \"IRISA\",\n        \"collection_tag\": \"{{stamp}}\"\n    },\n    \"contacts\": [\n        {\n            \"contact_id\": \"{{softContact1Id}}\",\n            \"contact_name\": \"Mme. Feya\",\n            \"email\": \"feya@irisa.fr\",\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"metadata_info\": {\n        \"api_version\": \"{{apiVersion}}\"\n    },\n    \"dataset_dates\": {\n        \"created\": \"{{now}}\",\n        \"published\": \"{{now}}\"\n    },\n    \"available_formats\": [\n        {\n            \"checksum\": {\n                \"algo\": \"MD5\",\n                \"hash\": \"df4f0fceee7b4ee614295b95531ba1d5\"\n            },\n            \"connector\": {\n                \"url\": \"https://app.swaggerhub.com/apis/OlivierMartineau/RUDI-PRODUCER/{{apiVersion}}\"\n            },\n            \"media_type\": \"FILE\",\n            \"media_id\": \"{{mediaId2}}\",\n            \"file_type\": \"application/json\",\n            \"file_size\": 59033,\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"storage_status\": \"online\",\n    \"access_condition\": {\n        \"licence\": {\n            \"licence_type\": \"STANDARD\",\n            \"licence_label\": \"licence_public-domain-cc0\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/resources",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add meta 2 fails 'start_date'",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Metadata 2 creation: missingy property 'temporal_spread.start_date'\", () => {",
									"    pm.expect(pm.response.code).to.gte(400);",
									"    const responseJson = pm.response.json();",
									"    ////console.log(responseJson.message);",
									"    const msg = \"La propriété 'temporal_spread.start_date' est requise lorsque la propriété parente 'temporal_spread' est renseignée\"",
									"    pm.expect(responseJson.message.substring(0, msg.length)).to.eql(msg);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"global_id\": \"{{softMeta2Id}}\",\n    \"local_id\": \"testingID {{softMeta2Id}}\",\n    \"doi\": \"10.1007/s00223-003-0070-333/{{softMeta2Id}}\",\n    \"resource_title\": \"Test de RUDI en local {{softMeta2Id}}\",\n    \"synopsis\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Courte description de RUDI en local 33\"\n        }\n    ],\n    \"summary\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Mon résumé chg 3\"\n        }\n    ],\n    \"purpose\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"{{stamp}}\"\n        }\n    ],\n    \"theme\": \"energyNetworks\",\n    \"keywords\": [\n        \"plu\",\n        \"municipality\"\n    ],\n    \"geography\": {\n        \"spatial_representation\": \"test\",\n        \"bounding_box\": {\n            \"west_longitude\": -1.677803,\n            \"east_longitude\": -1.677803,\n            \"north_latitude\": 48.112834,\n            \"south_latitude\": 48.112834\n        }\n    },\n    \"temporal_spread\": {\n        \"end_date\": \"2021-02-12T10:33:15Z\"\n    },\n    \"resource_languages\": [\n        \"fr\"\n    ],\n    \"producer\": {\n        \"organization_id\": \"{{softOrg1Id}}\",\n        \"organization_name\": \"IRISA\",\n        \"collection_tag\": \"{{stamp}}\"\n    },\n    \"contacts\": [\n        {\n            \"contact_id\": \"{{softContact1Id}}\",\n            \"contact_name\": \"Mme. Feya\",\n            \"email\": \"feya@irisa.fr\",\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"metadata_info\": {\n        \"api_version\": \"{{apiVersion}}\"\n    },\n    \"dataset_dates\": {\n        \"created\": \"{{now}}\",\n        \"published\": \"{{now}}\"\n    },\n    \"available_formats\": [\n        {\n            \"checksum\": {\n                \"algo\": \"MD5\",\n                \"hash\": \"df4f0fceee7b4ee614295b95531ba1d5\"\n            },\n            \"connector\": {\n                \"url\": \"https://app.swaggerhub.com/apis/OlivierMartineau/RUDI-PRODUCER/{{apiVersion}}\",\n                \"interface_contract\": \"page\"\n            },\n            \"media_type\": \"FILE\",\n            \"media_id\": \"{{mediaId2}}\",\n            \"file_type\": \"application/json\",\n            \"file_size\": 59033,\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"storage_status\": \"online\",\n    \"access_condition\": {\n        \"licence\": {\n            \"licence_type\": \"STANDARD\",\n            \"licence_label\": \"licence_public-domain-cc0\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/resources",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add meta 2 fails 'access_condition'",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Metadata 2 creation: missingy property 'access_condition'\", () => {",
									"    pm.expect(pm.response.code).to.gte(400);",
									"    const responseJson = pm.response.json();",
									"    //console.log(responseJson.message);",
									"    const msg = \"Metadata validation failed: access_condition: Path `access_condition` is required.\"",
									"    pm.expect(responseJson.message.substring(0, msg.length)).to.eql(msg);",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"global_id\": \"{{softMeta2Id}}\",\n    \"local_id\": \"testingID {{softMeta2Id}}\",\n    \"doi\": \"10.1007/s00223-003-0070-333/{{softMeta2Id}}\",\n    \"resource_title\": \"Test de RUDI en local {{softMeta2Id}}\",\n    \"synopsis\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Courte description de RUDI en local 33\"\n        }\n    ],\n    \"summary\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Mon résumé chg 3\"\n        }\n    ],\n    \"purpose\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"{{stamp}}\"\n        }\n    ],\n    \"theme\": \"energyNetworks\",\n    \"keywords\": [\n        \"plu\",\n        \"municipality\"\n    ],\n    \"geography\": {\n        \"spatial_representation\": \"test\",\n        \"bounding_box\": {\n            \"west_longitude\": -1.677803,\n            \"east_longitude\": -1.677803,\n            \"north_latitude\": 48.112834,\n            \"south_latitude\": 48.112834\n        }\n    },\n    \"temporal_spread\": {\n        \"start_date\": \"2021-02-12T10:33:15Z\",\n        \"end_date\": \"2021-02-12T10:33:15Z\"\n    },\n    \"resource_languages\": [\n        \"fr\"\n    ],\n    \"producer\": {\n        \"organization_id\": \"{{softOrg1Id}}\",\n        \"organization_name\": \"IRISA\",\n        \"collection_tag\": \"{{stamp}}\"\n    },\n    \"contacts\": [\n        {\n            \"contact_id\": \"{{softContact1Id}}\",\n            \"contact_name\": \"Mme. Feya\",\n            \"email\": \"feya@irisa.fr\",\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"metadata_info\": {\n        \"api_version\": \"{{apiVersion}}\"\n    },\n    \"dataset_dates\": {\n        \"created\": \"{{now}}\",\n        \"published\": \"{{now}}\"\n    },\n    \"available_formats\": [\n        {\n            \"checksum\": {\n                \"algo\": \"MD5\",\n                \"hash\": \"df4f0fceee7b4ee614295b95531ba1d5\"\n            },\n            \"connector\": {\n                \"url\": \"https://app.swaggerhub.com/apis/OlivierMartineau/RUDI-PRODUCER/{{apiVersion}}\",\n                \"interface_contract\": \"page\"\n            },\n            \"media_type\": \"FILE\",\n            \"media_id\": \"{{mediaId2}}\",\n            \"file_type\": \"application/json\",\n            \"file_size\": 59033,\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"storage_status\": \"online\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/resources",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add meta 2 fails 'licence'",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Metadata 2 creation: missingy property 'access_conditionlicence'\", () => {",
									"    pm.expect(pm.response.code).to.gte(400);",
									"    const responseJson = pm.response.json();",
									"    ////console.log(responseJson.message);",
									"    //const msg = \"La propriété 'access_condition.licence' est requise lorsque la propriété parente 'access_condition' est renseignée\"",
									"    const msg = \"Metadata validation failed: access_condition.licence: Path `licence` is required.\"",
									"    pm.expect(responseJson.message.substring(0, msg.length)).to.eql(msg);",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"global_id\": \"{{softMeta2Id}}\",\n    \"local_id\": \"testingID {{softMeta2Id}}\",\n    \"doi\": \"10.1007/s00223-003-0070-333/{{softMeta2Id}}\",\n    \"resource_title\": \"Test de RUDI en local {{softMeta2Id}}\",\n    \"synopsis\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Courte description de RUDI en local 33\"\n        }\n    ],\n    \"summary\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Mon résumé chg 3\"\n        }\n    ],\n    \"purpose\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"{{stamp}}\"\n        }\n    ],\n    \"theme\": \"energyNetworks\",\n    \"keywords\": [\n        \"plu\",\n        \"municipality\"\n    ],\n    \"geography\": {\n        \"spatial_representation\": \"test\",\n        \"bounding_box\": {\n            \"west_longitude\": -1.677803,\n            \"east_longitude\": -1.677803,\n            \"north_latitude\": 48.112834,\n            \"south_latitude\": 48.112834\n        }\n    },\n    \"temporal_spread\": {\n        \"start_date\": \"2021-02-12T10:33:15Z\",\n        \"end_date\": \"2021-02-12T10:33:15Z\"\n    },\n    \"resource_languages\": [\n        \"fr\"\n    ],\n    \"producer\": {\n        \"organization_id\": \"{{softOrg1Id}}\",\n        \"organization_name\": \"IRISA\",\n        \"collection_tag\": \"{{stamp}}\"\n    },\n    \"contacts\": [\n        {\n            \"contact_id\": \"{{softContact1Id}}\",\n            \"contact_name\": \"Mme. Feya\",\n            \"email\": \"feya@irisa.fr\",\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"metadata_info\": {\n        \"api_version\": \"{{apiVersion}}\"\n    },\n    \"dataset_dates\": {\n        \"created\": \"{{now}}\",\n        \"published\": \"{{now}}\"\n    },\n    \"available_formats\": [\n        {\n            \"checksum\": {\n                \"algo\": \"MD5\",\n                \"hash\": \"df4f0fceee7b4ee614295b95531ba1d5\"\n            },\n            \"connector\": {\n                \"url\": \"https://app.swaggerhub.com/apis/OlivierMartineau/RUDI-PRODUCER/{{apiVersion}}\",\n                \"interface_contract\": \"page\"\n            },\n            \"media_type\": \"FILE\",\n            \"media_id\": \"{{mediaId2}}\",\n            \"file_type\": \"application/json\",\n            \"file_size\": 59033,\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"storage_status\": \"online\",\n    \"access_condition\": {\n        \"confidentiality\": {\n            \"gdpr_sensitive\": false\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/resources",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add meta 2 fails 'licence_label' value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Metadata 2 creation: 'licence_label' not recognized\", () => {",
									"    pm.expect(pm.response.code).to.gte(400);",
									"    const requestBody = JSON.parse(pm.request.body);",
									"    const licenceLabel = requestBody.access_condition.licence.licence_label;",
									"    const expectedResponse = `Licence label '${licenceLabel}' was not found in licence list `",
									"",
									"    const responseJson = pm.response.json();",
									"    ////console.log(responseJson.message);",
									"    pm.expect(responseJson.message.substring(0,expectedResponse.length)).eql(expectedResponse);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"global_id\": \"{{softMeta2Id}}\",\n    \"local_id\": \"testingID {{softMeta2Id}}\",\n    \"doi\": \"10.1007/s00223-003-0070-333/{{softMeta2Id}}\",\n    \"resource_title\": \"Test de RUDI en local {{softMeta2Id}}\",\n    \"synopsis\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Courte description de RUDI en local 33\"\n        }\n    ],\n    \"purpose\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"{{stamp}}\"\n        }\n    ],\n    \"summary\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Mon résumé chg 3\"\n        }\n    ],\n    \"theme\": \"energyNetworks\",\n    \"keywords\": [\n        \"plu\",\n        \"municipality\"\n    ],\n    \"geography\": {\n        \"spatial_representation\": \"test\",\n        \"bounding_box\": {\n            \"west_longitude\": -1.677803,\n            \"east_longitude\": -1.677803,\n            \"north_latitude\": 48.112834,\n            \"south_latitude\": 48.112834\n        }\n    },\n    \"temporal_spread\": {\n        \"start_date\": \"2021-02-12T10:33:15Z\",\n        \"end_date\": \"2021-02-12T10:33:15Z\"\n    },\n    \"resource_languages\": [\n        \"fr\"\n    ],\n    \"producer\": {\n        \"organization_id\": \"{{softOrg1Id}}\",\n        \"organization_name\": \"IRISA\",\n        \"collection_tag\": \"{{stamp}}\"\n    },\n    \"contacts\": [\n        {\n            \"contact_id\": \"{{softContact1Id}}\",\n            \"contact_name\": \"Mme. Feya\",\n            \"email\": \"feya@irisa.fr\",\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"metadata_info\": {\n        \"api_version\": \"{{apiVersion}}\"\n    },\n    \"dataset_dates\": {\n        \"created\": \"{{now}}\",\n        \"published\": \"{{now}}\"\n    },\n    \"available_formats\": [\n        {\n            \"checksum\": {\n                \"algo\": \"MD5\",\n                \"hash\": \"df4f0fceee7b4ee614295b95531ba1d5\"\n            },\n            \"connector\": {\n                \"url\": \"https://app.swaggerhub.com/apis/OlivierMartineau/RUDI-PRODUCER/{{apiVersion}}\",\n                \"interface_contract\": \"page\"\n            },\n            \"media_type\": \"FILE\",\n            \"media_id\": \"{{mediaId2}}\",\n            \"file_type\": \"application/json\",\n            \"file_size\": 59033,\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"storage_status\": \"online\",\n    \"access_condition\": {\n        \"licence\": {\n            \"licence_type\": \"STANDARD\",\n            \"licence_label\": \"licence_other\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/resources",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add meta 2 fails 'licence_type' missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Metadata 2 creation: missing 'licence_type'\", () => {",
									"    pm.expect(pm.response.code).to.gte(400);",
									"    const requestBody = JSON.parse(pm.request.body);",
									"    // const licenceLabel = requestBody.access_condition.licence.licence_label;",
									"    const expectedResponse = \"Metadata validation failed: access_condition.licence.licence_type: Path `licence_type` is required.\"",
									"",
									"    const responseJson = pm.response.json();",
									"    //console.log(responseJson.message);",
									"    pm.expect(responseJson.message.substring(0,expectedResponse.length)).eql(expectedResponse);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"global_id\": \"{{softMeta2Id}}\",\n    \"local_id\": \"testingID {{softMeta2Id}}\",\n    \"doi\": \"10.1007/s00223-003-0070-333/{{softMeta2Id}}\",\n    \"resource_title\": \"Test de RUDI en local {{softMeta2Id}}\",\n    \"synopsis\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Courte description de RUDI en local 33\"\n        }\n    ],\n    \"summary\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Mon résumé chg 3\"\n        }\n    ],\n    \"purpose\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"{{stamp}}\"\n        }\n    ],\n    \"theme\": \"energyNetworks\",\n    \"keywords\": [\n        \"plu\",\n        \"municipality\"\n    ],\n    \"geography\": {\n        \"spatial_representation\": \"test\",\n        \"bounding_box\": {\n            \"west_longitude\": -1.677803,\n            \"east_longitude\": -1.677803,\n            \"north_latitude\": 48.112834,\n            \"south_latitude\": 48.112834\n        }\n    },\n    \"temporal_spread\": {\n        \"start_date\": \"2021-02-12T10:33:15Z\",\n        \"end_date\": \"2021-02-12T10:33:15Z\"\n    },\n    \"resource_languages\": [\n        \"fr\"\n    ],\n    \"producer\": {\n        \"organization_id\": \"{{softOrg1Id}}\",\n        \"organization_name\": \"IRISA\",\n        \"collection_tag\": \"{{stamp}}\"\n    },\n    \"contacts\": [\n        {\n            \"contact_id\": \"{{softContact1Id}}\",\n            \"contact_name\": \"Mme. Feya\",\n            \"email\": \"feya@irisa.fr\",\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"metadata_info\": {\n        \"api_version\": \"{{apiVersion}}\"\n    },\n    \"dataset_dates\": {\n        \"created\": \"{{now}}\",\n        \"published\": \"{{now}}\"\n    },\n    \"available_formats\": [\n        {\n            \"checksum\": {\n                \"algo\": \"MD5\",\n                \"hash\": \"df4f0fceee7b4ee614295b95531ba1d5\"\n            },\n            \"connector\": {\n                \"url\": \"https://app.swaggerhub.com/apis/OlivierMartineau/RUDI-PRODUCER/{{apiVersion}}\",\n                \"interface_contract\": \"page\"\n            },\n            \"media_type\": \"FILE\",\n            \"media_id\": \"{{mediaId2}}\",\n            \"file_type\": \"application/json\",\n            \"file_size\": 59033,\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"storage_status\": \"online\",\n    \"access_condition\": {\n        \"licence\": {\n            \"licence_label\": \"CUSTOM\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/resources",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add meta 2 fails 'custom_licence_uri' missing Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Metadata 2 creation: missing 'licence_label'\", () => {",
									"    pm.expect(pm.response.code).to.gte(400);",
									"    const requestBody = JSON.parse(pm.request.body);",
									"    // const licenceLabel = requestBody.access_condition.licence.licence_label;",
									"    const expectedResponse = `La propriété 'licence.licence_label' est requise lorsque la propriété 'licence.licence_type' vaut 'STANDARD'`",
									"",
									"    const responseJson = pm.response.json();",
									"    //console.log(responseJson.message);",
									"    pm.expect(responseJson.message.substring(0,expectedResponse.length)).eql(expectedResponse);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"global_id\": \"{{softMeta2Id}}\",\n    \"local_id\": \"testingID {{softMeta2Id}}\",\n    \"doi\": \"10.1007/s00223-003-0070-333/{{softMeta2Id}}\",\n    \"resource_title\": \"Test de RUDI en local {{softMeta2Id}}\",\n    \"synopsis\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Courte description de RUDI en local 33\"\n        }\n    ],\n    \"summary\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Mon résumé chg 3\"\n        }\n    ],\n    \"purpose\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"{{stamp}}\"\n        }\n    ],\n    \"theme\": \"energyNetworks\",\n    \"keywords\": [\n        \"plu\",\n        \"municipality\"\n    ],\n    \"geography\": {\n        \"spatial_representation\": \"test\",\n        \"bounding_box\": {\n            \"west_longitude\": -1.677803,\n            \"east_longitude\": -1.677803,\n            \"north_latitude\": 48.112834,\n            \"south_latitude\": 48.112834\n        }\n    },\n    \"temporal_spread\": {\n        \"start_date\": \"2021-02-12T10:33:15Z\",\n        \"end_date\": \"2021-02-12T10:33:15Z\"\n    },\n    \"resource_languages\": [\n        \"fr\"\n    ],\n    \"producer\": {\n        \"organization_id\": \"{{softOrg1Id}}\",\n        \"organization_name\": \"IRISA\",\n        \"collection_tag\": \"{{stamp}}\"\n    },\n    \"contacts\": [\n        {\n            \"contact_id\": \"{{softContact1Id}}\",\n            \"contact_name\": \"Mme. Feya\",\n            \"email\": \"feya@irisa.fr\",\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"metadata_info\": {\n        \"api_version\": \"{{apiVersion}}\"\n    },\n    \"dataset_dates\": {\n        \"created\": \"{{now}}\",\n        \"published\": \"{{now}}\"\n    },\n    \"available_formats\": [\n        {\n            \"checksum\": {\n                \"algo\": \"MD5\",\n                \"hash\": \"df4f0fceee7b4ee614295b95531ba1d5\"\n            },\n            \"connector\": {\n                \"url\": \"https://app.swaggerhub.com/apis/OlivierMartineau/RUDI-PRODUCER/{{apiVersion}}\",\n                \"interface_contract\": \"page\"\n            },\n            \"media_type\": \"FILE\",\n            \"media_id\": \"{{mediaId2}}\",\n            \"file_type\": \"application/json\",\n            \"file_size\": 59033,\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"storage_status\": \"online\",\n    \"access_condition\": {\n        \"licence\": {\n            \"licence_type\": \"STANDARD\",\n            \"custom_licence_label\": {\n                \"lang\": \"fr\",\n                \"text\": \"CC BY-NC-SA 4.0\"\n            }\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/resources",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add meta 2 fails 'custom_licence_label' missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Metadata 2 creation: missing 'custom_licence_label'\", () => {",
									"    pm.expect(pm.response.code).to.gte(400);",
									"    const requestBody = JSON.parse(pm.request.body);",
									"    // const licenceLabel = requestBody.access_condition.licence.licence_label;",
									"    const expectedResponse = `La propriété 'licence.custom_licence_label' est requise lorsque la propriété 'licence.licence_type' vaut 'CUSTOM'`",
									"",
									"    const responseJson = pm.response.json();",
									"    //console.log(responseJson.message);",
									"    pm.expect(responseJson.message.substring(0,expectedResponse.length)).eql(expectedResponse);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"global_id\": \"{{softMeta2Id}}\",\n    \"local_id\": \"testingID {{softMeta2Id}}\",\n    \"doi\": \"10.1007/s00223-003-0070-333/{{softMeta2Id}}\",\n    \"resource_title\": \"Test de RUDI en local {{softMeta2Id}}\",\n    \"purpose\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"{{stamp}}\"\n        }\n    ],\n    \"synopsis\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Courte description de RUDI en local 33\"\n        }\n    ],\n    \"summary\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Mon résumé chg 3\"\n        }\n    ],\n    \"theme\": \"energyNetworks\",\n    \"keywords\": [\n        \"plu\",\n        \"municipality\"\n    ],\n    \"geography\": {\n        \"spatial_representation\": \"test\",\n        \"bounding_box\": {\n            \"west_longitude\": -1.677803,\n            \"east_longitude\": -1.677803,\n            \"north_latitude\": 48.112834,\n            \"south_latitude\": 48.112834\n        }\n    },\n    \"temporal_spread\": {\n        \"start_date\": \"2021-02-12T10:33:15Z\",\n        \"end_date\": \"2021-02-12T10:33:15Z\"\n    },\n    \"resource_languages\": [\n        \"fr\"\n    ],\n    \"producer\": {\n        \"organization_id\": \"{{softOrg1Id}}\",\n        \"organization_name\": \"IRISA\",\n        \"collection_tag\": \"{{stamp}}\"\n    },\n    \"contacts\": [\n        {\n            \"contact_id\": \"{{softContact1Id}}\",\n            \"contact_name\": \"Mme. Feya\",\n            \"email\": \"feya@irisa.fr\",\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"metadata_info\": {\n        \"api_version\": \"{{apiVersion}}\"\n    },\n    \"dataset_dates\": {\n        \"created\": \"{{now}}\",\n        \"published\": \"{{now}}\"\n    },\n    \"available_formats\": [\n        {\n            \"checksum\": {\n                \"algo\": \"MD5\",\n                \"hash\": \"df4f0fceee7b4ee614295b95531ba1d5\"\n            },\n            \"connector\": {\n                \"url\": \"https://app.swaggerhub.com/apis/OlivierMartineau/RUDI-PRODUCER/{{apiVersion}}\",\n                \"interface_contract\": \"page\"\n            },\n            \"media_type\": \"FILE\",\n            \"media_id\": \"{{mediaId2}}\",\n            \"file_type\": \"application/json\",\n            \"file_size\": 59033,\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"storage_status\": \"online\",\n    \"access_condition\": {\n        \"licence\": {\n            \"licence_type\": \"CUSTOM\",\n            \"licence_label\": \"CC BY-NC-SA 4.0\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/resources",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add meta 2 fails 'custom_licence_uri' missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Metadata 2 creation: missing 'custom_licence_uri'\", () => {",
									"    pm.expect(pm.response.code).to.gte(400);",
									"    const requestBody = JSON.parse(pm.request.body);",
									"    // const licenceLabel = requestBody.access_condition.licence.licence_label;",
									"    const expectedResponse = `La propriété 'licence.custom_licence_uri' est requise lorsque la propriété 'licence.licence_type' vaut 'CUSTOM'`",
									"",
									"    const responseJson = pm.response.json();",
									"    //console.log(responseJson.message);",
									"    pm.expect(responseJson.message.substring(0,expectedResponse.length)).eql(expectedResponse);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"global_id\": \"{{softMeta2Id}}\",\n    \"local_id\": \"testingID {{softMeta2Id}}\",\n    \"doi\": \"10.1007/s00223-003-0070-333/{{softMeta2Id}}\",\n    \"resource_title\": \"Test de RUDI en local {{softMeta2Id}}\",\n    \"purpose\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"{{stamp}}\"\n        }\n    ],\n    \"synopsis\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Courte description de RUDI en local 33\"\n        }\n    ],\n    \"summary\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Mon résumé chg 3\"\n        }\n    ],\n    \"theme\": \"energyNetworks\",\n    \"keywords\": [\n        \"plu\",\n        \"municipality\"\n    ],\n    \"geography\": {\n        \"spatial_representation\": \"test\",\n        \"bounding_box\": {\n            \"west_longitude\": -1.677803,\n            \"east_longitude\": -1.677803,\n            \"north_latitude\": 48.112834,\n            \"south_latitude\": 48.112834\n        }\n    },\n    \"temporal_spread\": {\n        \"start_date\": \"2021-02-12T10:33:15Z\",\n        \"end_date\": \"2021-02-12T10:33:15Z\"\n    },\n    \"resource_languages\": [\n        \"fr\"\n    ],\n    \"producer\": {\n        \"organization_id\": \"{{softOrg1Id}}\",\n        \"organization_name\": \"IRISA\",\n        \"collection_tag\": \"{{stamp}}\"\n    },\n    \"contacts\": [\n        {\n            \"contact_id\": \"{{softContact1Id}}\",\n            \"contact_name\": \"Mme. Feya\",\n            \"email\": \"feya@irisa.fr\",\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"metadata_info\": {\n        \"api_version\": \"{{apiVersion}}\"\n    },\n    \"dataset_dates\": {\n        \"created\": \"{{now}}\",\n        \"published\": \"{{now}}\"\n    },\n    \"available_formats\": [\n        {\n            \"checksum\": {\n                \"algo\": \"MD5\",\n                \"hash\": \"df4f0fceee7b4ee614295b95531ba1d5\"\n            },\n            \"connector\": {\n                \"url\": \"https://app.swaggerhub.com/apis/OlivierMartineau/RUDI-PRODUCER/{{apiVersion}}\",\n                \"interface_contract\": \"page\"\n            },\n            \"media_type\": \"FILE\",\n            \"media_id\": \"{{mediaId2}}\",\n            \"file_type\": \"application/json\",\n            \"file_size\": 59033,\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"storage_status\": \"online\",\n    \"access_condition\": {\n        \"licence\": {\n            \"licence_type\": \"CUSTOM\",\n            \"custom_licence_label\": {\n                \"lang\": \"fr\",\n                \"text\": \"CC BY-NC-SA 4.0\"\n            }\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/resources",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add meta 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Metadata 2 created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    // console.log(responseJson);",
									"    const metaId = pm.variables.get('softMeta2Id');",
									"    const orgId = pm.variables.get('softOrg1Id');",
									"    pm.expect(responseJson.global_id).to.eq(metaId);",
									"    pm.expect(responseJson.contacts.length).to.eq(1);",
									"    pm.expect(responseJson.producer.organization_id).to.eq(orgId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('softMeta2Id', rand.get('{{$randomUUID}}'));",
									"pm.collectionVariables.set('softMedia2Id', rand.get('{{$randomUUID}}'));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"global_id\": \"{{softMeta2Id}}\",\n    \"local_id\": \"{{$randomUUID}}\",\n    \"doi\": \"10.1007/s00223-003-0070-333/{{softMeta2Id}}\",\n    \"resource_title\": \"Test de RUDI en local - {{softMeta2Id}}\",\n    \"collection_tag\": \"{{stamp}}\",\n    \"purpose\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"{{stamp}}\"\n        }\n    ],\n    \"synopsis\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Courte description de RUDI en local 33\"\n        }\n    ],\n    \"summary\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Mon résumé chg 3\"\n        }\n    ],\n    \"theme\": \"energyNetworks\",\n    \"keywords\": [\n        \"plu\",\n        \"municipality\"\n    ],\n    \"geography\": {\n        \"spatial_representation\": \"test\",\n        \"bounding_box\": {\n            \"west_longitude\": -1.677803,\n            \"east_longitude\": -1.677803,\n            \"north_latitude\": 48.112834,\n            \"south_latitude\": 48.112834\n        }\n    },\n    \"temporal_spread\": {\n        \"start_date\": \"2021-02-12T10:33:15Z\",\n        \"end_date\": \"2021-02-12T10:33:15Z\"\n    },\n    \"resource_languages\": [\n        \"fr\"\n    ],\n    \"producer\": {\n        \"organization_id\": \"{{softOrg1Id}}\",\n        \"organization_name\": \"IRISA\",\n        \"collection_tag\": \"{{stamp}}\"\n    },\n    \"contacts\": [\n        {\n            \"contact_id\": \"{{softContact1Id}}\",\n            \"contact_name\": \"Mme. Feya\",\n            \"email\": \"feya@irisa.fr\",\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"metadata_info\": {\n        \"api_version\": \"{{apiVersion}}\",\n        \"metadata_provider\": {\n            \"organization_id\": \"{{softOrg1Id}}\"\n        },\n        \"metadata_contacts\": [\n            {\n                \"contact_id\": \"{{softContact1Id}}\"\n            }\n        ]\n    },\n    \"dataset_dates\": {\n        \"created\": \"{{now}}\",\n        \"published\": \"{{now}}\"\n    },\n    \"available_formats\": [\n        {\n            \"checksum\": {\n                \"algo\": \"MD5\",\n                \"hash\": \"df4f0fceee7b4ee614295b95531ba1d5\"\n            },\n            \"connector\": {\n                \"url\": \"https://app.swaggerhub.com/apis/OlivierMartineau/RUDI-PRODUCER/{{apiVersion}}\"\n            },\n            \"media_type\": \"FILE\",\n            \"media_id\": \"{{softMedia2Id}}\",\n            \"file_type\": \"application/json\",\n            \"file_size\": 59033,\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"storage_status\": \"online\",\n    \"access_condition\": {\n        \"licence\": {\n            \"licence_type\": \"CUSTOM\",\n            \"custom_licence_label\": {\n                \"lang\": \"fr\",\n                \"text\": \"CC BY-NC-SA 4.0\"\n            },\n            \"custom_licence_uri\": \"https://creativecommons.org/licenses/by-nc-sa/4.0/\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/resources",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get theme values in data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Init themes with actual metadata theme values\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    const keys = Object.keys(responseJson)",
									"    pm.expect(keys.length).to.gt(0)",
									"    pm.expect(typeof responseJson[keys[0]]).to.eq('string')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/enum/Themes/init",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"enum",
								"Themes",
								"init"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUB] Sort metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"2 metadata created\", () => {",
									"    if (!mem.get(mem.get('portalJwtName')) == 'No portal connected') {",
									"        pm.expect(pm.response.code).to.eql(400);",
									"        return",
									"    }",
									"    pm.expect(pm.response.code).to.eql(200);",
									"",
									"    const publicMetadataList = pm.response.json();",
									"    pm.expect(publicMetadataList.total).to.eq(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/v1/resources?limit=50&sort_by=-createdAt&fields=resource_title,global_id,createdAt,collection_tag&collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"v1",
								"resources"
							],
							"query": [
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "sort_by",
									"value": "-createdAt"
								},
								{
									"key": "fields",
									"value": "resource_title,global_id,createdAt,collection_tag"
								},
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUB] Get all metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"2 metadata created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const metadataList = pm.response.json();",
									"    const publicMetadataList = pm.response.json();",
									"    pm.expect(publicMetadataList.total).to.eq(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/v1/resources?sort_by=-createdAt&collection_tag={{stamp}}&fields=global_id,producer",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"v1",
								"resources"
							],
							"query": [
								{
									"key": "sort_by",
									"value": "-createdAt"
								},
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								},
								{
									"key": "fields",
									"value": "global_id,producer"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUB] Get all metadata unfiltered",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"2 metadata created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const metadataList = pm.response.json();",
									"    const publicMetadataList = pm.response.json();",
									"    pm.expect(publicMetadataList.total).to.gte(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/v1/resources",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"v1",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUB] Get all metadata with trailing slashes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Testing URL with slashes\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const metadataList = pm.response.json();",
									"    // console.log(metadataList.length)",
									"    const publicMetadataList = pm.response.json();",
									"    pm.expect(publicMetadataList.total).to.eq(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/v1/resources/?sort_by=-createdAt&collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"v1",
								"resources",
								""
							],
							"query": [
								{
									"key": "sort_by",
									"value": "-createdAt"
								},
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUB] Get last updated metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Testing URL with slashes\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const metadataList = pm.response.json();",
									"    // console.log(metadataList.length)",
									"    const publicMetadataList = pm.response.json();",
									"    pm.expect(publicMetadataList.items.length).to.lte(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/v1/resources/?sort_by=-updatedAt&limit=1&fields=updatedAt",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"v1",
								"resources",
								""
							],
							"query": [
								{
									"key": "sort_by",
									"value": "-updatedAt"
								},
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "fields",
									"value": "updatedAt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search metadata\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const res = pm.response.json();",
									"    pm.expect(res.total).to.eq(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/resources/search?\"local 33\"&collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources",
								"search"
							],
							"query": [
								{
									"key": "\"local 33\"",
									"value": null
								},
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUB] Search metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search metadata (public)\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const res = pm.response.json();",
									"    pm.expect(res.total).to.eq(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/v1/resources/search?\"local 33\"&collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"v1",
								"resources",
								"search"
							],
							"query": [
								{
									"key": "\"local 33\"",
									"value": null
								},
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit meta 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('softMedia11Id', rand.get('{{$randomUUID}}'));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Metadata 1 edited\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    const metaId = pm.variables.get('softMeta1Id');",
									"    const orgId1 = pm.variables.get('softOrg1Id');",
									"    const orgId2 = pm.variables.get('orgId2');",
									"    const contId1 = pm.variables.get('contId1');",
									"    const contId2 = pm.variables.get('contId2');",
									"",
									"    pm.expect(responseJson.global_id).to.eq(metaId);",
									"    pm.expect(responseJson.producer.organization_id).to.eq(orgId1);",
									"    pm.expect(!!match.uuid(responseJson.contacts[0]));",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"global_id\": \"{{softMeta1Id}}\",\n    \"local_id\": \"testingID {{softMeta1Id}}\",\n    \"doi\": \"10.1007/s00223-003-0070-444/{{softMeta1Id}}\",\n    \"resource_title\": \"Test de RUDI en local {{softMeta1Id}}\",\n    \"synopsis\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Courte description de RUDI en local 4444\"\n        }\n    ],\n    \"summary\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Mon résumé chg 4\"\n        }\n    ],\n    \"collection_tag\": \"{{stamp}}\",\n    \"purpose\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"{{stamp}}\"\n        }\n    ],\n    \"theme\": \"energyNetworks\",\n    \"keywords\": [\n        \"energy_consommation\",\n        \"electricity\"\n    ],\n    \"geography\": {\n        \"bounding_box\": {\n            \"west_longitude\": -1.677803,\n            \"east_longitude\": -1.677803,\n            \"north_latitude\": 48.112834,\n            \"south_latitude\": 48.112834\n        }\n    },\n    \"temporal_spread\": {\n        \"start_date\": \"2021-02-12T10:33:15Z\"\n    },\n    \"resource_languages\": [\n        \"fr\"\n    ],\n    \"producer\": {\n        \"organization_id\": \"{{softOrg1Id}}\",\n        \"collection_tag\": \"{{stamp}}\"\n    },\n    \"contacts\": [\n        {\n            \"contact_id\": \"{{softContact1Id}}\",\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"metadata_info\": {\n        \"api_version\": \"{{apiVersion}}\",\n        \"metadata_provider\": {\n            \"organization_id\": \"{{softOrg2Id}}\",\n            \"collection_tag\": \"{{stamp}}\"\n        },\n        \"metadata_contacts\": [\n            {\n                \"contact_id\": \"{{softContact2Id}}\",\n                \"collection_tag\": \"{{stamp}}\"\n            }\n        ]\n    },\n    \"dataset_dates\": {\n        \"created\": \"{{now}}\",\n        \"published\": \"{{now}}\"\n    },\n    \"storage_status\": \"online\",\n    \"access_condition\": {\n        \"licence\": {\n            \"licence_type\": \"STANDARD\",\n            \"licence_label\": \"{{softLicence}}\"\n        }\n    },\n    \"available_formats\": [\n        {\n            \"media_type\": \"SERVICE\",\n            \"media_id\": \"{{softMedia11Id}}\",\n            \"connector\": {\n                \"url\": \"https://app.swaggerhub.com/apis/OlivierMartineau/RUDI-PRODUCER\"\n            },\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/resources",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							],
							"query": [
								{
									"key": "global_id",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all metadata filtered",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"2 metadata created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const metadataList = pm.response.json();",
									"    pm.expect(metadataList.length).to.eq(1);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"time.wait(1000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/resources?limit=10&keywords=plu&perlin=2346&resource_languages=fr&collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "keywords",
									"value": "plu"
								},
								{
									"key": "perlin",
									"value": "2346"
								},
								{
									"key": "resource_languages",
									"value": "fr"
								},
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Count metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Count metadata\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const result = parseInt(pm.response.text())",
									"    pm.expect(result).to.gte(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/resources/count",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources",
								"count"
							]
						}
					},
					"response": []
				},
				{
					"name": "Count by metadata_status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Count metadata by status\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const result = pm.response.json()",
									"    pm.expect(result[0].count).to.gte(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/resources?count_by=metadata_status",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							],
							"query": [
								{
									"key": "count_by",
									"value": "metadata_status"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Count by keywords",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Count metadata by keywords\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const result = pm.response.json()",
									"    pm.expect(result[0].count).to.gte(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/resources?count_by=keywords",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							],
							"query": [
								{
									"key": "count_by",
									"value": "keywords"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Count by producer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Count metadata by producer\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const result = pm.response.json()",
									"    pm.expect(result[0].count).to.gte(2);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/resources?count_by=producer&collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							],
							"query": [
								{
									"key": "count_by",
									"value": "producer"
								},
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Count by theme",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Count metadata by theme\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const result = pm.response.json()",
									"    pm.expect(result[0].count).to.gte(2);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/resources?count_by=theme",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							],
							"query": [
								{
									"key": "count_by",
									"value": "theme"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Count by api_version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Count by API version\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const metadataList = pm.response.json();",
									"    pm.expect(metadataList.length).to.gte(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/resources?count_by=metadata_info.api_version",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							],
							"query": [
								{
									"key": "count_by",
									"value": "metadata_info.api_version"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Group by api_version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Group by API version\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const metadataList = pm.response.json();",
									"    pm.expect(metadataList.length).to.gte(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/resources?group_by=metadata_info.api_version&limit=3",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							],
							"query": [
								{
									"key": "group_by",
									"value": "metadata_info.api_version"
								},
								{
									"key": "limit",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Count by metadata_provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Count by producer\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/resources?count_by=metadata_info.metadata_provider",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							],
							"query": [
								{
									"key": "count_by",
									"value": "metadata_info.metadata_provider"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Count by metadata_contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Count by producer\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/resources?count_by=metadata_info.metadata_contacts",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							],
							"query": [
								{
									"key": "count_by",
									"value": "metadata_info.metadata_contacts"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Count by producer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Count by producer\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json()",
									"",
									"    const orgId = pm.variables.get('softOrg1Id')",
									"    // console.log(`orgId: ${orgId}`)",
									"    responseJson.map((res) => {",
									"        // console.log(`res.producer.organization_id: ${res.producer.organization_id}`)",
									"        if(res.producer?.organization_id == orgId) {",
									"            // console.log(res.count)",
									"            pm.collectionVariables.set('countWithOrg1', res.count)",
									"        }",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/resources?count_by=producer&collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							],
							"query": [
								{
									"key": "count_by",
									"value": "producer"
								},
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUB] Count by producer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Count by producer\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const res = pm.response.json()",
									"",
									"    const orgId = pm.variables.get('softOrg1Id')",
									"    // console.log(`orgId: ${orgId}`)",
									"    pm.expect(res.items?.[0].producer?.organization_id == orgId).to.be.true",
									"    pm.collectionVariables.set('countWithOrg1pub', res.total)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/v1/resources?count_by=producer&collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"v1",
								"resources"
							],
							"query": [
								{
									"key": "count_by",
									"value": "producer"
								},
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUB] Filter by producer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Filter by producer\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    ",
									"    const countWithOrg1 = pm.variables.get('countWithOrg1pub')",
									"",
									"    const publicMetadataList = pm.response.json();",
									"    pm.expect(publicMetadataList.total).to.eq(countWithOrg1);",
									"    pm.expect(publicMetadataList.items.length).to.eq(countWithOrg1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/v1/resources?producer.organization_id=\"{{softOrg1Id}}\"&fields=global_id,resource_title,collection_tag,producer&collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"v1",
								"resources"
							],
							"query": [
								{
									"key": "producer.organization_id",
									"value": "\"{{softOrg1Id}}\""
								},
								{
									"key": "fields",
									"value": "global_id,resource_title,collection_tag,producer"
								},
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Group by producer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Group by producer\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"",
									"    const responseJson = pm.response.json()",
									"",
									"    const orgId = pm.variables.get('softOrg1Id')",
									"    const countWithOrg1 = pm.variables.get('countWithOrg1')",
									"    // console.log(`orgId: ${orgId}`)",
									"",
									"    let tested = false",
									"    responseJson.map((res) => {",
									"        // console.log(`res.producer.organization_id: ${res.producer.organization_id}`)",
									"        if(!tested && res.producer.organization_id == orgId) {",
									"            // console.log(res.count)",
									"            pm.expect(res.count).to.eq(countWithOrg1)",
									"            tested = true",
									"        }",
									"    })",
									"    pm.expect(tested).to.eq(true)",
									"",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/resources?group_by=producer&collection_tag={{stamp}}&limit=3&group_limit=4&fields=global_id",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							],
							"query": [
								{
									"key": "group_by",
									"value": "producer"
								},
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								},
								{
									"key": "limit",
									"value": "3"
								},
								{
									"key": "group_limit",
									"value": "4"
								},
								{
									"key": "fields",
									"value": "global_id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUB] Get meta 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Metadata 1 edition successfully saved\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    // console.log(responseJson);",
									"    const metaId = pm.variables.get('softMeta1Id');",
									"    const orgId1 = pm.variables.get('softOrg1Id');",
									"    const orgId2 = pm.variables.get('softOrg2Id');",
									"    const contId1 = pm.variables.get('softContact1Id');",
									"    const contId2 = pm.variables.get('softContact2Id');",
									"    pm.expect(responseJson.global_id).to.eq(metaId);",
									"    pm.expect(responseJson.producer.organization_id).to.eq(orgId1);",
									"    pm.expect(responseJson.metadata_info.metadata_provider.organization_id).to.eq(orgId2);",
									"    pm.expect(responseJson.contacts.length).to.eq(1);",
									"    pm.expect(responseJson.contacts[0].contact_id).to.eq(contId1);",
									"    pm.expect(responseJson.metadata_info.metadata_contacts[0].contact_id).to.eq(contId2);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/v1/resources/{{softMeta1Id}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"v1",
								"resources",
								"{{softMeta1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUB] Get missing meta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"GET missing metadata\", () => {",
									"    pm.expect(pm.response.code).to.eql(404);",
									"    const responseJson = pm.response.json();",
									"    //console.log(responseJson.statusCode)",
									"    pm.expect(responseJson.statusCode).to.eq(404)",
									"    pm.expect(responseJson.error).to.eq('Not Found')",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/v1/resources/test",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"v1",
								"resources",
								"test"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get meta 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Metadata 2 successfully added\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    // console.log(responseJson);",
									"    const metaId = pm.variables.get('softMeta2Id');",
									"    const orgId1 = pm.variables.get('softOrg1Id');",
									"    const contId1 = pm.variables.get('softContact1Id');",
									"    pm.expect(responseJson.global_id).to.eq(metaId);",
									"    pm.expect(responseJson.producer.organization_id).to.eq(orgId1);",
									"    pm.expect(responseJson.contacts.length).to.eq(1);",
									"    pm.expect(responseJson.contacts[0].contact_id).to.eq(contId1);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/resources/{{softMeta2Id}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources",
								"{{softMeta2Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add meta 4 MediaService",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Metadata 4 created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    // console.log(responseJson);",
									"    const metaId = pm.variables.get('softMeta4Id');",
									"    const orgId = pm.variables.get('softOrg1Id');",
									"    pm.expect(responseJson.global_id).to.eq(metaId);",
									"    pm.expect(responseJson.contacts.length).to.eq(1);",
									"    pm.expect(responseJson.producer.organization_id).to.eq(orgId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('softMeta4Id', rand.get('{{$randomUUID}}'));",
									"pm.collectionVariables.set('softMedia4Id', rand.get('{{$randomUUID}}'));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"global_id\": \"{{softMeta4Id}}\",\n    \"local_id\": \"{{$randomUUID}}\",\n    \"resource_title\": \"Test de RUDI en local - {{softMeta4Id}}\",\n    \"collection_tag\": \"{{stamp}}\",\n    \"purpose\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"{{stamp}}\"\n        }\n    ],\n    \"synopsis\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Courte description de RUDI en local 33\"\n        }\n    ],\n    \"summary\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Mon résumé chg 3\"\n        }\n    ],\n    \"theme\": \"energyNetworks\",\n    \"keywords\": [\n        \"plu\",\n        \"municipality\"\n    ],\n    \"geography\": {\n        \"spatial_representation\": \"test\",\n        \"bounding_box\": {\n            \"west_longitude\": -1.677803,\n            \"east_longitude\": -1.677803,\n            \"north_latitude\": 48.112834,\n            \"south_latitude\": 48.112834\n        }\n    },\n    \"temporal_spread\": {\n        \"start_date\": \"2021-02-12T10:33:15Z\",\n        \"end_date\": \"2021-02-12T10:33:15Z\"\n    },\n    \"resource_languages\": [\n        \"fr\"\n    ],\n    \"producer\": {\n        \"organization_id\": \"{{softOrg1Id}}\",\n        \"organization_name\": \"IRISA\",\n        \"collection_tag\": \"{{stamp}}\"\n    },\n    \"contacts\": [\n        {\n            \"contact_id\": \"{{softContact1Id}}\",\n            \"contact_name\": \"Mme. Feya\",\n            \"email\": \"feya@irisa.fr\",\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"metadata_info\": {\n        \"api_version\": \"{{apiVersion}}\",\n        \"metadata_provider\": {\n            \"organization_id\": \"{{softOrg1Id}}\"\n        },\n        \"metadata_contacts\": [\n            {\n                \"contact_id\": \"{{softContact1Id}}\"\n            }\n        ]\n    },\n    \"dataset_dates\": {\n        \"created\": \"{{now}}\",\n        \"published\": \"{{now}}\"\n    },\n    \"available_formats\": [\n        {\n            \"connector\": {\n                \"url\": \"https://app.swaggerhub.com/apis/OlivierMartineau/RUDI-PRODUCER/{{apiVersion}}\"\n            },\n            \"media_type\": \"SERVICE\",\n            \"media_id\": \"{{softMedia4Id}}\",\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"storage_status\": \"online\",\n    \"access_condition\": {\n        \"licence\": {\n            \"licence_type\": \"STANDARD\",\n            \"licence_label\": \"cc-by-nd-4.0\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/resources",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send metadata list to portal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Send metadata list to portal\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const res = pm.response.text()",
									"    pm.expect(res == \"Sending metadata to portal\" || res == pm.variables.get('noPortalMsg')).to.be.true",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\"{{softMeta2Id}}\"]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/portal/resources/send",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"portal",
								"resources",
								"send"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send all metadata to portal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Send all metadata to portal\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const res = pm.response.text()",
									"    pm.expect(res == \"Sending metadata to portal\" || res == pm.variables.get('noPortalMsg')).to.be.true",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/portal/resources/send",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"portal",
								"resources",
								"send"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update status field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update metadata_status field\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const res = pm.response.json()",
									"    pm.expect(res.updated).to.be.gte(0)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/resources/save?status=empty",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources",
								"save"
							],
							"query": [
								{
									"key": "status",
									"value": "empty"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "07. GMD-XML upload",
			"item": [
				{
					"name": "Add org GMD-XML 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('softOrgGmdXml1Id', rand.get('{{$randomUUID}}'))",
									"pm.collectionVariables.set('softOrgGmdXml1Name', rand.get('{{$randomCompanyName}}'))",
									"",
									"pm.collectionVariables.set('softOrg1Name', rand.get('{{$randomCompanyName}}'))"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Org 1 GMD-XML created\", () => {",
									"    try {",
									"        pm.expect(pm.response.code).to.eql(200);",
									"    } catch (err) {",
									"        // console.log(pm.response)",
									"        throw err",
									"    }",
									"    const responseJson = pm.response.json();",
									"    const orgId = pm.variables.get('softOrgGmdXml1Id');",
									"    const orgName = pm.variables.get('softOrgGmdXml1Name')",
									"    pm.expect(responseJson.organization_id).to.eq(orgId);",
									"    pm.expect(responseJson.organization_address).to.eq(\"Ancienne adresse, RENNES CEDEX, 35031, France\");",
									"    pm.expect(responseJson.organization_name).to.eq(orgName)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<gmd:CI_ResponsibleParty collectionTag=\"{{stamp}}\">\n    <gmd:identifier>\n        <gmd:MD_Identifier>\n            <gmd:code>\n                <gco:CharacterString>{{softOrgGmdXml1Id}}</gco:CharacterString>\n            </gmd:code>\n        </gmd:MD_Identifier>\n    </gmd:identifier>\n    <gmd:organisationName>\n        <gco:CharacterString>{{softOrgGmdXml1Name}}</gco:CharacterString>\n    </gmd:organisationName>\n    <gmd:contactInfo>\n        <gmd:CI_Contact>\n            <gmd:phone>\n                <gmd:CI_Telephone>\n                    <gmd:voice>\n                        <gco:CharacterString>00 00 00 00 00</gco:CharacterString>\n                    </gmd:voice>\n                </gmd:CI_Telephone>\n            </gmd:phone>\n            <gmd:address>\n                <gmd:CI_Address>\n                    <gmd:deliveryPoint>\n                        <gco:CharacterString>Ancienne adresse</gco:CharacterString>\n                    </gmd:deliveryPoint>\n                    <gmd:deliveryPoint>\n                        <gco:CharacterString>CS 23167</gco:CharacterString>\n                    </gmd:deliveryPoint>\n                    <gmd:city>\n                        <gco:CharacterString>RENNES CEDEX</gco:CharacterString>\n                    </gmd:city>\n                    <gmd:postalCode>\n                        <gco:CharacterString>35031</gco:CharacterString>\n                    </gmd:postalCode>\n                    <gmd:country>\n                        <gco:CharacterString>France</gco:CharacterString>\n                    </gmd:country>\n                    <gmd:electronicMailAddress>\n                        <gco:CharacterString>mail@mail.mail</gco:CharacterString>\n                    </gmd:electronicMailAddress>\n                    <gmd:electronicMailAddress>\n                        <gco:CharacterString>mail2@mail.mail</gco:CharacterString>\n                    </gmd:electronicMailAddress>\n                </gmd:CI_Address>\n            </gmd:address>\n            <gmd:onlineResource>\n                <gmd:CI_OnlineResource>\n                    <gmd:linkage>\n                        <gmd:URL>mail@mail.mail</gmd:URL>\n                    </gmd:linkage>\n                    <gmd:protocol>\n                        <gco:CharacterString>WWW:LINK-1.0-http--link</gco:CharacterString>\n                    </gmd:protocol>\n                </gmd:CI_OnlineResource>\n            </gmd:onlineResource>\n            <gmd:contactInstructions>\n                <gmx:FileName src=\"http://public.sig.rennesmetropole.fr/ressources/catalogue/apercus/republique_francaise.png\">Logo</gmx:FileName>\n            </gmd:contactInstructions>\n        </gmd:CI_Contact>\n    </gmd:contactInfo>\n    <gmd:role>\n        <gmd:CI_RoleCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_RoleCode\" codeListValue=\"custodian\" />\n    </gmd:role>\n</gmd:CI_ResponsibleParty>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/organizations/?objectStandard=gmd&format=xml",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"organizations",
								""
							],
							"query": [
								{
									"key": "objectStandard",
									"value": "gmd"
								},
								{
									"key": "format",
									"value": "xml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit org GMD-XML 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('softOrgGmdXml1NewName', rand.get('{{$randomCompanyName}}'))"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Org 1 GMD-XML edited\", () => {",
									"    try {",
									"        pm.expect(pm.response.code).to.eql(200);",
									"    } catch (err) {",
									"        // console.log(pm.response)",
									"        throw err",
									"    }",
									"    const responseJson = pm.response.json();",
									"    const orgId = pm.variables.get('softOrgGmdXml1Id');",
									"    const orgName = pm.variables.get('softOrgGmdXml1NewName');",
									"    pm.expect(responseJson.organization_id).to.eq(orgId);",
									"    pm.expect(responseJson.organization_name).to.eq(orgName);",
									"    pm.expect(responseJson.organization_address).to.eq(\"Nouvelle adresse, RENNES CEDEX, 35031, France\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<gmd:CI_ResponsibleParty collectionTag=\"{{stamp}}\">\n    <gmd:identifier>\n        <gmd:MD_Identifier>\n            <gmd:code>\n                <gco:CharacterString>{{softOrgGmdXml1Id}}</gco:CharacterString>\n            </gmd:code>\n        </gmd:MD_Identifier>\n    </gmd:identifier>\n    <gmd:organisationName>\n        <gco:CharacterString>{{softOrgGmdXml1NewName}}</gco:CharacterString>\n    </gmd:organisationName>\n    <gmd:contactInfo>\n        <gmd:CI_Contact>\n            <gmd:phone>\n                <gmd:CI_Telephone>\n                    <gmd:voice>\n                        <gco:CharacterString>00 00 00 00 00</gco:CharacterString>\n                    </gmd:voice>\n                </gmd:CI_Telephone>\n            </gmd:phone>\n            <gmd:address>\n                <gmd:CI_Address>\n                    <gmd:deliveryPoint>\n                        <gco:CharacterString>Nouvelle adresse</gco:CharacterString>\n                    </gmd:deliveryPoint>\n                    <gmd:deliveryPoint>\n                        <gco:CharacterString>CS 23167</gco:CharacterString>\n                    </gmd:deliveryPoint>\n                    <gmd:city>\n                        <gco:CharacterString>RENNES CEDEX</gco:CharacterString>\n                    </gmd:city>\n                    <gmd:postalCode>\n                        <gco:CharacterString>35031</gco:CharacterString>\n                    </gmd:postalCode>\n                    <gmd:country>\n                        <gco:CharacterString>France</gco:CharacterString>\n                    </gmd:country>\n                    <gmd:electronicMailAddress>\n                        <gco:CharacterString>mail@mail.mail</gco:CharacterString>\n                    </gmd:electronicMailAddress>\n                    <gmd:electronicMailAddress>\n                        <gco:CharacterString>mail2@mail.mail</gco:CharacterString>\n                    </gmd:electronicMailAddress>\n                </gmd:CI_Address>\n            </gmd:address>\n            <gmd:onlineResource>\n                <gmd:CI_OnlineResource>\n                    <gmd:linkage>\n                        <gmd:URL>mail@mail.mail</gmd:URL>\n                    </gmd:linkage>\n                    <gmd:protocol>\n                        <gco:CharacterString>WWW:LINK-1.0-http--link</gco:CharacterString>\n                    </gmd:protocol>\n                </gmd:CI_OnlineResource>\n            </gmd:onlineResource>\n            <gmd:contactInstructions>\n                <gmx:FileName src=\"http://public.sig.rennesmetropole.fr/ressources/catalogue/apercus/republique_francaise.png\">Logo</gmx:FileName>\n            </gmd:contactInstructions>\n        </gmd:CI_Contact>\n    </gmd:contactInfo>\n    <gmd:role>\n        <gmd:CI_RoleCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_RoleCode\" codeListValue=\"custodian\" />\n    </gmd:role>\n</gmd:CI_ResponsibleParty>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/organizations/?objectStandard=gmd&format=xml",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"organizations",
								""
							],
							"query": [
								{
									"key": "objectStandard",
									"value": "gmd"
								},
								{
									"key": "format",
									"value": "xml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add org 2 without ID GMD-XML",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('softOrgGmdXml2Name', rand.get('{{$randomCompanyName}}'))",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Org 1 GMD-XML created without ID\", () => {",
									"    try {",
									"        pm.expect(pm.response.code).to.eql(200);",
									"    } catch (err) {",
									"        // console.log(pm.response)",
									"        throw err",
									"    }",
									"    const responseJson = pm.response.json();",
									"    const orgName = pm.variables.get('softOrgGmdXml2Name')",
									"    pm.expect(responseJson.organization_name).to.eq(orgName)",
									"    pm.collectionVariables.set('softOrgGmdXml2Id', responseJson.organization_id)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<gmd:CI_ResponsibleParty collectionTag=\"{{stamp}}\">\n    <gmd:organisationName>\n        <gco:CharacterString>{{softOrgGmdXml2Name}}</gco:CharacterString>\n    </gmd:organisationName>\n    <gmd:contactInfo>\n        <gmd:CI_Contact>\n            <gmd:phone>\n                <gmd:CI_Telephone>\n                    <gmd:voice>\n                        <gco:CharacterString>00 00 00 00 00</gco:CharacterString>\n                    </gmd:voice>\n                </gmd:CI_Telephone>\n            </gmd:phone>\n            <gmd:address>\n                <gmd:CI_Address>\n                    <gmd:deliveryPoint>\n                        <gco:CharacterString>Ancienne adresse</gco:CharacterString>\n                    </gmd:deliveryPoint>\n                    <gmd:deliveryPoint>\n                        <gco:CharacterString>CS 23167</gco:CharacterString>\n                    </gmd:deliveryPoint>\n                    <gmd:city>\n                        <gco:CharacterString>RENNES CEDEX</gco:CharacterString>\n                    </gmd:city>\n                    <gmd:postalCode>\n                        <gco:CharacterString>35031</gco:CharacterString>\n                    </gmd:postalCode>\n                    <gmd:country>\n                        <gco:CharacterString>France</gco:CharacterString>\n                    </gmd:country>\n                    <gmd:electronicMailAddress>\n                        <gco:CharacterString>mail@mail.mail</gco:CharacterString>\n                    </gmd:electronicMailAddress>\n                    <gmd:electronicMailAddress>\n                        <gco:CharacterString>mail2@mail.mail</gco:CharacterString>\n                    </gmd:electronicMailAddress>\n                </gmd:CI_Address>\n            </gmd:address>\n            <gmd:onlineResource>\n                <gmd:CI_OnlineResource>\n                    <gmd:linkage>\n                        <gmd:URL>mail@mail.mail</gmd:URL>\n                    </gmd:linkage>\n                    <gmd:protocol>\n                        <gco:CharacterString>WWW:LINK-1.0-http--link</gco:CharacterString>\n                    </gmd:protocol>\n                </gmd:CI_OnlineResource>\n            </gmd:onlineResource>\n            <gmd:contactInstructions>\n                <gmx:FileName src=\"http://public.sig.rennesmetropole.fr/ressources/catalogue/apercus/republique_francaise.png\">Logo</gmx:FileName>\n            </gmd:contactInstructions>\n        </gmd:CI_Contact>\n    </gmd:contactInfo>\n    <gmd:role>\n        <gmd:CI_RoleCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_RoleCode\" codeListValue=\"custodian\" />\n    </gmd:role>\n</gmd:CI_ResponsibleParty>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/organizations/?objectStandard=gmd&format=xml",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"organizations",
								""
							],
							"query": [
								{
									"key": "objectStandard",
									"value": "gmd"
								},
								{
									"key": "format",
									"value": "xml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add contact GMD-XML 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const contactName = rand.get('{{$randomFullName}}');",
									"",
									"pm.collectionVariables.set('softContactGmdXml1Id', rand.get('{{$randomUUID}}'))",
									"pm.collectionVariables.set('softContactGmdXml1Name', contactName)",
									"pm.collectionVariables.set('softContactGmdXml1Email', rand.getContactEmail(contactName))",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Contact 1 GMD-XML created\", () => {",
									"    try {",
									"        pm.expect(pm.response.code).to.eql(200);",
									"    } catch (err) {",
									"        // console.log(pm.response)",
									"        throw err",
									"    }",
									"    const responseJson = pm.response.json();",
									"    const contactId = pm.variables.get('softContactGmdXml1Id');",
									"    const contactName = pm.variables.get('softContactGmdXml1Name');",
									"    const contactEmail = pm.variables.get('softContactGmdXml1Email');",
									"    const orgName = pm.variables.get('softOrgGmdXml1NewName')",
									"    pm.expect(responseJson.contact_id).to.eq(contactId);",
									"    pm.expect(responseJson.email).to.eq(contactEmail);",
									"    pm.expect(responseJson.contact_name).to.eq(contactName);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<gmd:CI_ResponsibleParty collectionTag=\"{{stamp}}\">\n    <gmd:identifier>\n        <gmd:MD_Identifier>\n            <gmd:code>\n                <gco:CharacterString>{{softContactGmdXml1Id}}</gco:CharacterString>\n            </gmd:code>\n        </gmd:MD_Identifier>\n    </gmd:identifier>\n    <gmd:individualName>\n        <gco:CharacterString>{{softContactGmdXml1Name}}</gco:CharacterString>\n    </gmd:individualName>\n    <gmd:organisationName>\n        <gco:CharacterString>{{softOrgGmdXml1NewName}}</gco:CharacterString>\n    </gmd:organisationName>\n    <gmd:contactInfo>\n        <gmd:CI_Contact>\n            <gmd:phone>\n                <gmd:CI_Telephone>\n                    <gmd:voice>\n                        <gco:CharacterString>00 00 00 00 00</gco:CharacterString>\n                    </gmd:voice>\n                </gmd:CI_Telephone>\n            </gmd:phone>\n            <gmd:address>\n                <gmd:CI_Address>\n                    <gmd:electronicMailAddress>\n                        <gco:CharacterString>{{softContactGmdXml1Email}}</gco:CharacterString>\n                    </gmd:electronicMailAddress>\n                </gmd:CI_Address>\n            </gmd:address>\n            <gmd:hoursOfService>\n                <gco:CharacterString>08h00 - 13h00 et 13h00 - 12h00</gco:CharacterString>\n            </gmd:hoursOfService>\n        </gmd:CI_Contact>\n    </gmd:contactInfo>\n    <gmd:role>\n        <gmd:CI_RoleCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_RoleCode\" codeListValue=\"pointOfContact\" />\n    </gmd:role>\n</gmd:CI_ResponsibleParty>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/contacts/?objectStandard=gmd&format=xml",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"contacts",
								""
							],
							"query": [
								{
									"key": "objectStandard",
									"value": "gmd"
								},
								{
									"key": "format",
									"value": "xml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit contact GMD-XML 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const newContactName = rand.get('{{$randomFullName}}')",
									"pm.collectionVariables.set('softContactGmdXml1NewName', newContactName)",
									"pm.collectionVariables.set('softContactGmdXml1NewEmail', rand.getContactEmail(newContactName))"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Org 1 GMD-XML edited\", () => {",
									"    try {",
									"        pm.expect(pm.response.code).to.eql(200);",
									"    } catch (err) {",
									"        // console.log(pm.response)",
									"        throw err",
									"    }",
									"    const responseJson = pm.response.json();",
									"    const contactId = pm.variables.get('softContactGmdXml1Id');",
									"    const contactName = pm.variables.get('softContactGmdXml1NewName');",
									"    const contactEmail = pm.variables.get('softContactGmdXml1NewEmail');",
									"    pm.expect(responseJson.contact_id).to.eq(contactId);",
									"    pm.expect(responseJson.contact_name).to.eq(contactName);",
									"    pm.expect(responseJson.email).to.eq(contactEmail);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<gmd:CI_ResponsibleParty collectionTag=\"{{stamp}}\">\n    <gmd:identifier>\n        <gmd:MD_Identifier>\n            <gmd:code>\n                <gco:CharacterString>{{softContactGmdXml1Id}}</gco:CharacterString>\n            </gmd:code>\n        </gmd:MD_Identifier>\n    </gmd:identifier>\n    <gmd:individualName>\n        <gco:CharacterString>{{softContactGmdXml1NewName}}</gco:CharacterString>\n    </gmd:individualName>\n    <gmd:organisationName>\n        <gco:CharacterString>{{softOrgGmdXml1NewName}}</gco:CharacterString>\n    </gmd:organisationName>\n    <gmd:contactInfo>\n        <gmd:CI_Contact>\n            <gmd:phone>\n                <gmd:CI_Telephone>\n                    <gmd:voice>\n                        <gco:CharacterString>00 00 00 00 00</gco:CharacterString>\n                    </gmd:voice>\n                </gmd:CI_Telephone>\n            </gmd:phone>\n            <gmd:address>\n                <gmd:CI_Address>\n                    <gmd:electronicMailAddress>\n                        <gco:CharacterString>{{softContactGmdXml1NewEmail}}</gco:CharacterString>\n                    </gmd:electronicMailAddress>\n                </gmd:CI_Address>\n            </gmd:address>\n            <gmd:hoursOfService>\n                <gco:CharacterString>08h00 - 13h00 et 13h00 - 12h00</gco:CharacterString>\n            </gmd:hoursOfService>\n        </gmd:CI_Contact>\n    </gmd:contactInfo>\n    <gmd:role>\n        <gmd:CI_RoleCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_RoleCode\" codeListValue=\"pointOfContact\" />\n    </gmd:role>\n</gmd:CI_ResponsibleParty>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/contacts/?objectStandard=gmd&format=xml",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"contacts",
								""
							],
							"query": [
								{
									"key": "objectStandard",
									"value": "gmd"
								},
								{
									"key": "format",
									"value": "xml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add meta GMD-XML 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('softMetaGmdXml1LocalId', rand.get('{{$randomUUID}}'))",
									"pm.collectionVariables.set('softOrgGmdXml1Name', rand.get('{{$randomCompanyName}}'))",
									"pm.collectionVariables.set('softMediaGmdXml1Id', rand.get('{{$randomUUID}}'))",
									"pm.collectionVariables.set('softMediaGmdXml2Id', rand.get('{{$randomUUID}}'))",
									"pm.collectionVariables.set('softMediaGmdXml3Id', rand.get('{{$randomUUID}}'))",
									"",
									"log.d('Add meta GMD-XML 1', 'Themes',)",
									"log.d('Add meta GMD-XML 1', 'Themes', rand.pick('themes'))",
									"pm.collectionVariables.set('randomTheme', rand.pick('themes'));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Metadata 1 GMD-XML created\", () => {",
									"    try {",
									"        pm.expect(pm.response.code).to.eql(200);",
									"    } catch (err) {",
									"        // console.log(pm.response)",
									"        throw err",
									"    }",
									"    const responseJson = pm.response.json();",
									"    const metaId = pm.variables.get('softMetaGmdXml1LocalId');",
									"    const orgId = pm.variables.get('softOrgGmdXml1Id');",
									"    pm.expect(responseJson.local_id).to.eq(metaId);",
									"    pm.expect(responseJson.producer.organization_id).to.eq(orgId);",
									"    pm.collectionVariables.set('softMetaGmdXml1Id', responseJson.global_id);",
									"    const media1Id = pm.variables.get('softMediaGmdXml1Id');",
									"    const media2Id = pm.variables.get('softMediaGmdXml2Id');",
									"    const media3Id = pm.variables.get('softMediaGmdXml3Id');",
									"",
									"    const addedMediaIDs = [media1Id, media2Id, media3Id];",
									"    const mediaList = responseJson.available_formats;",
									"    let mediaServiceLinkOldMeta;",
									"    mediaList.forEach((media)=>{",
									"        const mediaId = media.media_id",
									"        if (!addedMediaIDs.includes(mediaId)) {",
									"            mediaServiceLinkOldMeta = mediaId",
									"        }",
									"    });",
									"    pm.collectionVariables.set('softMediaGmdXml4Id', mediaServiceLinkOldMeta);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<gmd:MD_Metadata xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:srv=\"http://www.isotc211.org/2005/srv\" xmlns:gmx=\"http://www.isotc211.org/2005/gmx\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmi=\"http://www.isotc211.org/2005/gmi\" xmlns:gml=\"http://www.opengis.net/gml\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xsi:schemaLocation=\"http://www.isotc211.org/2005/gmd http://www.isotc211.org/2005/gmd/gmd.xsd http://www.isotc211.org/2005/gmx http://www.isotc211.org/2005/gmx/gmx.xsd http://www.isotc211.org/2005/srv http://schemas.opengis.net/iso/19139/20060504/srv/srv.xsd\" collectionTag=\"{{stamp}}\">\n    <gmd:fileIdentifier>\n        <gco:CharacterString>{{softMetaGmdXml1LocalId}}</gco:CharacterString>\n    </gmd:fileIdentifier>\n    <gmd:language xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:LanguageCode codeList=\"http://www.loc.gov/standards/iso639-2/\" codeListValue=\"fre\" />\n    </gmd:language>\n    <gmd:characterSet xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:MD_CharacterSetCode codeListValue=\"utf8\" codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_CharacterSetCode\" />\n    </gmd:characterSet>\n    <gmd:parentIdentifier xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gco:CharacterString>unknown</gco:CharacterString>\n    </gmd:parentIdentifier>\n    <gmd:hierarchyLevel xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:MD_ScopeCode codeListValue=\"dataset\" codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_ScopeCode\" />\n    </gmd:hierarchyLevel>\n    <gmd:hierarchyLevelName xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gco:CharacterString>Série de données</gco:CharacterString>\n    </gmd:hierarchyLevelName>\n    <gmd:contact xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:CI_ResponsibleParty>\n            <gmd:identifier>\n                <gmd:MD_Identifier>\n                    <gmd:code>\n                        <gco:CharacterString>{{softContactGmdXml1Id}}</gco:CharacterString>\n                    </gmd:code>\n                </gmd:MD_Identifier>\n            </gmd:identifier>\n            <gmd:individualName>\n                <gco:CharacterString>{{softContactGmdXml1NewName}}</gco:CharacterString>\n            </gmd:individualName>\n            <gmd:organisationName>\n                <gco:CharacterString>{{softOrgGmdXml1NewName}}</gco:CharacterString>\n            </gmd:organisationName>\n            <gmd:contactInfo>\n                <gmd:CI_Contact>\n                    <gmd:phone>\n                        <gmd:CI_Telephone>\n                            <gmd:voice>\n                                <gco:CharacterString>00 00 00 00 00</gco:CharacterString>\n                            </gmd:voice>\n                        </gmd:CI_Telephone>\n                    </gmd:phone>\n                    <gmd:address>\n                        <gmd:CI_Address>\n                            <gmd:electronicMailAddress>\n                                <gco:CharacterString>{{softContactGmdXml1NewEmail}}</gco:CharacterString>\n                            </gmd:electronicMailAddress>\n                        </gmd:CI_Address>\n                    </gmd:address>\n                    <gmd:hoursOfService>\n                        <gco:CharacterString>08h00 - 13h00 et 13h00 - 12h00</gco:CharacterString>\n                    </gmd:hoursOfService>\n                </gmd:CI_Contact>\n            </gmd:contactInfo>\n            <gmd:role>\n                <gmd:CI_RoleCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_RoleCode\" codeListValue=\"pointOfContact\" />\n            </gmd:role>\n        </gmd:CI_ResponsibleParty>\n    </gmd:contact>\n    <gmd:dateStamp xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gco:DateTime>2023-10-20T06:15:07</gco:DateTime>\n    </gmd:dateStamp>\n    <gmd:metadataStandardName xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gco:CharacterString>ISO 19115:2003/19139</gco:CharacterString>\n    </gmd:metadataStandardName>\n    <gmd:metadataStandardVersion xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gco:CharacterString>1.0</gco:CharacterString>\n    </gmd:metadataStandardVersion>\n    <gmd:spatialRepresentationInfo xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\" />\n    <gmd:spatialRepresentationInfo xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:MD_VectorSpatialRepresentation>\n            <gmd:topologyLevel>\n                <gmd:MD_TopologyLevelCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_TopologyLevelCode\" codeListValue=\"abstract\" />\n            </gmd:topologyLevel>\n            <gmd:geometricObjects>\n                <gmd:MD_GeometricObjects>\n                    <gmd:geometricObjectType>\n                        <gmd:MD_GeometricObjectTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_GeometricObjectTypeCode\" codeListValue=\"surface\" />\n                    </gmd:geometricObjectType>\n                </gmd:MD_GeometricObjects>\n            </gmd:geometricObjects>\n        </gmd:MD_VectorSpatialRepresentation>\n    </gmd:spatialRepresentationInfo>\n    <gmd:referenceSystemInfo xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:MD_ReferenceSystem>\n            <gmd:referenceSystemIdentifier>\n                <gmd:RS_Identifier>\n                    <gmd:code>\n                        <gco:CharacterString>RGF93 / CC48 (EPSG:3948)</gco:CharacterString>\n                    </gmd:code>\n                </gmd:RS_Identifier>\n            </gmd:referenceSystemIdentifier>\n        </gmd:MD_ReferenceSystem>\n    </gmd:referenceSystemInfo>\n    <gmd:identificationInfo xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:MD_DataIdentification>\n            <gmd:citation>\n                <gmd:CI_Citation>\n                    <gmd:title>\n                        <gco:CharacterString>Classement sonore des infrastructures routières sur Rennes Métropole : secteurs affectés</gco:CharacterString>\n                    </gmd:title>\n                    <gmd:alternateTitle>\n                        <gco:CharacterString>risque_secu.ddtm_csv_secteurs_affectes</gco:CharacterString>\n                    </gmd:alternateTitle>\n                    <gmd:date>\n                        <gmd:CI_Date>\n                            <gmd:date>\n                                <gco:Date>2023-10-17</gco:Date>\n                            </gmd:date>\n                            <gmd:dateType>\n                                <gmd:CI_DateTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode\" codeListValue=\"creation\" />\n                            </gmd:dateType>\n                        </gmd:CI_Date>\n                    </gmd:date>\n                    <gmd:date>\n                        <gmd:CI_Date>\n                            <gmd:date>\n                                <gco:Date>2023-10-17</gco:Date>\n                            </gmd:date>\n                            <gmd:dateType>\n                                <gmd:CI_DateTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode\" codeListValue=\"revision\" />\n                            </gmd:dateType>\n                        </gmd:CI_Date>\n                    </gmd:date>\n                    <gmd:identifier>\n                        <gmd:MD_Identifier>\n                            <gmd:code>\n                                <gco:CharacterString>https://input_server_url/geonetwork/srv/fre/xml.metadata.get?uuid={{softMetaGmdXml1LocalId}}</gco:CharacterString>\n                            </gmd:code>\n                        </gmd:MD_Identifier>\n                    </gmd:identifier>\n                </gmd:CI_Citation>\n            </gmd:citation>\n            <gmd:abstract>\n                <gco:CharacterString>Résumé de la métadonnée.</gco:CharacterString>\n            </gmd:abstract>\n            <gmd:purpose>\n                <gco:CharacterString>Objectif</gco:CharacterString>\n            </gmd:purpose>\n            <gmd:status>\n                <gmd:MD_ProgressCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_ProgressCode\" codeListValue=\"completed\" />\n            </gmd:status>\n            <gmd:pointOfContact>\n                <gmd:CI_ResponsibleParty>\n                    <gmd:identifier>\n                        <gmd:MD_Identifier>\n                            <gmd:code>\n                                <gco:CharacterString>{{softContactGmdXml1Id}}</gco:CharacterString>\n                            </gmd:code>\n                        </gmd:MD_Identifier>\n                    </gmd:identifier>\n                    <gmd:individualName>\n                        <gco:CharacterString>{{softContactGmdXml1NewName}}</gco:CharacterString>\n                    </gmd:individualName>\n                    <gmd:organisationName>\n                        <gco:CharacterString>{{softOrgGmdXml1NewName}}</gco:CharacterString>\n                    </gmd:organisationName>\n                    <gmd:contactInfo>\n                        <gmd:CI_Contact>\n                            <gmd:phone>\n                                <gmd:CI_Telephone>\n                                    <gmd:voice>\n                                        <gco:CharacterString>00 00 00 00 00</gco:CharacterString>\n                                    </gmd:voice>\n                                </gmd:CI_Telephone>\n                            </gmd:phone>\n                            <gmd:address>\n                                <gmd:CI_Address>\n                                    <gmd:electronicMailAddress>\n                                        <gco:CharacterString>{{softContactGmdXml1NewEmail}}</gco:CharacterString>\n                                    </gmd:electronicMailAddress>\n                                </gmd:CI_Address>\n                            </gmd:address>\n                            <gmd:hoursOfService>\n                                <gco:CharacterString>08h00 - 13h00 et 13h00 - 12h00</gco:CharacterString>\n                            </gmd:hoursOfService>\n                        </gmd:CI_Contact>\n                    </gmd:contactInfo>\n                    <gmd:role>\n                        <gmd:CI_RoleCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_RoleCode\" codeListValue=\"pointOfContact\" />\n                    </gmd:role>\n                </gmd:CI_ResponsibleParty>\n            </gmd:pointOfContact>\n            <gmd:pointOfContact>\n                <gmd:CI_ResponsibleParty>\n                    <gmd:identifier>\n                        <gmd:MD_Identifier>\n                            <gmd:code>\n                                <gco:CharacterString>{{softOrgGmdXml1Id}}</gco:CharacterString>\n                            </gmd:code>\n                        </gmd:MD_Identifier>\n                    </gmd:identifier>\n                    <gmd:organisationName>\n                        <gco:CharacterString>{{softOrgGmdXml1NewName}}</gco:CharacterString>\n                    </gmd:organisationName>\n                    <gmd:contactInfo>\n                        <gmd:CI_Contact>\n                            <gmd:phone>\n                                <gmd:CI_Telephone>\n                                    <gmd:voice>\n                                        <gco:CharacterString>00 00 00 00 00</gco:CharacterString>\n                                    </gmd:voice>\n                                </gmd:CI_Telephone>\n                            </gmd:phone>\n                            <gmd:address>\n                                <gmd:CI_Address>\n                                    <gmd:deliveryPoint>\n                                        <gco:CharacterString>Nouvelle adresse</gco:CharacterString>\n                                    </gmd:deliveryPoint>\n                                    <gmd:deliveryPoint>\n                                        <gco:CharacterString>CS 23167</gco:CharacterString>\n                                    </gmd:deliveryPoint>\n                                    <gmd:city>\n                                        <gco:CharacterString>RENNES CEDEX</gco:CharacterString>\n                                    </gmd:city>\n                                    <gmd:postalCode>\n                                        <gco:CharacterString>35031</gco:CharacterString>\n                                    </gmd:postalCode>\n                                    <gmd:country>\n                                        <gco:CharacterString>France</gco:CharacterString>\n                                    </gmd:country>\n                                    <gmd:electronicMailAddress>\n                                        <gco:CharacterString>mail@mail.mail</gco:CharacterString>\n                                    </gmd:electronicMailAddress>\n                                    <gmd:electronicMailAddress>\n                                        <gco:CharacterString>mail2@mail.mail</gco:CharacterString>\n                                    </gmd:electronicMailAddress>\n                                </gmd:CI_Address>\n                            </gmd:address>\n                            <gmd:onlineResource>\n                                <gmd:CI_OnlineResource>\n                                    <gmd:linkage>\n                                        <gmd:URL>mail@mail.mail</gmd:URL>\n                                    </gmd:linkage>\n                                    <gmd:protocol>\n                                        <gco:CharacterString>WWW:LINK-1.0-http--link</gco:CharacterString>\n                                    </gmd:protocol>\n                                </gmd:CI_OnlineResource>\n                            </gmd:onlineResource>\n                            <gmd:contactInstructions>\n                                <gmx:FileName src=\"http://public.sig.rennesmetropole.fr/ressources/catalogue/apercus/republique_francaise.png\">Logo</gmx:FileName>\n                            </gmd:contactInstructions>\n                        </gmd:CI_Contact>\n                    </gmd:contactInfo>\n                    <gmd:role>\n                        <gmd:CI_RoleCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_RoleCode\" codeListValue=\"custodian\" />\n                    </gmd:role>\n                </gmd:CI_ResponsibleParty>\n            </gmd:pointOfContact>\n            <gmd:resourceMaintenance>\n                <gmd:MD_MaintenanceInformation>\n                    <gmd:maintenanceAndUpdateFrequency>\n                        <gmd:MD_MaintenanceFrequencyCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_MaintenanceFrequencyCode\" codeListValue=\"notPlanned\" />\n                    </gmd:maintenanceAndUpdateFrequency>\n                </gmd:MD_MaintenanceInformation>\n            </gmd:resourceMaintenance>\n            <gmd:graphicOverview>\n                <gmd:MD_BrowseGraphic>\n                    <gmd:fileName>\n                        <gco:CharacterString>https://public.sig.rennesmetropole.fr/ressources/catalogue/apercus/sec_sanit_ddtm_csv.png</gco:CharacterString>\n                    </gmd:fileName>\n                </gmd:MD_BrowseGraphic>\n            </gmd:graphicOverview>\n            <gmd:descriptiveKeywords>\n                <gmd:MD_Keywords>\n                    <gmd:keyword>\n                        <gco:CharacterString>{{randomTheme}}</gco:CharacterString>\n                    </gmd:keyword>\n                    <gmd:type>\n                        <gmd:MD_KeywordTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_KeywordTypeCode\" codeListValue=\"theme\" />\n                    </gmd:type>\n                    <gmd:thesaurusName>\n                        <gmd:CI_Citation>\n                            <gmd:title>\n                                <gco:CharacterString>GEMET - INSPIRE themes, version 1.1</gco:CharacterString>\n                            </gmd:title>\n                            <gmd:date>\n                                <gmd:CI_Date>\n                                    <gmd:date>\n                                        <gco:Date>2008-06-01</gco:Date>\n                                    </gmd:date>\n                                    <gmd:dateType>\n                                        <gmd:CI_DateTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode\" codeListValue=\"publication\" />\n                                    </gmd:dateType>\n                                </gmd:CI_Date>\n                            </gmd:date>\n                            <gmd:identifier>\n                                <gmd:MD_Identifier>\n                                    <gmd:code>\n                                        <gmx:Anchor xlink:href=\"http://geonetwork.mutu.local/geonetwork/srv/eng/thesaurus.download?ref=external.theme.inspire-theme\">geonetwork.thesaurus.external.theme.inspire-theme</gmx:Anchor>\n                                    </gmd:code>\n                                </gmd:MD_Identifier>\n                            </gmd:identifier>\n                        </gmd:CI_Citation>\n                    </gmd:thesaurusName>\n                </gmd:MD_Keywords>\n            </gmd:descriptiveKeywords>\n            <gmd:descriptiveKeywords>\n                <gmd:MD_Keywords>\n                    <gmd:keyword>\n                        <gco:CharacterString>bruit routier</gco:CharacterString>\n                    </gmd:keyword>\n                    <gmd:type>\n                        <gmd:MD_KeywordTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_KeywordTypeCode\" codeListValue=\"theme\" />\n                    </gmd:type>\n                    <gmd:thesaurusName>\n                        <gmd:CI_Citation>\n                            <gmd:title>\n                                <gco:CharacterString>GEMET</gco:CharacterString>\n                            </gmd:title>\n                            <gmd:date>\n                                <gmd:CI_Date>\n                                    <gmd:date>\n                                        <gco:Date>2018-10-26</gco:Date>\n                                    </gmd:date>\n                                    <gmd:dateType>\n                                        <gmd:CI_DateTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode\" codeListValue=\"publication\" />\n                                    </gmd:dateType>\n                                </gmd:CI_Date>\n                            </gmd:date>\n                            <gmd:identifier>\n                                <gmd:MD_Identifier>\n                                    <gmd:code>\n                                        <gmx:Anchor xlink:href=\"https://public.sig.rennesmetropole.fr/geonetwork/srv/eng/thesaurus.download?ref=external.theme.gemet\">geonetwork.thesaurus.external.theme.gemet</gmx:Anchor>\n                                    </gmd:code>\n                                </gmd:MD_Identifier>\n                            </gmd:identifier>\n                        </gmd:CI_Citation>\n                    </gmd:thesaurusName>\n                </gmd:MD_Keywords>\n            </gmd:descriptiveKeywords>\n            <gmd:descriptiveKeywords>\n                <gmd:MD_Keywords>\n                    <gmd:keyword>\n                        <gco:CharacterString>risques et sécurité : risques sanitaires</gco:CharacterString>\n                    </gmd:keyword>\n                    <gmd:type>\n                        <gmd:MD_KeywordTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_KeywordTypeCode\" codeListValue=\"theme\" />\n                    </gmd:type>\n                    <gmd:thesaurusName>\n                        <gmd:CI_Citation>\n                            <gmd:title>\n                                <gco:CharacterString>GéoBretagne v 2.0</gco:CharacterString>\n                            </gmd:title>\n                            <gmd:date>\n                                <gmd:CI_Date>\n                                    <gmd:date>\n                                        <gco:Date>2014-01-13</gco:Date>\n                                    </gmd:date>\n                                    <gmd:dateType>\n                                        <gmd:CI_DateTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode\" codeListValue=\"publication\" />\n                                    </gmd:dateType>\n                                </gmd:CI_Date>\n                            </gmd:date>\n                            <gmd:identifier>\n                                <gmd:MD_Identifier>\n                                    <gmd:code>\n                                        <gmx:Anchor xlink:href=\"http://geonetwork.mutu.local/geonetwork/srv/eng/thesaurus.download?ref=external.theme.geobretagne\">geonetwork.thesaurus.external.theme.geobretagne</gmx:Anchor>\n                                    </gmd:code>\n                                </gmd:MD_Identifier>\n                            </gmd:identifier>\n                        </gmd:CI_Citation>\n                    </gmd:thesaurusName>\n                </gmd:MD_Keywords>\n            </gmd:descriptiveKeywords>\n            <gmd:descriptiveKeywords>\n                <gmd:MD_Keywords>\n                    <gmd:keyword>\n                        <gco:CharacterString>données ouvertes</gco:CharacterString>\n                    </gmd:keyword>\n                    <gmd:type>\n                        <gmd:MD_KeywordTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_KeywordTypeCode\" codeListValue=\"theme\" />\n                    </gmd:type>\n                    <gmd:thesaurusName>\n                        <gmd:CI_Citation>\n                            <gmd:title>\n                                <gco:CharacterString>RM Diffusion v 1.2</gco:CharacterString>\n                            </gmd:title>\n                            <gmd:date>\n                                <gmd:CI_Date>\n                                    <gmd:date>\n                                        <gco:Date>2014-02-12</gco:Date>\n                                    </gmd:date>\n                                    <gmd:dateType>\n                                        <gmd:CI_DateTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode\" codeListValue=\"publication\" />\n                                    </gmd:dateType>\n                                </gmd:CI_Date>\n                            </gmd:date>\n                            <gmd:identifier>\n                                <gmd:MD_Identifier>\n                                    <gmd:code>\n                                        <gmx:Anchor xlink:href=\"http://geonetwork.mutu.local/geonetwork/srv/eng/thesaurus.download?ref=external.theme.rm_diffusion\">geonetwork.thesaurus.external.theme.rm_diffusion</gmx:Anchor>\n                                    </gmd:code>\n                                </gmd:MD_Identifier>\n                            </gmd:identifier>\n                        </gmd:CI_Citation>\n                    </gmd:thesaurusName>\n                </gmd:MD_Keywords>\n            </gmd:descriptiveKeywords>\n            <gmd:resourceConstraints>\n                <gmd:MD_LegalConstraints>\n                    <gmd:useLimitation>\n                        <gco:CharacterString>Réutilisation libre sous réserve de la mention obligatoire suivante : \"source : DDTM 35\"</gco:CharacterString>\n                    </gmd:useLimitation>\n                    <gmd:useLimitation>\n                        <gco:CharacterString>Licence Ouverte Etalab v2.0</gco:CharacterString>\n                    </gmd:useLimitation>\n                    <gmd:accessConstraints>\n                        <gmd:MD_RestrictionCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_RestrictionCode\" codeListValue=\"otherRestrictions\" />\n                    </gmd:accessConstraints>\n                    <gmd:useConstraints>\n                        <gmd:MD_RestrictionCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_RestrictionCode\" codeListValue=\"license\" />\n                    </gmd:useConstraints>\n                    <gmd:otherConstraints>\n                        <gco:CharacterString>Pas de restriction d’accès public</gco:CharacterString>\n                    </gmd:otherConstraints>\n                </gmd:MD_LegalConstraints>\n            </gmd:resourceConstraints>\n            <gmd:spatialResolution>\n                <gmd:MD_Resolution>\n                    <gmd:distance>\n                        <gco:Distance uom=\"m\">10</gco:Distance>\n                    </gmd:distance>\n                </gmd:MD_Resolution>\n            </gmd:spatialResolution>\n            <gmd:language>\n                <gmd:LanguageCode codeList=\"http://www.loc.gov/standards/iso639-2/\" codeListValue=\"fre\" />\n            </gmd:language>\n            <gmd:characterSet>\n                <gmd:MD_CharacterSetCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_CharacterSetCode\" codeListValue=\"utf8\" />\n            </gmd:characterSet>\n            <gmd:topicCategory>\n                <gmd:MD_TopicCategoryCode>health</gmd:MD_TopicCategoryCode>\n            </gmd:topicCategory>\n            <gmd:extent>\n                <gmd:EX_Extent>\n                    <gmd:geographicElement>\n                        <gmd:EX_GeographicBoundingBox>\n                            <gmd:westBoundLongitude>\n                                <gco:Decimal>-1.96327</gco:Decimal>\n                            </gmd:westBoundLongitude>\n                            <gmd:eastBoundLongitude>\n                                <gco:Decimal>-1.46558</gco:Decimal>\n                            </gmd:eastBoundLongitude>\n                            <gmd:southBoundLatitude>\n                                <gco:Decimal>47.93192</gco:Decimal>\n                            </gmd:southBoundLatitude>\n                            <gmd:northBoundLatitude>\n                                <gco:Decimal>48.30684</gco:Decimal>\n                            </gmd:northBoundLatitude>\n                        </gmd:EX_GeographicBoundingBox>\n                    </gmd:geographicElement>\n                </gmd:EX_Extent>\n            </gmd:extent>\n        </gmd:MD_DataIdentification>\n    </gmd:identificationInfo>\n    <gmd:distributionInfo xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:MD_Distribution>\n            <gmd:distributionFormat>\n                <gmd:MD_Format>\n                    <gmd:name>\n                        <gco:CharacterString>GML</gco:CharacterString>\n                    </gmd:name>\n                    <gmd:version>\n                        <gco:CharacterString>3.2.1</gco:CharacterString>\n                    </gmd:version>\n                </gmd:MD_Format>\n            </gmd:distributionFormat>\n            <gmd:transferOptions>\n                <gmd:MD_DigitalTransferOptions>\n                    <gmd:onLine>\n                        <gmd:CI_OnlineResource collectionTag=\"{{stamp}}\">\n                            <gmd:identifier>\n                                <gmd:MD_Identifier>\n                                    <gmd:code>\n                                        <gco:CharacterString>{{softMediaGmdXml1Id}}</gco:CharacterString>\n                                    </gmd:code>\n                                </gmd:MD_Identifier>\n                            </gmd:identifier>\n                            <gmd:linkage>\n                                <gmd:URL>https://public.sig.rennesmetropole.fr/geoserver/ows?service=wms&amp;request=GetCapabilities</gmd:URL>\n                            </gmd:linkage>\n                            <gmd:protocol>\n                                <gco:CharacterString>OGC:WMS</gco:CharacterString>\n                            </gmd:protocol>\n                            <gmd:name>\n                                <gco:CharacterString>sec_sanit:ddtm_csv_secteurs_affectes</gco:CharacterString>\n                            </gmd:name>\n                            <gmd:description>\n                                <gco:CharacterString>Classement sonore des infrastructures routières sur Rennes Métropole : secteurs affectés</gco:CharacterString>\n                            </gmd:description>\n                        </gmd:CI_OnlineResource>\n                    </gmd:onLine>\n                    <gmd:onLine>\n                        <gmd:CI_OnlineResource collectionTag=\"{{stamp}}\">\n                            <gmd:linkage>\n                                <gmd:URL>https://public.sig.rennesmetropole.fr/geoserver/ows?service=wfs&amp;request=GetCapabilities</gmd:URL>\n                            </gmd:linkage>\n                            <gmd:protocol>\n                                <gco:CharacterString>OGC:WFS</gco:CharacterString>\n                            </gmd:protocol>\n                            <gmd:name>\n                                <gco:CharacterString>sec_sanit:ddtm_csv_secteurs_affectes</gco:CharacterString>\n                            </gmd:name>\n                            <gmd:description>\n                                <gco:CharacterString>Classement sonore des infrastructures routières sur Rennes Métropole : secteurs affectés</gco:CharacterString>\n                            </gmd:description>\n                        </gmd:CI_OnlineResource>\n                    </gmd:onLine>\n                </gmd:MD_DigitalTransferOptions>\n            </gmd:transferOptions>\n            <gmd:transferOptions>\n                <gmd:MD_DigitalTransferOptions>\n                    <gmd:onLine>\n                        <gmd:CI_OnlineResource collectionTag=\"{{stamp}}\">\n                            <gmd:identifier>\n                                <gmd:MD_Identifier>\n                                    <gmd:code>\n                                        <gco:CharacterString>{{softMediaGmdXml2Id}}</gco:CharacterString>\n                                    </gmd:code>\n                                </gmd:MD_Identifier>\n                            </gmd:identifier>\n                            <gmd:linkage>\n                                <gmd:URL>https://data.rennesmetropole.fr/explore/dataset/classement-sonore-voies-secteurs-affectes</gmd:URL>\n                            </gmd:linkage>\n                            <gmd:protocol>\n                                <gco:CharacterString>WWW:LINK-1.0-http--link</gco:CharacterString>\n                            </gmd:protocol>\n                            <gmd:description>\n                                <gco:CharacterString>Site open data de Rennes Métropole</gco:CharacterString>\n                            </gmd:description>\n                        </gmd:CI_OnlineResource>\n                    </gmd:onLine>\n                </gmd:MD_DigitalTransferOptions>\n            </gmd:transferOptions>\n            <gmd:transferOptions>\n                <gmd:MD_DigitalTransferOptions>\n                    <gmd:onLine>\n                        <gmd:CI_OnlineResource collectionTag=\"{{stamp}}\">\n                            <gmd:identifier>\n                                <gmd:MD_Identifier>\n                                    <gmd:code>\n                                        <gco:CharacterString>{{softMediaGmdXml3Id}}</gco:CharacterString>\n                                    </gmd:code>\n                                </gmd:MD_Identifier>\n                            </gmd:identifier>\n                            <gmd:linkage>\n                                <gmd:URL>https://public.sig.rennesmetropole.fr/geoserver/ows?service=wfs&amp;version=2.0.0&amp;request=getfeature&amp;typename=sec_sanit:ddtm_csv_secteurs_affectes&amp;srsname=EPSG:3948&amp;outputformat=GML3&amp;format_options=charset:utf-8</gmd:URL>\n                            </gmd:linkage>\n                            <gmd:protocol>\n                                <gco:CharacterString>OGC:GML</gco:CharacterString>\n                            </gmd:protocol>\n                            <gmd:description>\n                                <gco:CharacterString>Lien de téléchargement direct (GML3 EPSG:3948)</gco:CharacterString>\n                            </gmd:description>\n                        </gmd:CI_OnlineResource>\n                    </gmd:onLine>\n                </gmd:MD_DigitalTransferOptions>\n            </gmd:transferOptions>\n        </gmd:MD_Distribution>\n    </gmd:distributionInfo>\n    <gmd:dataQualityInfo xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:DQ_DataQuality>\n            <gmd:scope>\n                <gmd:DQ_Scope>\n                    <gmd:level>\n                        <gmd:MD_ScopeCode codeListValue=\"dataset\" codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_ScopeCode\" />\n                    </gmd:level>\n                </gmd:DQ_Scope>\n            </gmd:scope>\n            <gmd:report>\n                <gmd:DQ_DomainConsistency>\n                    <gmd:result>\n                        <gmd:DQ_ConformanceResult>\n                            <gmd:specification>\n                                <gmd:CI_Citation>\n                                    <gmd:title>\n                                        <gco:CharacterString>D2.8.III.5 INSPIRE Data Specification on Human Health and Safety – Technical Guidelines - v 3.0</gco:CharacterString>\n                                    </gmd:title>\n                                    <gmd:date>\n                                        <gmd:CI_Date>\n                                            <gmd:date>\n                                                <gco:Date>2013-12-10</gco:Date>\n                                            </gmd:date>\n                                            <gmd:dateType>\n                                                <gmd:CI_DateTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode\" codeListValue=\"publication\" />\n                                            </gmd:dateType>\n                                        </gmd:CI_Date>\n                                    </gmd:date>\n                                </gmd:CI_Citation>\n                            </gmd:specification>\n                            <gmd:explanation>\n                                <gco:CharacterString>non testé</gco:CharacterString>\n                            </gmd:explanation>\n                            <gmd:pass>\n                                <gco:Boolean>false</gco:Boolean>\n                            </gmd:pass>\n                        </gmd:DQ_ConformanceResult>\n                    </gmd:result>\n                </gmd:DQ_DomainConsistency>\n            </gmd:report>\n            <gmd:lineage>\n                <gmd:LI_Lineage>\n                    <gmd:statement>\n                        <gco:CharacterString>Données fournies par la DDTM35. Pas de métadonnée.\nsecteurs affectéss probablement basés sur la BD Topo de l'IGN.</gco:CharacterString>\n                    </gmd:statement>\n                </gmd:LI_Lineage>\n            </gmd:lineage>\n        </gmd:DQ_DataQuality>\n    </gmd:dataQualityInfo>\n</gmd:MD_Metadata>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/resources/?objectStandard=gmd&format=xml",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources",
								""
							],
							"query": [
								{
									"key": "objectStandard",
									"value": "gmd"
								},
								{
									"key": "format",
									"value": "xml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add meta GMD-XML 2 fails 'local_id'",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('softMeta3LocalId', rand.get('{{$randomUUID}}'))"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Metadata 2 GMD-XML creation: missing property 'local_id'\", () => {",
									"    pm.expect(pm.response.code).to.gte(400);",
									"    const responseJson = pm.response.json();",
									"    ////console.log(responseJson.message);",
									"    const msg = \"Problem in translation of object 'resources'. Problem in translation of field 'global_id'. Element not reachable at path [gmd:MD_Metadata,gmd:fileIdentifier,gco:CharacterString], in depth 1\"",
									"    pm.expect(responseJson.message.substring(0, msg.length)).to.eql(msg);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<gmd:MD_Metadata xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:srv=\"http://www.isotc211.org/2005/srv\" xmlns:gmx=\"http://www.isotc211.org/2005/gmx\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmi=\"http://www.isotc211.org/2005/gmi\" xmlns:gml=\"http://www.opengis.net/gml\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xsi:schemaLocation=\"http://www.isotc211.org/2005/gmd http://www.isotc211.org/2005/gmd/gmd.xsd http://www.isotc211.org/2005/gmx http://www.isotc211.org/2005/gmx/gmx.xsd http://www.isotc211.org/2005/srv http://schemas.opengis.net/iso/19139/20060504/srv/srv.xsd\">\n    <gmd:language xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:LanguageCode codeList=\"http://www.loc.gov/standards/iso639-2/\" codeListValue=\"fre\" />\n    </gmd:language>\n    <gmd:characterSet xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:MD_CharacterSetCode codeListValue=\"utf8\" codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_CharacterSetCode\" />\n    </gmd:characterSet>\n    <gmd:parentIdentifier xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gco:CharacterString>unknown</gco:CharacterString>\n    </gmd:parentIdentifier>\n    <gmd:hierarchyLevel xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:MD_ScopeCode codeListValue=\"dataset\" codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_ScopeCode\" />\n    </gmd:hierarchyLevel>\n    <gmd:hierarchyLevelName xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gco:CharacterString>Série de données</gco:CharacterString>\n    </gmd:hierarchyLevelName>\n    <gmd:contact xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:CI_ResponsibleParty>\n            <gmd:identifier>\n                <gmd:MD_Identifier>\n                    <gmd:code>\n                        <gco:CharacterString>{{softContactGmdXml1Id}}</gco:CharacterString>\n                    </gmd:code>\n                </gmd:MD_Identifier>\n            </gmd:identifier>\n            <gmd:individualName>\n                <gco:CharacterString>{{softContactGmdXml1NewName}}</gco:CharacterString>\n            </gmd:individualName>\n            <gmd:organisationName>\n                <gco:CharacterString>{{softOrgGmdXml1NewName}}</gco:CharacterString>\n            </gmd:organisationName>\n            <gmd:contactInfo>\n                <gmd:CI_Contact>\n                    <gmd:phone>\n                        <gmd:CI_Telephone>\n                            <gmd:voice>\n                                <gco:CharacterString>00 00 00 00 00</gco:CharacterString>\n                            </gmd:voice>\n                        </gmd:CI_Telephone>\n                    </gmd:phone>\n                    <gmd:address>\n                        <gmd:CI_Address>\n                            <gmd:electronicMailAddress>\n                                <gco:CharacterString>{{softContactGmdXml1NewEmail}}</gco:CharacterString>\n                            </gmd:electronicMailAddress>\n                        </gmd:CI_Address>\n                    </gmd:address>\n                    <gmd:hoursOfService>\n                        <gco:CharacterString>08h00 - 13h00 et 13h00 - 12h00</gco:CharacterString>\n                    </gmd:hoursOfService>\n                </gmd:CI_Contact>\n            </gmd:contactInfo>\n            <gmd:role>\n                <gmd:CI_RoleCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_RoleCode\" codeListValue=\"pointOfContact\" />\n            </gmd:role>\n        </gmd:CI_ResponsibleParty>\n    </gmd:contact>\n    <gmd:dateStamp xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gco:DateTime>2023-10-20T06:15:07</gco:DateTime>\n    </gmd:dateStamp>\n    <gmd:metadataStandardName xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gco:CharacterString>ISO 19115:2003/19139</gco:CharacterString>\n    </gmd:metadataStandardName>\n    <gmd:metadataStandardVersion xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gco:CharacterString>1.0</gco:CharacterString>\n    </gmd:metadataStandardVersion>\n    <gmd:spatialRepresentationInfo xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\" />\n    <gmd:spatialRepresentationInfo xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:MD_VectorSpatialRepresentation>\n            <gmd:topologyLevel>\n                <gmd:MD_TopologyLevelCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_TopologyLevelCode\" codeListValue=\"abstract\" />\n            </gmd:topologyLevel>\n            <gmd:geometricObjects>\n                <gmd:MD_GeometricObjects>\n                    <gmd:geometricObjectType>\n                        <gmd:MD_GeometricObjectTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_GeometricObjectTypeCode\" codeListValue=\"surface\" />\n                    </gmd:geometricObjectType>\n                </gmd:MD_GeometricObjects>\n            </gmd:geometricObjects>\n        </gmd:MD_VectorSpatialRepresentation>\n    </gmd:spatialRepresentationInfo>\n    <gmd:referenceSystemInfo xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:MD_ReferenceSystem>\n            <gmd:referenceSystemIdentifier>\n                <gmd:RS_Identifier>\n                    <gmd:code>\n                        <gco:CharacterString>RGF93 / CC48 (EPSG:3948)</gco:CharacterString>\n                    </gmd:code>\n                </gmd:RS_Identifier>\n            </gmd:referenceSystemIdentifier>\n        </gmd:MD_ReferenceSystem>\n    </gmd:referenceSystemInfo>\n    <gmd:identificationInfo xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:MD_DataIdentification>\n            <gmd:citation>\n                <gmd:CI_Citation>\n                    <gmd:title>\n                        <gco:CharacterString>Classement sonore des infrastructures routières sur Rennes Métropole : secteurs affectés</gco:CharacterString>\n                    </gmd:title>\n                    <gmd:alternateTitle>\n                        <gco:CharacterString>risque_secu.ddtm_csv_secteurs_affectes</gco:CharacterString>\n                    </gmd:alternateTitle>\n                    <gmd:date>\n                        <gmd:CI_Date>\n                            <gmd:date>\n                                <gco:Date>2023-10-17</gco:Date>\n                            </gmd:date>\n                            <gmd:dateType>\n                                <gmd:CI_DateTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode\" codeListValue=\"creation\" />\n                            </gmd:dateType>\n                        </gmd:CI_Date>\n                    </gmd:date>\n                    <gmd:date>\n                        <gmd:CI_Date>\n                            <gmd:date>\n                                <gco:Date>2023-10-17</gco:Date>\n                            </gmd:date>\n                            <gmd:dateType>\n                                <gmd:CI_DateTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode\" codeListValue=\"revision\" />\n                            </gmd:dateType>\n                        </gmd:CI_Date>\n                    </gmd:date>\n                    <gmd:identifier>\n                        <gmd:MD_Identifier>\n                            <gmd:code>\n                                <gco:CharacterString>https://input_server_url/geonetwork/srv/fre/xml.metadata.get?uuid={{softMetaGmdXml1Id}}</gco:CharacterString>\n                            </gmd:code>\n                        </gmd:MD_Identifier>\n                    </gmd:identifier>\n                </gmd:CI_Citation>\n            </gmd:citation>\n            <gmd:abstract>\n                <gco:CharacterString>Résumé de la métadonnée.</gco:CharacterString>\n            </gmd:abstract>\n            <gmd:purpose>\n                <gco:CharacterString>Objectif</gco:CharacterString>\n            </gmd:purpose>\n            <gmd:status>\n                <gmd:MD_ProgressCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_ProgressCode\" codeListValue=\"completed\" />\n            </gmd:status>\n            <gmd:pointOfContact>\n                <gmd:CI_ResponsibleParty>\n                    <gmd:identifier>\n                        <gmd:MD_Identifier>\n                            <gmd:code>\n                                <gco:CharacterString>{{softContactGmdXml1Id}}</gco:CharacterString>\n                            </gmd:code>\n                        </gmd:MD_Identifier>\n                    </gmd:identifier>\n                    <gmd:individualName>\n                        <gco:CharacterString>{{softContactGmdXml1NewName}}</gco:CharacterString>\n                    </gmd:individualName>\n                    <gmd:organisationName>\n                        <gco:CharacterString>{{softOrgGmdXml1NewName}}</gco:CharacterString>\n                    </gmd:organisationName>\n                    <gmd:contactInfo>\n                        <gmd:CI_Contact>\n                            <gmd:phone>\n                                <gmd:CI_Telephone>\n                                    <gmd:voice>\n                                        <gco:CharacterString>00 00 00 00 00</gco:CharacterString>\n                                    </gmd:voice>\n                                </gmd:CI_Telephone>\n                            </gmd:phone>\n                            <gmd:address>\n                                <gmd:CI_Address>\n                                    <gmd:electronicMailAddress>\n                                        <gco:CharacterString>{{softContactGmdXml1NewEmail}}</gco:CharacterString>\n                                    </gmd:electronicMailAddress>\n                                </gmd:CI_Address>\n                            </gmd:address>\n                            <gmd:hoursOfService>\n                                <gco:CharacterString>08h00 - 13h00 et 13h00 - 12h00</gco:CharacterString>\n                            </gmd:hoursOfService>\n                        </gmd:CI_Contact>\n                    </gmd:contactInfo>\n                    <gmd:role>\n                        <gmd:CI_RoleCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_RoleCode\" codeListValue=\"pointOfContact\" />\n                    </gmd:role>\n                </gmd:CI_ResponsibleParty>\n            </gmd:pointOfContact>\n            <gmd:pointOfContact>\n                <gmd:CI_ResponsibleParty>\n                    <gmd:identifier>\n                        <gmd:MD_Identifier>\n                            <gmd:code>\n                                <gco:CharacterString>{{softOrgGmdXml1Id}}</gco:CharacterString>\n                            </gmd:code>\n                        </gmd:MD_Identifier>\n                    </gmd:identifier>\n                    <gmd:organisationName>\n                        <gco:CharacterString>{{softOrgGmdXml1NewName}}</gco:CharacterString>\n                    </gmd:organisationName>\n                    <gmd:contactInfo>\n                        <gmd:CI_Contact>\n                            <gmd:phone>\n                                <gmd:CI_Telephone>\n                                    <gmd:voice>\n                                        <gco:CharacterString>00 00 00 00 00</gco:CharacterString>\n                                    </gmd:voice>\n                                </gmd:CI_Telephone>\n                            </gmd:phone>\n                            <gmd:address>\n                                <gmd:CI_Address>\n                                    <gmd:deliveryPoint>\n                                        <gco:CharacterString>Nouvelle adresse</gco:CharacterString>\n                                    </gmd:deliveryPoint>\n                                    <gmd:deliveryPoint>\n                                        <gco:CharacterString>CS 23167</gco:CharacterString>\n                                    </gmd:deliveryPoint>\n                                    <gmd:city>\n                                        <gco:CharacterString>RENNES CEDEX</gco:CharacterString>\n                                    </gmd:city>\n                                    <gmd:postalCode>\n                                        <gco:CharacterString>35031</gco:CharacterString>\n                                    </gmd:postalCode>\n                                    <gmd:country>\n                                        <gco:CharacterString>France</gco:CharacterString>\n                                    </gmd:country>\n                                    <gmd:electronicMailAddress>\n                                        <gco:CharacterString>mail@mail.mail</gco:CharacterString>\n                                    </gmd:electronicMailAddress>\n                                    <gmd:electronicMailAddress>\n                                        <gco:CharacterString>mail2@mail.mail</gco:CharacterString>\n                                    </gmd:electronicMailAddress>\n                                </gmd:CI_Address>\n                            </gmd:address>\n                            <gmd:onlineResource>\n                                <gmd:CI_OnlineResource>\n                                    <gmd:linkage>\n                                        <gmd:URL>mail@mail.mail</gmd:URL>\n                                    </gmd:linkage>\n                                    <gmd:protocol>\n                                        <gco:CharacterString>WWW:LINK-1.0-http--link</gco:CharacterString>\n                                    </gmd:protocol>\n                                </gmd:CI_OnlineResource>\n                            </gmd:onlineResource>\n                            <gmd:contactInstructions>\n                                <gmx:FileName src=\"http://public.sig.rennesmetropole.fr/ressources/catalogue/apercus/republique_francaise.png\">Logo</gmx:FileName>\n                            </gmd:contactInstructions>\n                        </gmd:CI_Contact>\n                    </gmd:contactInfo>\n                    <gmd:role>\n                        <gmd:CI_RoleCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_RoleCode\" codeListValue=\"custodian\" />\n                    </gmd:role>\n                </gmd:CI_ResponsibleParty>\n            </gmd:pointOfContact>\n            <gmd:resourceMaintenance>\n                <gmd:MD_MaintenanceInformation>\n                    <gmd:maintenanceAndUpdateFrequency>\n                        <gmd:MD_MaintenanceFrequencyCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_MaintenanceFrequencyCode\" codeListValue=\"notPlanned\" />\n                    </gmd:maintenanceAndUpdateFrequency>\n                </gmd:MD_MaintenanceInformation>\n            </gmd:resourceMaintenance>\n            <gmd:graphicOverview>\n                <gmd:MD_BrowseGraphic>\n                    <gmd:fileName>\n                        <gco:CharacterString>https://public.sig.rennesmetropole.fr/ressources/catalogue/apercus/sec_sanit_ddtm_csv.png</gco:CharacterString>\n                    </gmd:fileName>\n                </gmd:MD_BrowseGraphic>\n            </gmd:graphicOverview>\n            <gmd:descriptiveKeywords>\n                <gmd:MD_Keywords>\n                    <gmd:keyword>\n                        <gco:CharacterString>{{randomTheme}}</gco:CharacterString>\n                    </gmd:keyword>\n                    <gmd:type>\n                        <gmd:MD_KeywordTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_KeywordTypeCode\" codeListValue=\"theme\" />\n                    </gmd:type>\n                    <gmd:thesaurusName>\n                        <gmd:CI_Citation>\n                            <gmd:title>\n                                <gco:CharacterString>GEMET - INSPIRE themes, version 1.1</gco:CharacterString>\n                            </gmd:title>\n                            <gmd:date>\n                                <gmd:CI_Date>\n                                    <gmd:date>\n                                        <gco:Date>2008-06-01</gco:Date>\n                                    </gmd:date>\n                                    <gmd:dateType>\n                                        <gmd:CI_DateTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode\" codeListValue=\"publication\" />\n                                    </gmd:dateType>\n                                </gmd:CI_Date>\n                            </gmd:date>\n                            <gmd:identifier>\n                                <gmd:MD_Identifier>\n                                    <gmd:code>\n                                        <gmx:Anchor xlink:href=\"http://geonetwork.mutu.local/geonetwork/srv/eng/thesaurus.download?ref=external.theme.inspire-theme\">geonetwork.thesaurus.external.theme.inspire-theme</gmx:Anchor>\n                                    </gmd:code>\n                                </gmd:MD_Identifier>\n                            </gmd:identifier>\n                        </gmd:CI_Citation>\n                    </gmd:thesaurusName>\n                </gmd:MD_Keywords>\n            </gmd:descriptiveKeywords>\n            <gmd:descriptiveKeywords>\n                <gmd:MD_Keywords>\n                    <gmd:keyword>\n                        <gco:CharacterString>bruit routier</gco:CharacterString>\n                    </gmd:keyword>\n                    <gmd:type>\n                        <gmd:MD_KeywordTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_KeywordTypeCode\" codeListValue=\"theme\" />\n                    </gmd:type>\n                    <gmd:thesaurusName>\n                        <gmd:CI_Citation>\n                            <gmd:title>\n                                <gco:CharacterString>GEMET</gco:CharacterString>\n                            </gmd:title>\n                            <gmd:date>\n                                <gmd:CI_Date>\n                                    <gmd:date>\n                                        <gco:Date>2018-10-26</gco:Date>\n                                    </gmd:date>\n                                    <gmd:dateType>\n                                        <gmd:CI_DateTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode\" codeListValue=\"publication\" />\n                                    </gmd:dateType>\n                                </gmd:CI_Date>\n                            </gmd:date>\n                            <gmd:identifier>\n                                <gmd:MD_Identifier>\n                                    <gmd:code>\n                                        <gmx:Anchor xlink:href=\"https://public.sig.rennesmetropole.fr/geonetwork/srv/eng/thesaurus.download?ref=external.theme.gemet\">geonetwork.thesaurus.external.theme.gemet</gmx:Anchor>\n                                    </gmd:code>\n                                </gmd:MD_Identifier>\n                            </gmd:identifier>\n                        </gmd:CI_Citation>\n                    </gmd:thesaurusName>\n                </gmd:MD_Keywords>\n            </gmd:descriptiveKeywords>\n            <gmd:descriptiveKeywords>\n                <gmd:MD_Keywords>\n                    <gmd:keyword>\n                        <gco:CharacterString>risques et sécurité : risques sanitaires</gco:CharacterString>\n                    </gmd:keyword>\n                    <gmd:type>\n                        <gmd:MD_KeywordTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_KeywordTypeCode\" codeListValue=\"theme\" />\n                    </gmd:type>\n                    <gmd:thesaurusName>\n                        <gmd:CI_Citation>\n                            <gmd:title>\n                                <gco:CharacterString>GéoBretagne v 2.0</gco:CharacterString>\n                            </gmd:title>\n                            <gmd:date>\n                                <gmd:CI_Date>\n                                    <gmd:date>\n                                        <gco:Date>2014-01-13</gco:Date>\n                                    </gmd:date>\n                                    <gmd:dateType>\n                                        <gmd:CI_DateTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode\" codeListValue=\"publication\" />\n                                    </gmd:dateType>\n                                </gmd:CI_Date>\n                            </gmd:date>\n                            <gmd:identifier>\n                                <gmd:MD_Identifier>\n                                    <gmd:code>\n                                        <gmx:Anchor xlink:href=\"http://geonetwork.mutu.local/geonetwork/srv/eng/thesaurus.download?ref=external.theme.geobretagne\">geonetwork.thesaurus.external.theme.geobretagne</gmx:Anchor>\n                                    </gmd:code>\n                                </gmd:MD_Identifier>\n                            </gmd:identifier>\n                        </gmd:CI_Citation>\n                    </gmd:thesaurusName>\n                </gmd:MD_Keywords>\n            </gmd:descriptiveKeywords>\n            <gmd:descriptiveKeywords>\n                <gmd:MD_Keywords>\n                    <gmd:keyword>\n                        <gco:CharacterString>données ouvertes</gco:CharacterString>\n                    </gmd:keyword>\n                    <gmd:type>\n                        <gmd:MD_KeywordTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_KeywordTypeCode\" codeListValue=\"theme\" />\n                    </gmd:type>\n                    <gmd:thesaurusName>\n                        <gmd:CI_Citation>\n                            <gmd:title>\n                                <gco:CharacterString>RM Diffusion v 1.2</gco:CharacterString>\n                            </gmd:title>\n                            <gmd:date>\n                                <gmd:CI_Date>\n                                    <gmd:date>\n                                        <gco:Date>2014-02-12</gco:Date>\n                                    </gmd:date>\n                                    <gmd:dateType>\n                                        <gmd:CI_DateTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode\" codeListValue=\"publication\" />\n                                    </gmd:dateType>\n                                </gmd:CI_Date>\n                            </gmd:date>\n                            <gmd:identifier>\n                                <gmd:MD_Identifier>\n                                    <gmd:code>\n                                        <gmx:Anchor xlink:href=\"http://geonetwork.mutu.local/geonetwork/srv/eng/thesaurus.download?ref=external.theme.rm_diffusion\">geonetwork.thesaurus.external.theme.rm_diffusion</gmx:Anchor>\n                                    </gmd:code>\n                                </gmd:MD_Identifier>\n                            </gmd:identifier>\n                        </gmd:CI_Citation>\n                    </gmd:thesaurusName>\n                </gmd:MD_Keywords>\n            </gmd:descriptiveKeywords>\n            <gmd:resourceConstraints>\n                <gmd:MD_LegalConstraints>\n                    <gmd:useLimitation>\n                        <gco:CharacterString>Réutilisation libre sous réserve de la mention obligatoire suivante : \"source : DDTM 35\"</gco:CharacterString>\n                    </gmd:useLimitation>\n                    <gmd:useLimitation>\n                        <gco:CharacterString>Licence Ouverte Etalab v2.0</gco:CharacterString>\n                    </gmd:useLimitation>\n                    <gmd:accessConstraints>\n                        <gmd:MD_RestrictionCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_RestrictionCode\" codeListValue=\"otherRestrictions\" />\n                    </gmd:accessConstraints>\n                    <gmd:useConstraints>\n                        <gmd:MD_RestrictionCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_RestrictionCode\" codeListValue=\"license\" />\n                    </gmd:useConstraints>\n                    <gmd:otherConstraints>\n                        <gco:CharacterString>Pas de restriction d’accès public</gco:CharacterString>\n                    </gmd:otherConstraints>\n                </gmd:MD_LegalConstraints>\n            </gmd:resourceConstraints>\n            <gmd:spatialResolution>\n                <gmd:MD_Resolution>\n                    <gmd:distance>\n                        <gco:Distance uom=\"m\">10</gco:Distance>\n                    </gmd:distance>\n                </gmd:MD_Resolution>\n            </gmd:spatialResolution>\n            <gmd:language>\n                <gmd:LanguageCode codeList=\"http://www.loc.gov/standards/iso639-2/\" codeListValue=\"fre\" />\n            </gmd:language>\n            <gmd:characterSet>\n                <gmd:MD_CharacterSetCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_CharacterSetCode\" codeListValue=\"utf8\" />\n            </gmd:characterSet>\n            <gmd:topicCategory>\n                <gmd:MD_TopicCategoryCode>health</gmd:MD_TopicCategoryCode>\n            </gmd:topicCategory>\n            <gmd:extent>\n                <gmd:EX_Extent>\n                    <gmd:geographicElement>\n                        <gmd:EX_GeographicBoundingBox>\n                            <gmd:westBoundLongitude>\n                                <gco:Decimal>-1.96327</gco:Decimal>\n                            </gmd:westBoundLongitude>\n                            <gmd:eastBoundLongitude>\n                                <gco:Decimal>-1.46558</gco:Decimal>\n                            </gmd:eastBoundLongitude>\n                            <gmd:southBoundLatitude>\n                                <gco:Decimal>47.93192</gco:Decimal>\n                            </gmd:southBoundLatitude>\n                            <gmd:northBoundLatitude>\n                                <gco:Decimal>48.30684</gco:Decimal>\n                            </gmd:northBoundLatitude>\n                        </gmd:EX_GeographicBoundingBox>\n                    </gmd:geographicElement>\n                </gmd:EX_Extent>\n            </gmd:extent>\n        </gmd:MD_DataIdentification>\n    </gmd:identificationInfo>\n    <gmd:distributionInfo xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:MD_Distribution>\n            <gmd:distributionFormat>\n                <gmd:MD_Format>\n                    <gmd:name>\n                        <gco:CharacterString>GML</gco:CharacterString>\n                    </gmd:name>\n                    <gmd:version>\n                        <gco:CharacterString>3.2.1</gco:CharacterString>\n                    </gmd:version>\n                </gmd:MD_Format>\n            </gmd:distributionFormat>\n            <gmd:transferOptions>\n                <gmd:MD_DigitalTransferOptions>\n                    <gmd:onLine>\n                        <gmd:CI_OnlineResource>\n                            <gmd:linkage>\n                                <gmd:URL>https://public.sig.rennesmetropole.fr/geoserver/ows?service=wms&amp;request=GetCapabilities</gmd:URL>\n                            </gmd:linkage>\n                            <gmd:protocol>\n                                <gco:CharacterString>OGC:WMS</gco:CharacterString>\n                            </gmd:protocol>\n                            <gmd:name>\n                                <gco:CharacterString>sec_sanit:ddtm_csv_secteurs_affectes</gco:CharacterString>\n                            </gmd:name>\n                            <gmd:identifier>\n                                <gmd:MD_Identifier>\n                                    <gmd:code>\n                                        <gco:CharacterString>\n                            c186b44e-d1c1-49d0-8c53-d88023e3d37b\n                        </gco:CharacterString>\n                                    </gmd:code>\n                                    <gco:CharacterString>\n                    </gco:CharacterString>\n                                </gmd:MD_Identifier>\n                            </gmd:identifier>\n                            <gmd:description>\n                                <gco:CharacterString>Classement sonore des infrastructures routières sur Rennes Métropole : secteurs affectés</gco:CharacterString>\n                            </gmd:description>\n                        </gmd:CI_OnlineResource>\n                    </gmd:onLine>\n                    <gmd:onLine>\n                        <gmd:CI_OnlineResource>\n                            <gmd:linkage>\n                                <gmd:URL>https://public.sig.rennesmetropole.fr/geoserver/ows?service=wfs&amp;request=GetCapabilities</gmd:URL>\n                            </gmd:linkage>\n                            <gmd:protocol>\n                                <gco:CharacterString>OGC:WFS</gco:CharacterString>\n                            </gmd:protocol>\n                            <gmd:name>\n                                <gco:CharacterString>sec_sanit:ddtm_csv_secteurs_affectes</gco:CharacterString>\n                            </gmd:name>\n                            <gmd:description>\n                                <gco:CharacterString>Classement sonore des infrastructures routières sur Rennes Métropole : secteurs affectés</gco:CharacterString>\n                            </gmd:description>\n                        </gmd:CI_OnlineResource>\n                    </gmd:onLine>\n                </gmd:MD_DigitalTransferOptions>\n            </gmd:transferOptions>\n            <gmd:transferOptions>\n                <gmd:MD_DigitalTransferOptions>\n                    <gmd:onLine>\n                        <gmd:CI_OnlineResource>\n                            <gmd:linkage>\n                                <gmd:URL>https://data.rennesmetropole.fr/explore/dataset/classement-sonore-voies-secteurs-affectes</gmd:URL>\n                            </gmd:linkage>\n                            <gmd:protocol>\n                                <gco:CharacterString>WWW:LINK-1.0-http--link</gco:CharacterString>\n                            </gmd:protocol>\n                            <gmd:description>\n                                <gco:CharacterString>Site open data de Rennes Métropole</gco:CharacterString>\n                            </gmd:description>\n                        </gmd:CI_OnlineResource>\n                    </gmd:onLine>\n                </gmd:MD_DigitalTransferOptions>\n            </gmd:transferOptions>\n            <gmd:transferOptions>\n                <gmd:MD_DigitalTransferOptions>\n                    <gmd:onLine>\n                        <gmd:CI_OnlineResource>\n                            <gmd:linkage>\n                                <gmd:URL>https://public.sig.rennesmetropole.fr/geoserver/ows?service=wfs&amp;version=2.0.0&amp;request=getfeature&amp;typename=sec_sanit:ddtm_csv_secteurs_affectes&amp;srsname=EPSG:3948&amp;outputformat=GML3&amp;format_options=charset:utf-8</gmd:URL>\n                            </gmd:linkage>\n                            <gmd:protocol>\n                                <gco:CharacterString>OGC:GML</gco:CharacterString>\n                            </gmd:protocol>\n                            <gmd:description>\n                                <gco:CharacterString>Lien de téléchargement direct (GML3 EPSG:3948)</gco:CharacterString>\n                            </gmd:description>\n                        </gmd:CI_OnlineResource>\n                    </gmd:onLine>\n                </gmd:MD_DigitalTransferOptions>\n            </gmd:transferOptions>\n        </gmd:MD_Distribution>\n    </gmd:distributionInfo>\n    <gmd:dataQualityInfo xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:DQ_DataQuality>\n            <gmd:scope>\n                <gmd:DQ_Scope>\n                    <gmd:level>\n                        <gmd:MD_ScopeCode codeListValue=\"dataset\" codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_ScopeCode\" />\n                    </gmd:level>\n                </gmd:DQ_Scope>\n            </gmd:scope>\n            <gmd:report>\n                <gmd:DQ_DomainConsistency>\n                    <gmd:result>\n                        <gmd:DQ_ConformanceResult>\n                            <gmd:specification>\n                                <gmd:CI_Citation>\n                                    <gmd:title>\n                                        <gco:CharacterString>D2.8.III.5 INSPIRE Data Specification on Human Health and Safety – Technical Guidelines - v 3.0</gco:CharacterString>\n                                    </gmd:title>\n                                    <gmd:date>\n                                        <gmd:CI_Date>\n                                            <gmd:date>\n                                                <gco:Date>2013-12-10</gco:Date>\n                                            </gmd:date>\n                                            <gmd:dateType>\n                                                <gmd:CI_DateTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode\" codeListValue=\"publication\" />\n                                            </gmd:dateType>\n                                        </gmd:CI_Date>\n                                    </gmd:date>\n                                </gmd:CI_Citation>\n                            </gmd:specification>\n                            <gmd:explanation>\n                                <gco:CharacterString>non testé</gco:CharacterString>\n                            </gmd:explanation>\n                            <gmd:pass>\n                                <gco:Boolean>false</gco:Boolean>\n                            </gmd:pass>\n                        </gmd:DQ_ConformanceResult>\n                    </gmd:result>\n                </gmd:DQ_DomainConsistency>\n            </gmd:report>\n            <gmd:lineage>\n                <gmd:LI_Lineage>\n                    <gmd:statement>\n                        <gco:CharacterString>Données fournies par la DDTM35. Pas de métadonnée.\nsecteurs affectéss probablement basés sur la BD Topo de l'IGN.</gco:CharacterString>\n                    </gmd:statement>\n                </gmd:LI_Lineage>\n            </gmd:lineage>\n        </gmd:DQ_DataQuality>\n    </gmd:dataQualityInfo>\n</gmd:MD_Metadata>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/resources/?objectStandard=gmd&format=xml",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources",
								""
							],
							"query": [
								{
									"key": "objectStandard",
									"value": "gmd"
								},
								{
									"key": "format",
									"value": "xml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add meta GMD-XML 3 fails : producer not found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('softMeta3LocalId', rand.get('{{$randomUUID}}'))"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Metadata 3 GMD-XML creation: no producer was found\", () => {",
									"    pm.expect(pm.response.code).to.gte(400);",
									"    const responseJson = pm.response.json();",
									"    ////console.log(responseJson.message);",
									"    const msg = \"Problem in translation of object 'resources'. Problem in translation of field 'producer'. No organization was found. Reminder, a valid xml-gmd org must have a tag 'codeListValue' with value custodian.\"",
									"    pm.expect(responseJson.message.substring(0, msg.length)).to.eql(msg);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<gmd:MD_Metadata xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:srv=\"http://www.isotc211.org/2005/srv\" xmlns:gmx=\"http://www.isotc211.org/2005/gmx\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmi=\"http://www.isotc211.org/2005/gmi\" xmlns:gml=\"http://www.opengis.net/gml\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xsi:schemaLocation=\"http://www.isotc211.org/2005/gmd http://www.isotc211.org/2005/gmd/gmd.xsd http://www.isotc211.org/2005/gmx http://www.isotc211.org/2005/gmx/gmx.xsd http://www.isotc211.org/2005/srv http://schemas.opengis.net/iso/19139/20060504/srv/srv.xsd\">\n    <gmd:language xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:LanguageCode codeList=\"http://www.loc.gov/standards/iso639-2/\" codeListValue=\"fre\" />\n    </gmd:language>\n    <gmd:fileIdentifier>\n        <gco:CharacterString>{{softMetaGmdXml3LocalId}}</gco:CharacterString>\n    </gmd:fileIdentifier>\n    <gmd:characterSet xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:MD_CharacterSetCode codeListValue=\"utf8\" codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_CharacterSetCode\" />\n    </gmd:characterSet>\n    <gmd:parentIdentifier xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gco:CharacterString>unknown</gco:CharacterString>\n    </gmd:parentIdentifier>\n    <gmd:hierarchyLevel xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:MD_ScopeCode codeListValue=\"dataset\" codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_ScopeCode\" />\n    </gmd:hierarchyLevel>\n    <gmd:hierarchyLevelName xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gco:CharacterString>Série de données</gco:CharacterString>\n    </gmd:hierarchyLevelName>\n    <gmd:contact xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:CI_ResponsibleParty>\n            <gmd:identifier>\n                <gmd:MD_Identifier>\n                    <gmd:code>\n                        <gco:CharacterString>{{softContactGmdXml1Id}}</gco:CharacterString>\n                    </gmd:code>\n                </gmd:MD_Identifier>\n            </gmd:identifier>\n            <gmd:individualName>\n                <gco:CharacterString>{{softContactGmdXml1NewName}}</gco:CharacterString>\n            </gmd:individualName>\n            <gmd:organisationName>\n                <gco:CharacterString>{{softOrgGmdXml1NewName}}</gco:CharacterString>\n            </gmd:organisationName>\n            <gmd:contactInfo>\n                <gmd:CI_Contact>\n                    <gmd:phone>\n                        <gmd:CI_Telephone>\n                            <gmd:voice>\n                                <gco:CharacterString>00 00 00 00 00</gco:CharacterString>\n                            </gmd:voice>\n                        </gmd:CI_Telephone>\n                    </gmd:phone>\n                    <gmd:address>\n                        <gmd:CI_Address>\n                            <gmd:electronicMailAddress>\n                                <gco:CharacterString>{{softContactGmdXml1NewEmail}}</gco:CharacterString>\n                            </gmd:electronicMailAddress>\n                        </gmd:CI_Address>\n                    </gmd:address>\n                    <gmd:hoursOfService>\n                        <gco:CharacterString>08h00 - 13h00 et 13h00 - 12h00</gco:CharacterString>\n                    </gmd:hoursOfService>\n                </gmd:CI_Contact>\n            </gmd:contactInfo>\n            <gmd:role>\n                <gmd:CI_RoleCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_RoleCode\" codeListValue=\"pointOfContact\" />\n            </gmd:role>\n        </gmd:CI_ResponsibleParty>\n    </gmd:contact>\n    <gmd:dateStamp xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gco:DateTime>2023-10-20T06:15:07</gco:DateTime>\n    </gmd:dateStamp>\n    <gmd:metadataStandardName xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gco:CharacterString>ISO 19115:2003/19139</gco:CharacterString>\n    </gmd:metadataStandardName>\n    <gmd:metadataStandardVersion xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gco:CharacterString>1.0</gco:CharacterString>\n    </gmd:metadataStandardVersion>\n    <gmd:spatialRepresentationInfo xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\" />\n    <gmd:spatialRepresentationInfo xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:MD_VectorSpatialRepresentation>\n            <gmd:topologyLevel>\n                <gmd:MD_TopologyLevelCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_TopologyLevelCode\" codeListValue=\"abstract\" />\n            </gmd:topologyLevel>\n            <gmd:geometricObjects>\n                <gmd:MD_GeometricObjects>\n                    <gmd:geometricObjectType>\n                        <gmd:MD_GeometricObjectTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_GeometricObjectTypeCode\" codeListValue=\"surface\" />\n                    </gmd:geometricObjectType>\n                </gmd:MD_GeometricObjects>\n            </gmd:geometricObjects>\n        </gmd:MD_VectorSpatialRepresentation>\n    </gmd:spatialRepresentationInfo>\n    <gmd:referenceSystemInfo xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:MD_ReferenceSystem>\n            <gmd:referenceSystemIdentifier>\n                <gmd:RS_Identifier>\n                    <gmd:code>\n                        <gco:CharacterString>RGF93 / CC48 (EPSG:3948)</gco:CharacterString>\n                    </gmd:code>\n                </gmd:RS_Identifier>\n            </gmd:referenceSystemIdentifier>\n        </gmd:MD_ReferenceSystem>\n    </gmd:referenceSystemInfo>\n    <gmd:identificationInfo xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:MD_DataIdentification>\n            <gmd:citation>\n                <gmd:CI_Citation>\n                    <gmd:title>\n                        <gco:CharacterString>Classement sonore des infrastructures routières sur Rennes Métropole : secteurs affectés</gco:CharacterString>\n                    </gmd:title>\n                    <gmd:alternateTitle>\n                        <gco:CharacterString>risque_secu.ddtm_csv_secteurs_affectes</gco:CharacterString>\n                    </gmd:alternateTitle>\n                    <gmd:date>\n                        <gmd:CI_Date>\n                            <gmd:date>\n                                <gco:Date>2023-10-17</gco:Date>\n                            </gmd:date>\n                            <gmd:dateType>\n                                <gmd:CI_DateTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode\" codeListValue=\"creation\" />\n                            </gmd:dateType>\n                        </gmd:CI_Date>\n                    </gmd:date>\n                    <gmd:date>\n                        <gmd:CI_Date>\n                            <gmd:date>\n                                <gco:Date>2023-10-17</gco:Date>\n                            </gmd:date>\n                            <gmd:dateType>\n                                <gmd:CI_DateTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode\" codeListValue=\"revision\" />\n                            </gmd:dateType>\n                        </gmd:CI_Date>\n                    </gmd:date>\n                    <gmd:identifier>\n                        <gmd:MD_Identifier>\n                            <gmd:code>\n                                <gco:CharacterString>https://input_server_url/geonetwork/srv/fre/xml.metadata.get?uuid={{softMetaGmdXml1Id}}</gco:CharacterString>\n                            </gmd:code>\n                        </gmd:MD_Identifier>\n                    </gmd:identifier>\n                </gmd:CI_Citation>\n            </gmd:citation>\n            <gmd:abstract>\n                <gco:CharacterString>Résumé de la métadonnée.</gco:CharacterString>\n            </gmd:abstract>\n            <gmd:purpose>\n                <gco:CharacterString>Objectif</gco:CharacterString>\n            </gmd:purpose>\n            <gmd:status>\n                <gmd:MD_ProgressCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_ProgressCode\" codeListValue=\"completed\" />\n            </gmd:status>\n            <gmd:pointOfContact>\n                <gmd:CI_ResponsibleParty>\n                    <gmd:identifier>\n                        <gmd:MD_Identifier>\n                            <gmd:code>\n                                <gco:CharacterString>{{softContactGmdXml1Id}}</gco:CharacterString>\n                            </gmd:code>\n                        </gmd:MD_Identifier>\n                    </gmd:identifier>\n                    <gmd:individualName>\n                        <gco:CharacterString>{{softContactGmdXml1NewName}}</gco:CharacterString>\n                    </gmd:individualName>\n                    <gmd:organisationName>\n                        <gco:CharacterString>{{softOrgGmdXml1NewName}}</gco:CharacterString>\n                    </gmd:organisationName>\n                    <gmd:contactInfo>\n                        <gmd:CI_Contact>\n                            <gmd:phone>\n                                <gmd:CI_Telephone>\n                                    <gmd:voice>\n                                        <gco:CharacterString>00 00 00 00 00</gco:CharacterString>\n                                    </gmd:voice>\n                                </gmd:CI_Telephone>\n                            </gmd:phone>\n                            <gmd:address>\n                                <gmd:CI_Address>\n                                    <gmd:electronicMailAddress>\n                                        <gco:CharacterString>{{softContactGmdXml1NewEmail}}</gco:CharacterString>\n                                    </gmd:electronicMailAddress>\n                                </gmd:CI_Address>\n                            </gmd:address>\n                            <gmd:hoursOfService>\n                                <gco:CharacterString>08h00 - 13h00 et 13h00 - 12h00</gco:CharacterString>\n                            </gmd:hoursOfService>\n                        </gmd:CI_Contact>\n                    </gmd:contactInfo>\n                    <gmd:role>\n                        <gmd:CI_RoleCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_RoleCode\" codeListValue=\"pointOfContact\" />\n                    </gmd:role>\n                </gmd:CI_ResponsibleParty>\n            </gmd:pointOfContact>\n            <gmd:pointOfContact>\n                <gmd:CI_ResponsibleParty>\n                    <gmd:identifier>\n                        <gmd:MD_Identifier>\n                            <gmd:code>\n                                <gco:CharacterString>{{softOrgGmdXml1Id}}</gco:CharacterString>\n                            </gmd:code>\n                        </gmd:MD_Identifier>\n                    </gmd:identifier>\n                    <gmd:organisationName>\n                        <gco:CharacterString>{{softOrgGmdXml1NewName}}</gco:CharacterString>\n                    </gmd:organisationName>\n                    <gmd:contactInfo>\n                        <gmd:CI_Contact>\n                            <gmd:phone>\n                                <gmd:CI_Telephone>\n                                    <gmd:voice>\n                                        <gco:CharacterString>00 00 00 00 00</gco:CharacterString>\n                                    </gmd:voice>\n                                </gmd:CI_Telephone>\n                            </gmd:phone>\n                            <gmd:address>\n                                <gmd:CI_Address>\n                                    <gmd:deliveryPoint>\n                                        <gco:CharacterString>Nouvelle adresse</gco:CharacterString>\n                                    </gmd:deliveryPoint>\n                                    <gmd:deliveryPoint>\n                                        <gco:CharacterString>CS 23167</gco:CharacterString>\n                                    </gmd:deliveryPoint>\n                                    <gmd:city>\n                                        <gco:CharacterString>RENNES CEDEX</gco:CharacterString>\n                                    </gmd:city>\n                                    <gmd:postalCode>\n                                        <gco:CharacterString>35031</gco:CharacterString>\n                                    </gmd:postalCode>\n                                    <gmd:country>\n                                        <gco:CharacterString>France</gco:CharacterString>\n                                    </gmd:country>\n                                    <gmd:electronicMailAddress>\n                                        <gco:CharacterString>mail@mail.mail</gco:CharacterString>\n                                    </gmd:electronicMailAddress>\n                                    <gmd:electronicMailAddress>\n                                        <gco:CharacterString>mail2@mail.mail</gco:CharacterString>\n                                    </gmd:electronicMailAddress>\n                                </gmd:CI_Address>\n                            </gmd:address>\n                            <gmd:onlineResource>\n                                <gmd:CI_OnlineResource>\n                                    <gmd:linkage>\n                                        <gmd:URL>mail@mail.mail</gmd:URL>\n                                    </gmd:linkage>\n                                    <gmd:protocol>\n                                        <gco:CharacterString>WWW:LINK-1.0-http--link</gco:CharacterString>\n                                    </gmd:protocol>\n                                </gmd:CI_OnlineResource>\n                            </gmd:onlineResource>\n                            <gmd:contactInstructions>\n                                <gmx:FileName src=\"http://public.sig.rennesmetropole.fr/ressources/catalogue/apercus/republique_francaise.png\">Logo</gmx:FileName>\n                            </gmd:contactInstructions>\n                        </gmd:CI_Contact>\n                    </gmd:contactInfo>\n                    <gmd:role>\n                        <gmd:CI_RoleCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_RoleCode\" codeListValue=\"pointOfContact\" />\n                    </gmd:role>\n                </gmd:CI_ResponsibleParty>\n            </gmd:pointOfContact>\n            <gmd:resourceMaintenance>\n                <gmd:MD_MaintenanceInformation>\n                    <gmd:maintenanceAndUpdateFrequency>\n                        <gmd:MD_MaintenanceFrequencyCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_MaintenanceFrequencyCode\" codeListValue=\"notPlanned\" />\n                    </gmd:maintenanceAndUpdateFrequency>\n                </gmd:MD_MaintenanceInformation>\n            </gmd:resourceMaintenance>\n            <gmd:graphicOverview>\n                <gmd:MD_BrowseGraphic>\n                    <gmd:fileName>\n                        <gco:CharacterString>https://public.sig.rennesmetropole.fr/ressources/catalogue/apercus/sec_sanit_ddtm_csv.png</gco:CharacterString>\n                    </gmd:fileName>\n                </gmd:MD_BrowseGraphic>\n            </gmd:graphicOverview>\n            <gmd:descriptiveKeywords>\n                <gmd:MD_Keywords>\n                    <gmd:keyword>\n                        <gco:CharacterString>{{randomTheme}}</gco:CharacterString>\n                    </gmd:keyword>\n                    <gmd:type>\n                        <gmd:MD_KeywordTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_KeywordTypeCode\" codeListValue=\"theme\" />\n                    </gmd:type>\n                    <gmd:thesaurusName>\n                        <gmd:CI_Citation>\n                            <gmd:title>\n                                <gco:CharacterString>GEMET - INSPIRE themes, version 1.1</gco:CharacterString>\n                            </gmd:title>\n                            <gmd:date>\n                                <gmd:CI_Date>\n                                    <gmd:date>\n                                        <gco:Date>2008-06-01</gco:Date>\n                                    </gmd:date>\n                                    <gmd:dateType>\n                                        <gmd:CI_DateTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode\" codeListValue=\"publication\" />\n                                    </gmd:dateType>\n                                </gmd:CI_Date>\n                            </gmd:date>\n                            <gmd:identifier>\n                                <gmd:MD_Identifier>\n                                    <gmd:code>\n                                        <gmx:Anchor xlink:href=\"http://geonetwork.mutu.local/geonetwork/srv/eng/thesaurus.download?ref=external.theme.inspire-theme\">geonetwork.thesaurus.external.theme.inspire-theme</gmx:Anchor>\n                                    </gmd:code>\n                                </gmd:MD_Identifier>\n                            </gmd:identifier>\n                        </gmd:CI_Citation>\n                    </gmd:thesaurusName>\n                </gmd:MD_Keywords>\n            </gmd:descriptiveKeywords>\n            <gmd:descriptiveKeywords>\n                <gmd:MD_Keywords>\n                    <gmd:keyword>\n                        <gco:CharacterString>bruit routier</gco:CharacterString>\n                    </gmd:keyword>\n                    <gmd:type>\n                        <gmd:MD_KeywordTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_KeywordTypeCode\" codeListValue=\"theme\" />\n                    </gmd:type>\n                    <gmd:thesaurusName>\n                        <gmd:CI_Citation>\n                            <gmd:title>\n                                <gco:CharacterString>GEMET</gco:CharacterString>\n                            </gmd:title>\n                            <gmd:date>\n                                <gmd:CI_Date>\n                                    <gmd:date>\n                                        <gco:Date>2018-10-26</gco:Date>\n                                    </gmd:date>\n                                    <gmd:dateType>\n                                        <gmd:CI_DateTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode\" codeListValue=\"publication\" />\n                                    </gmd:dateType>\n                                </gmd:CI_Date>\n                            </gmd:date>\n                            <gmd:identifier>\n                                <gmd:MD_Identifier>\n                                    <gmd:code>\n                                        <gmx:Anchor xlink:href=\"https://public.sig.rennesmetropole.fr/geonetwork/srv/eng/thesaurus.download?ref=external.theme.gemet\">geonetwork.thesaurus.external.theme.gemet</gmx:Anchor>\n                                    </gmd:code>\n                                </gmd:MD_Identifier>\n                            </gmd:identifier>\n                        </gmd:CI_Citation>\n                    </gmd:thesaurusName>\n                </gmd:MD_Keywords>\n            </gmd:descriptiveKeywords>\n            <gmd:descriptiveKeywords>\n                <gmd:MD_Keywords>\n                    <gmd:keyword>\n                        <gco:CharacterString>risques et sécurité : risques sanitaires</gco:CharacterString>\n                    </gmd:keyword>\n                    <gmd:type>\n                        <gmd:MD_KeywordTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_KeywordTypeCode\" codeListValue=\"theme\" />\n                    </gmd:type>\n                    <gmd:thesaurusName>\n                        <gmd:CI_Citation>\n                            <gmd:title>\n                                <gco:CharacterString>GéoBretagne v 2.0</gco:CharacterString>\n                            </gmd:title>\n                            <gmd:date>\n                                <gmd:CI_Date>\n                                    <gmd:date>\n                                        <gco:Date>2014-01-13</gco:Date>\n                                    </gmd:date>\n                                    <gmd:dateType>\n                                        <gmd:CI_DateTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode\" codeListValue=\"publication\" />\n                                    </gmd:dateType>\n                                </gmd:CI_Date>\n                            </gmd:date>\n                            <gmd:identifier>\n                                <gmd:MD_Identifier>\n                                    <gmd:code>\n                                        <gmx:Anchor xlink:href=\"http://geonetwork.mutu.local/geonetwork/srv/eng/thesaurus.download?ref=external.theme.geobretagne\">geonetwork.thesaurus.external.theme.geobretagne</gmx:Anchor>\n                                    </gmd:code>\n                                </gmd:MD_Identifier>\n                            </gmd:identifier>\n                        </gmd:CI_Citation>\n                    </gmd:thesaurusName>\n                </gmd:MD_Keywords>\n            </gmd:descriptiveKeywords>\n            <gmd:descriptiveKeywords>\n                <gmd:MD_Keywords>\n                    <gmd:keyword>\n                        <gco:CharacterString>données ouvertes</gco:CharacterString>\n                    </gmd:keyword>\n                    <gmd:type>\n                        <gmd:MD_KeywordTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_KeywordTypeCode\" codeListValue=\"theme\" />\n                    </gmd:type>\n                    <gmd:thesaurusName>\n                        <gmd:CI_Citation>\n                            <gmd:title>\n                                <gco:CharacterString>RM Diffusion v 1.2</gco:CharacterString>\n                            </gmd:title>\n                            <gmd:date>\n                                <gmd:CI_Date>\n                                    <gmd:date>\n                                        <gco:Date>2014-02-12</gco:Date>\n                                    </gmd:date>\n                                    <gmd:dateType>\n                                        <gmd:CI_DateTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode\" codeListValue=\"publication\" />\n                                    </gmd:dateType>\n                                </gmd:CI_Date>\n                            </gmd:date>\n                            <gmd:identifier>\n                                <gmd:MD_Identifier>\n                                    <gmd:code>\n                                        <gmx:Anchor xlink:href=\"http://geonetwork.mutu.local/geonetwork/srv/eng/thesaurus.download?ref=external.theme.rm_diffusion\">geonetwork.thesaurus.external.theme.rm_diffusion</gmx:Anchor>\n                                    </gmd:code>\n                                </gmd:MD_Identifier>\n                            </gmd:identifier>\n                        </gmd:CI_Citation>\n                    </gmd:thesaurusName>\n                </gmd:MD_Keywords>\n            </gmd:descriptiveKeywords>\n            <gmd:resourceConstraints>\n                <gmd:MD_LegalConstraints>\n                    <gmd:useLimitation>\n                        <gco:CharacterString>Réutilisation libre sous réserve de la mention obligatoire suivante : \"source : DDTM 35\"</gco:CharacterString>\n                    </gmd:useLimitation>\n                    <gmd:useLimitation>\n                        <gco:CharacterString>Licence Ouverte Etalab v2.0</gco:CharacterString>\n                    </gmd:useLimitation>\n                    <gmd:accessConstraints>\n                        <gmd:MD_RestrictionCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_RestrictionCode\" codeListValue=\"otherRestrictions\" />\n                    </gmd:accessConstraints>\n                    <gmd:useConstraints>\n                        <gmd:MD_RestrictionCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_RestrictionCode\" codeListValue=\"license\" />\n                    </gmd:useConstraints>\n                    <gmd:otherConstraints>\n                        <gco:CharacterString>Pas de restriction d’accès public</gco:CharacterString>\n                    </gmd:otherConstraints>\n                </gmd:MD_LegalConstraints>\n            </gmd:resourceConstraints>\n            <gmd:spatialResolution>\n                <gmd:MD_Resolution>\n                    <gmd:distance>\n                        <gco:Distance uom=\"m\">10</gco:Distance>\n                    </gmd:distance>\n                </gmd:MD_Resolution>\n            </gmd:spatialResolution>\n            <gmd:language>\n                <gmd:LanguageCode codeList=\"http://www.loc.gov/standards/iso639-2/\" codeListValue=\"fre\" />\n            </gmd:language>\n            <gmd:characterSet>\n                <gmd:MD_CharacterSetCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_CharacterSetCode\" codeListValue=\"utf8\" />\n            </gmd:characterSet>\n            <gmd:topicCategory>\n                <gmd:MD_TopicCategoryCode>health</gmd:MD_TopicCategoryCode>\n            </gmd:topicCategory>\n            <gmd:extent>\n                <gmd:EX_Extent>\n                    <gmd:geographicElement>\n                        <gmd:EX_GeographicBoundingBox>\n                            <gmd:westBoundLongitude>\n                                <gco:Decimal>-1.96327</gco:Decimal>\n                            </gmd:westBoundLongitude>\n                            <gmd:eastBoundLongitude>\n                                <gco:Decimal>-1.46558</gco:Decimal>\n                            </gmd:eastBoundLongitude>\n                            <gmd:southBoundLatitude>\n                                <gco:Decimal>47.93192</gco:Decimal>\n                            </gmd:southBoundLatitude>\n                            <gmd:northBoundLatitude>\n                                <gco:Decimal>48.30684</gco:Decimal>\n                            </gmd:northBoundLatitude>\n                        </gmd:EX_GeographicBoundingBox>\n                    </gmd:geographicElement>\n                </gmd:EX_Extent>\n            </gmd:extent>\n        </gmd:MD_DataIdentification>\n    </gmd:identificationInfo>\n    <gmd:distributionInfo xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:MD_Distribution>\n            <gmd:distributionFormat>\n                <gmd:MD_Format>\n                    <gmd:name>\n                        <gco:CharacterString>GML</gco:CharacterString>\n                    </gmd:name>\n                    <gmd:version>\n                        <gco:CharacterString>3.2.1</gco:CharacterString>\n                    </gmd:version>\n                </gmd:MD_Format>\n            </gmd:distributionFormat>\n            <gmd:transferOptions>\n                <gmd:MD_DigitalTransferOptions>\n                    <gmd:onLine>\n                        <gmd:CI_OnlineResource>\n                            <gmd:linkage>\n                                <gmd:URL>https://public.sig.rennesmetropole.fr/geoserver/ows?service=wms&amp;request=GetCapabilities</gmd:URL>\n                            </gmd:linkage>\n                            <gmd:protocol>\n                                <gco:CharacterString>OGC:WMS</gco:CharacterString>\n                            </gmd:protocol>\n                            <gmd:name>\n                                <gco:CharacterString>sec_sanit:ddtm_csv_secteurs_affectes</gco:CharacterString>\n                            </gmd:name>\n                            <gmd:identifier>\n                                <gmd:MD_Identifier>\n                                    <gmd:code>\n                                        <gco:CharacterString>\n                            c186b44e-d1c1-49d0-8c53-d88023e3d37b\n                        </gco:CharacterString>\n                                    </gmd:code>\n                                    <gco:CharacterString>\n                    </gco:CharacterString>\n                                </gmd:MD_Identifier>\n                            </gmd:identifier>\n                            <gmd:description>\n                                <gco:CharacterString>Classement sonore des infrastructures routières sur Rennes Métropole : secteurs affectés</gco:CharacterString>\n                            </gmd:description>\n                        </gmd:CI_OnlineResource>\n                    </gmd:onLine>\n                    <gmd:onLine>\n                        <gmd:CI_OnlineResource>\n                            <gmd:linkage>\n                                <gmd:URL>https://public.sig.rennesmetropole.fr/geoserver/ows?service=wfs&amp;request=GetCapabilities</gmd:URL>\n                            </gmd:linkage>\n                            <gmd:protocol>\n                                <gco:CharacterString>OGC:WFS</gco:CharacterString>\n                            </gmd:protocol>\n                            <gmd:name>\n                                <gco:CharacterString>sec_sanit:ddtm_csv_secteurs_affectes</gco:CharacterString>\n                            </gmd:name>\n                            <gmd:description>\n                                <gco:CharacterString>Classement sonore des infrastructures routières sur Rennes Métropole : secteurs affectés</gco:CharacterString>\n                            </gmd:description>\n                        </gmd:CI_OnlineResource>\n                    </gmd:onLine>\n                </gmd:MD_DigitalTransferOptions>\n            </gmd:transferOptions>\n            <gmd:transferOptions>\n                <gmd:MD_DigitalTransferOptions>\n                    <gmd:onLine>\n                        <gmd:CI_OnlineResource>\n                            <gmd:linkage>\n                                <gmd:URL>https://data.rennesmetropole.fr/explore/dataset/classement-sonore-voies-secteurs-affectes</gmd:URL>\n                            </gmd:linkage>\n                            <gmd:protocol>\n                                <gco:CharacterString>WWW:LINK-1.0-http--link</gco:CharacterString>\n                            </gmd:protocol>\n                            <gmd:description>\n                                <gco:CharacterString>Site open data de Rennes Métropole</gco:CharacterString>\n                            </gmd:description>\n                        </gmd:CI_OnlineResource>\n                    </gmd:onLine>\n                </gmd:MD_DigitalTransferOptions>\n            </gmd:transferOptions>\n            <gmd:transferOptions>\n                <gmd:MD_DigitalTransferOptions>\n                    <gmd:onLine>\n                        <gmd:CI_OnlineResource>\n                            <gmd:linkage>\n                                <gmd:URL>https://public.sig.rennesmetropole.fr/geoserver/ows?service=wfs&amp;version=2.0.0&amp;request=getfeature&amp;typename=sec_sanit:ddtm_csv_secteurs_affectes&amp;srsname=EPSG:3948&amp;outputformat=GML3&amp;format_options=charset:utf-8</gmd:URL>\n                            </gmd:linkage>\n                            <gmd:protocol>\n                                <gco:CharacterString>OGC:GML</gco:CharacterString>\n                            </gmd:protocol>\n                            <gmd:description>\n                                <gco:CharacterString>Lien de téléchargement direct (GML3 EPSG:3948)</gco:CharacterString>\n                            </gmd:description>\n                        </gmd:CI_OnlineResource>\n                    </gmd:onLine>\n                </gmd:MD_DigitalTransferOptions>\n            </gmd:transferOptions>\n        </gmd:MD_Distribution>\n    </gmd:distributionInfo>\n    <gmd:dataQualityInfo xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:DQ_DataQuality>\n            <gmd:scope>\n                <gmd:DQ_Scope>\n                    <gmd:level>\n                        <gmd:MD_ScopeCode codeListValue=\"dataset\" codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_ScopeCode\" />\n                    </gmd:level>\n                </gmd:DQ_Scope>\n            </gmd:scope>\n            <gmd:report>\n                <gmd:DQ_DomainConsistency>\n                    <gmd:result>\n                        <gmd:DQ_ConformanceResult>\n                            <gmd:specification>\n                                <gmd:CI_Citation>\n                                    <gmd:title>\n                                        <gco:CharacterString>D2.8.III.5 INSPIRE Data Specification on Human Health and Safety – Technical Guidelines - v 3.0</gco:CharacterString>\n                                    </gmd:title>\n                                    <gmd:date>\n                                        <gmd:CI_Date>\n                                            <gmd:date>\n                                                <gco:Date>2013-12-10</gco:Date>\n                                            </gmd:date>\n                                            <gmd:dateType>\n                                                <gmd:CI_DateTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode\" codeListValue=\"publication\" />\n                                            </gmd:dateType>\n                                        </gmd:CI_Date>\n                                    </gmd:date>\n                                </gmd:CI_Citation>\n                            </gmd:specification>\n                            <gmd:explanation>\n                                <gco:CharacterString>non testé</gco:CharacterString>\n                            </gmd:explanation>\n                            <gmd:pass>\n                                <gco:Boolean>false</gco:Boolean>\n                            </gmd:pass>\n                        </gmd:DQ_ConformanceResult>\n                    </gmd:result>\n                </gmd:DQ_DomainConsistency>\n            </gmd:report>\n            <gmd:lineage>\n                <gmd:LI_Lineage>\n                    <gmd:statement>\n                        <gco:CharacterString>Données fournies par la DDTM35. Pas de métadonnée.\nsecteurs affectéss probablement basés sur la BD Topo de l'IGN.</gco:CharacterString>\n                    </gmd:statement>\n                </gmd:LI_Lineage>\n            </gmd:lineage>\n        </gmd:DQ_DataQuality>\n    </gmd:dataQualityInfo>\n</gmd:MD_Metadata>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/resources/?objectStandard=gmd&format=xml",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources",
								""
							],
							"query": [
								{
									"key": "objectStandard",
									"value": "gmd"
								},
								{
									"key": "format",
									"value": "xml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add meta GMD-XML 4 fails : contact not found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('softMetaGmdXml4LocalId', rand.get('{{$randomUUID}}'))",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Metadata 4 GMD-XML creation: no contact was found\", () => {",
									"    pm.expect(pm.response.code).to.gte(400);",
									"    const responseJson = pm.response.json();",
									"    ////console.log(responseJson.message);",
									"    const msg = \"Problem in translation of object 'resources'. Problem in translation of field 'contacts'. No valid contact was found. Reminder : a valid contact in xml-gmd must have 'codeListValue' set to 'pointOfContact'\"",
									"    pm.expect(responseJson.message).to.eql(msg);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<gmd:MD_Metadata xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:srv=\"http://www.isotc211.org/2005/srv\" xmlns:gmx=\"http://www.isotc211.org/2005/gmx\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmi=\"http://www.isotc211.org/2005/gmi\" xmlns:gml=\"http://www.opengis.net/gml\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xsi:schemaLocation=\"http://www.isotc211.org/2005/gmd http://www.isotc211.org/2005/gmd/gmd.xsd http://www.isotc211.org/2005/gmx http://www.isotc211.org/2005/gmx/gmx.xsd http://www.isotc211.org/2005/srv http://schemas.opengis.net/iso/19139/20060504/srv/srv.xsd\">\n    <gmd:fileIdentifier>\n        <gco:CharacterString>{{softMetaGmdXml4Id}}</gco:CharacterString>\n    </gmd:fileIdentifier>\n    <gmd:language xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:LanguageCode codeList=\"http://www.loc.gov/standards/iso639-2/\" codeListValue=\"fre\" />\n    </gmd:language>\n    <gmd:characterSet xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:MD_CharacterSetCode codeListValue=\"utf8\" codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_CharacterSetCode\" />\n    </gmd:characterSet>\n    <gmd:parentIdentifier xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gco:CharacterString>unknown</gco:CharacterString>\n    </gmd:parentIdentifier>\n    <gmd:hierarchyLevel xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:MD_ScopeCode codeListValue=\"dataset\" codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_ScopeCode\" />\n    </gmd:hierarchyLevel>\n    <gmd:hierarchyLevelName xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gco:CharacterString>Série de données</gco:CharacterString>\n    </gmd:hierarchyLevelName>\n    <gmd:contact xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:CI_ResponsibleParty>\n            <gmd:identifier>\n                <gmd:MD_Identifier>\n                    <gmd:code>\n                        <gco:CharacterString>{{softContactGmdXml1Id}}</gco:CharacterString>\n                    </gmd:code>\n                </gmd:MD_Identifier>\n            </gmd:identifier>\n            <gmd:individualName>\n                <gco:CharacterString>{{softContactGmdXml1NewName}}</gco:CharacterString>\n            </gmd:individualName>\n            <gmd:organisationName>\n                <gco:CharacterString>{{softOrgGmdXml1NewName}}</gco:CharacterString>\n            </gmd:organisationName>\n            <gmd:contactInfo>\n                <gmd:CI_Contact>\n                    <gmd:phone>\n                        <gmd:CI_Telephone>\n                            <gmd:voice>\n                                <gco:CharacterString>00 00 00 00 00</gco:CharacterString>\n                            </gmd:voice>\n                        </gmd:CI_Telephone>\n                    </gmd:phone>\n                    <gmd:address>\n                        <gmd:CI_Address>\n                            <gmd:electronicMailAddress>\n                                <gco:CharacterString>{{softContactGmdXml1NewEmail}}</gco:CharacterString>\n                            </gmd:electronicMailAddress>\n                        </gmd:CI_Address>\n                    </gmd:address>\n                    <gmd:hoursOfService>\n                        <gco:CharacterString>08h00 - 13h00 et 13h00 - 12h00</gco:CharacterString>\n                    </gmd:hoursOfService>\n                </gmd:CI_Contact>\n            </gmd:contactInfo>\n            <gmd:role>\n                <gmd:CI_RoleCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_RoleCode\" codeListValue=\"pointOfContact\" />\n            </gmd:role>\n        </gmd:CI_ResponsibleParty>\n    </gmd:contact>\n    <gmd:dateStamp xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gco:DateTime>2023-10-20T06:15:07</gco:DateTime>\n    </gmd:dateStamp>\n    <gmd:metadataStandardName xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gco:CharacterString>ISO 19115:2003/19139</gco:CharacterString>\n    </gmd:metadataStandardName>\n    <gmd:metadataStandardVersion xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gco:CharacterString>1.0</gco:CharacterString>\n    </gmd:metadataStandardVersion>\n    <gmd:spatialRepresentationInfo xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\" />\n    <gmd:spatialRepresentationInfo xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:MD_VectorSpatialRepresentation>\n            <gmd:topologyLevel>\n                <gmd:MD_TopologyLevelCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_TopologyLevelCode\" codeListValue=\"abstract\" />\n            </gmd:topologyLevel>\n            <gmd:geometricObjects>\n                <gmd:MD_GeometricObjects>\n                    <gmd:geometricObjectType>\n                        <gmd:MD_GeometricObjectTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_GeometricObjectTypeCode\" codeListValue=\"surface\" />\n                    </gmd:geometricObjectType>\n                </gmd:MD_GeometricObjects>\n            </gmd:geometricObjects>\n        </gmd:MD_VectorSpatialRepresentation>\n    </gmd:spatialRepresentationInfo>\n    <gmd:referenceSystemInfo xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:MD_ReferenceSystem>\n            <gmd:referenceSystemIdentifier>\n                <gmd:RS_Identifier>\n                    <gmd:code>\n                        <gco:CharacterString>RGF93 / CC48 (EPSG:3948)</gco:CharacterString>\n                    </gmd:code>\n                </gmd:RS_Identifier>\n            </gmd:referenceSystemIdentifier>\n        </gmd:MD_ReferenceSystem>\n    </gmd:referenceSystemInfo>\n    <gmd:identificationInfo xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:MD_DataIdentification>\n            <gmd:citation>\n                <gmd:CI_Citation>\n                    <gmd:title>\n                        <gco:CharacterString>Classement sonore des infrastructures routières sur Rennes Métropole : secteurs affectés</gco:CharacterString>\n                    </gmd:title>\n                    <gmd:alternateTitle>\n                        <gco:CharacterString>risque_secu.ddtm_csv_secteurs_affectes</gco:CharacterString>\n                    </gmd:alternateTitle>\n                    <gmd:date>\n                        <gmd:CI_Date>\n                            <gmd:date>\n                                <gco:Date>2023-10-17</gco:Date>\n                            </gmd:date>\n                            <gmd:dateType>\n                                <gmd:CI_DateTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode\" codeListValue=\"creation\" />\n                            </gmd:dateType>\n                        </gmd:CI_Date>\n                    </gmd:date>\n                    <gmd:date>\n                        <gmd:CI_Date>\n                            <gmd:date>\n                                <gco:Date>2023-10-17</gco:Date>\n                            </gmd:date>\n                            <gmd:dateType>\n                                <gmd:CI_DateTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode\" codeListValue=\"revision\" />\n                            </gmd:dateType>\n                        </gmd:CI_Date>\n                    </gmd:date>\n                    <gmd:identifier>\n                        <gmd:MD_Identifier>\n                            <gmd:code>\n                                <gco:CharacterString>https://input_server_url/geonetwork/srv/fre/xml.metadata.get?uuid={{softMetaGmdXml1Id}}</gco:CharacterString>\n                            </gmd:code>\n                        </gmd:MD_Identifier>\n                    </gmd:identifier>\n                </gmd:CI_Citation>\n            </gmd:citation>\n            <gmd:abstract>\n                <gco:CharacterString>Résumé de la métadonnée.</gco:CharacterString>\n            </gmd:abstract>\n            <gmd:purpose>\n                <gco:CharacterString>Objectif</gco:CharacterString>\n            </gmd:purpose>\n            <gmd:status>\n                <gmd:MD_ProgressCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_ProgressCode\" codeListValue=\"completed\" />\n            </gmd:status>\n            <gmd:pointOfContact>\n                <gmd:CI_ResponsibleParty>\n                    <gmd:identifier>\n                        <gmd:MD_Identifier>\n                            <gmd:code>\n                                <gco:CharacterString>{{softContactGmdXml1Id}}</gco:CharacterString>\n                            </gmd:code>\n                        </gmd:MD_Identifier>\n                    </gmd:identifier>\n                    <gmd:individualName>\n                        <gco:CharacterString>{{softContactGmdXml1NewName}}</gco:CharacterString>\n                    </gmd:individualName>\n                    <gmd:organisationName>\n                        <gco:CharacterString>{{softOrgGmdXml1NewName}}</gco:CharacterString>\n                    </gmd:organisationName>\n                    <gmd:contactInfo>\n                        <gmd:CI_Contact>\n                            <gmd:phone>\n                                <gmd:CI_Telephone>\n                                    <gmd:voice>\n                                        <gco:CharacterString>00 00 00 00 00</gco:CharacterString>\n                                    </gmd:voice>\n                                </gmd:CI_Telephone>\n                            </gmd:phone>\n                            <gmd:address>\n                                <gmd:CI_Address>\n                                    <gmd:electronicMailAddress>\n                                        <gco:CharacterString>{{softContactGmdXml1NewEmail}}</gco:CharacterString>\n                                    </gmd:electronicMailAddress>\n                                </gmd:CI_Address>\n                            </gmd:address>\n                            <gmd:hoursOfService>\n                                <gco:CharacterString>08h00 - 13h00 et 13h00 - 12h00</gco:CharacterString>\n                            </gmd:hoursOfService>\n                        </gmd:CI_Contact>\n                    </gmd:contactInfo>\n                    <gmd:role>\n                        <gmd:CI_RoleCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_RoleCode\" codeListValue=\"custodian\" />\n                    </gmd:role>\n                </gmd:CI_ResponsibleParty>\n            </gmd:pointOfContact>\n            <gmd:pointOfContact>\n                <gmd:CI_ResponsibleParty>\n                    <gmd:identifier>\n                        <gmd:MD_Identifier>\n                            <gmd:code>\n                                <gco:CharacterString>{{softOrgGmdXml1Id}}</gco:CharacterString>\n                            </gmd:code>\n                        </gmd:MD_Identifier>\n                    </gmd:identifier>\n                    <gmd:organisationName>\n                        <gco:CharacterString>{{softOrgGmdXml1NewName}}</gco:CharacterString>\n                    </gmd:organisationName>\n                    <gmd:contactInfo>\n                        <gmd:CI_Contact>\n                            <gmd:phone>\n                                <gmd:CI_Telephone>\n                                    <gmd:voice>\n                                        <gco:CharacterString>00 00 00 00 00</gco:CharacterString>\n                                    </gmd:voice>\n                                </gmd:CI_Telephone>\n                            </gmd:phone>\n                            <gmd:address>\n                                <gmd:CI_Address>\n                                    <gmd:deliveryPoint>\n                                        <gco:CharacterString>Nouvelle adresse</gco:CharacterString>\n                                    </gmd:deliveryPoint>\n                                    <gmd:deliveryPoint>\n                                        <gco:CharacterString>CS 23167</gco:CharacterString>\n                                    </gmd:deliveryPoint>\n                                    <gmd:city>\n                                        <gco:CharacterString>RENNES CEDEX</gco:CharacterString>\n                                    </gmd:city>\n                                    <gmd:postalCode>\n                                        <gco:CharacterString>35031</gco:CharacterString>\n                                    </gmd:postalCode>\n                                    <gmd:country>\n                                        <gco:CharacterString>France</gco:CharacterString>\n                                    </gmd:country>\n                                    <gmd:electronicMailAddress>\n                                        <gco:CharacterString>mail@mail.mail</gco:CharacterString>\n                                    </gmd:electronicMailAddress>\n                                    <gmd:electronicMailAddress>\n                                        <gco:CharacterString>mail2@mail.mail</gco:CharacterString>\n                                    </gmd:electronicMailAddress>\n                                </gmd:CI_Address>\n                            </gmd:address>\n                            <gmd:onlineResource>\n                                <gmd:CI_OnlineResource>\n                                    <gmd:linkage>\n                                        <gmd:URL>mail@mail.mail</gmd:URL>\n                                    </gmd:linkage>\n                                    <gmd:protocol>\n                                        <gco:CharacterString>WWW:LINK-1.0-http--link</gco:CharacterString>\n                                    </gmd:protocol>\n                                </gmd:CI_OnlineResource>\n                            </gmd:onlineResource>\n                            <gmd:contactInstructions>\n                                <gmx:FileName src=\"http://public.sig.rennesmetropole.fr/ressources/catalogue/apercus/republique_francaise.png\">Logo</gmx:FileName>\n                            </gmd:contactInstructions>\n                        </gmd:CI_Contact>\n                    </gmd:contactInfo>\n                    <gmd:role>\n                        <gmd:CI_RoleCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_RoleCode\" codeListValue=\"custodian\" />\n                    </gmd:role>\n                </gmd:CI_ResponsibleParty>\n            </gmd:pointOfContact>\n            <gmd:resourceMaintenance>\n                <gmd:MD_MaintenanceInformation>\n                    <gmd:maintenanceAndUpdateFrequency>\n                        <gmd:MD_MaintenanceFrequencyCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_MaintenanceFrequencyCode\" codeListValue=\"notPlanned\" />\n                    </gmd:maintenanceAndUpdateFrequency>\n                </gmd:MD_MaintenanceInformation>\n            </gmd:resourceMaintenance>\n            <gmd:graphicOverview>\n                <gmd:MD_BrowseGraphic>\n                    <gmd:fileName>\n                        <gco:CharacterString>https://public.sig.rennesmetropole.fr/ressources/catalogue/apercus/sec_sanit_ddtm_csv.png</gco:CharacterString>\n                    </gmd:fileName>\n                </gmd:MD_BrowseGraphic>\n            </gmd:graphicOverview>\n            <gmd:descriptiveKeywords>\n                <gmd:MD_Keywords>\n                    <gmd:keyword>\n                        <gco:CharacterString>{{randomTheme}}</gco:CharacterString>\n                    </gmd:keyword>\n                    <gmd:type>\n                        <gmd:MD_KeywordTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_KeywordTypeCode\" codeListValue=\"theme\" />\n                    </gmd:type>\n                    <gmd:thesaurusName>\n                        <gmd:CI_Citation>\n                            <gmd:title>\n                                <gco:CharacterString>GEMET - INSPIRE themes, version 1.1</gco:CharacterString>\n                            </gmd:title>\n                            <gmd:date>\n                                <gmd:CI_Date>\n                                    <gmd:date>\n                                        <gco:Date>2008-06-01</gco:Date>\n                                    </gmd:date>\n                                    <gmd:dateType>\n                                        <gmd:CI_DateTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode\" codeListValue=\"publication\" />\n                                    </gmd:dateType>\n                                </gmd:CI_Date>\n                            </gmd:date>\n                            <gmd:identifier>\n                                <gmd:MD_Identifier>\n                                    <gmd:code>\n                                        <gmx:Anchor xlink:href=\"http://geonetwork.mutu.local/geonetwork/srv/eng/thesaurus.download?ref=external.theme.inspire-theme\">geonetwork.thesaurus.external.theme.inspire-theme</gmx:Anchor>\n                                    </gmd:code>\n                                </gmd:MD_Identifier>\n                            </gmd:identifier>\n                        </gmd:CI_Citation>\n                    </gmd:thesaurusName>\n                </gmd:MD_Keywords>\n            </gmd:descriptiveKeywords>\n            <gmd:descriptiveKeywords>\n                <gmd:MD_Keywords>\n                    <gmd:keyword>\n                        <gco:CharacterString>bruit routier</gco:CharacterString>\n                    </gmd:keyword>\n                    <gmd:type>\n                        <gmd:MD_KeywordTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_KeywordTypeCode\" codeListValue=\"theme\" />\n                    </gmd:type>\n                    <gmd:thesaurusName>\n                        <gmd:CI_Citation>\n                            <gmd:title>\n                                <gco:CharacterString>GEMET</gco:CharacterString>\n                            </gmd:title>\n                            <gmd:date>\n                                <gmd:CI_Date>\n                                    <gmd:date>\n                                        <gco:Date>2018-10-26</gco:Date>\n                                    </gmd:date>\n                                    <gmd:dateType>\n                                        <gmd:CI_DateTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode\" codeListValue=\"publication\" />\n                                    </gmd:dateType>\n                                </gmd:CI_Date>\n                            </gmd:date>\n                            <gmd:identifier>\n                                <gmd:MD_Identifier>\n                                    <gmd:code>\n                                        <gmx:Anchor xlink:href=\"https://public.sig.rennesmetropole.fr/geonetwork/srv/eng/thesaurus.download?ref=external.theme.gemet\">geonetwork.thesaurus.external.theme.gemet</gmx:Anchor>\n                                    </gmd:code>\n                                </gmd:MD_Identifier>\n                            </gmd:identifier>\n                        </gmd:CI_Citation>\n                    </gmd:thesaurusName>\n                </gmd:MD_Keywords>\n            </gmd:descriptiveKeywords>\n            <gmd:descriptiveKeywords>\n                <gmd:MD_Keywords>\n                    <gmd:keyword>\n                        <gco:CharacterString>risques et sécurité : risques sanitaires</gco:CharacterString>\n                    </gmd:keyword>\n                    <gmd:type>\n                        <gmd:MD_KeywordTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_KeywordTypeCode\" codeListValue=\"theme\" />\n                    </gmd:type>\n                    <gmd:thesaurusName>\n                        <gmd:CI_Citation>\n                            <gmd:title>\n                                <gco:CharacterString>GéoBretagne v 2.0</gco:CharacterString>\n                            </gmd:title>\n                            <gmd:date>\n                                <gmd:CI_Date>\n                                    <gmd:date>\n                                        <gco:Date>2014-01-13</gco:Date>\n                                    </gmd:date>\n                                    <gmd:dateType>\n                                        <gmd:CI_DateTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode\" codeListValue=\"publication\" />\n                                    </gmd:dateType>\n                                </gmd:CI_Date>\n                            </gmd:date>\n                            <gmd:identifier>\n                                <gmd:MD_Identifier>\n                                    <gmd:code>\n                                        <gmx:Anchor xlink:href=\"http://geonetwork.mutu.local/geonetwork/srv/eng/thesaurus.download?ref=external.theme.geobretagne\">geonetwork.thesaurus.external.theme.geobretagne</gmx:Anchor>\n                                    </gmd:code>\n                                </gmd:MD_Identifier>\n                            </gmd:identifier>\n                        </gmd:CI_Citation>\n                    </gmd:thesaurusName>\n                </gmd:MD_Keywords>\n            </gmd:descriptiveKeywords>\n            <gmd:descriptiveKeywords>\n                <gmd:MD_Keywords>\n                    <gmd:keyword>\n                        <gco:CharacterString>données ouvertes</gco:CharacterString>\n                    </gmd:keyword>\n                    <gmd:type>\n                        <gmd:MD_KeywordTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_KeywordTypeCode\" codeListValue=\"theme\" />\n                    </gmd:type>\n                    <gmd:thesaurusName>\n                        <gmd:CI_Citation>\n                            <gmd:title>\n                                <gco:CharacterString>RM Diffusion v 1.2</gco:CharacterString>\n                            </gmd:title>\n                            <gmd:date>\n                                <gmd:CI_Date>\n                                    <gmd:date>\n                                        <gco:Date>2014-02-12</gco:Date>\n                                    </gmd:date>\n                                    <gmd:dateType>\n                                        <gmd:CI_DateTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode\" codeListValue=\"publication\" />\n                                    </gmd:dateType>\n                                </gmd:CI_Date>\n                            </gmd:date>\n                            <gmd:identifier>\n                                <gmd:MD_Identifier>\n                                    <gmd:code>\n                                        <gmx:Anchor xlink:href=\"http://geonetwork.mutu.local/geonetwork/srv/eng/thesaurus.download?ref=external.theme.rm_diffusion\">geonetwork.thesaurus.external.theme.rm_diffusion</gmx:Anchor>\n                                    </gmd:code>\n                                </gmd:MD_Identifier>\n                            </gmd:identifier>\n                        </gmd:CI_Citation>\n                    </gmd:thesaurusName>\n                </gmd:MD_Keywords>\n            </gmd:descriptiveKeywords>\n            <gmd:resourceConstraints>\n                <gmd:MD_LegalConstraints>\n                    <gmd:useLimitation>\n                        <gco:CharacterString>Réutilisation libre sous réserve de la mention obligatoire suivante : \"source : DDTM 35\"</gco:CharacterString>\n                    </gmd:useLimitation>\n                    <gmd:useLimitation>\n                        <gco:CharacterString>Licence Ouverte Etalab v2.0</gco:CharacterString>\n                    </gmd:useLimitation>\n                    <gmd:accessConstraints>\n                        <gmd:MD_RestrictionCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_RestrictionCode\" codeListValue=\"otherRestrictions\" />\n                    </gmd:accessConstraints>\n                    <gmd:useConstraints>\n                        <gmd:MD_RestrictionCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_RestrictionCode\" codeListValue=\"license\" />\n                    </gmd:useConstraints>\n                    <gmd:otherConstraints>\n                        <gco:CharacterString>Pas de restriction d’accès public</gco:CharacterString>\n                    </gmd:otherConstraints>\n                </gmd:MD_LegalConstraints>\n            </gmd:resourceConstraints>\n            <gmd:spatialResolution>\n                <gmd:MD_Resolution>\n                    <gmd:distance>\n                        <gco:Distance uom=\"m\">10</gco:Distance>\n                    </gmd:distance>\n                </gmd:MD_Resolution>\n            </gmd:spatialResolution>\n            <gmd:language>\n                <gmd:LanguageCode codeList=\"http://www.loc.gov/standards/iso639-2/\" codeListValue=\"fre\" />\n            </gmd:language>\n            <gmd:characterSet>\n                <gmd:MD_CharacterSetCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_CharacterSetCode\" codeListValue=\"utf8\" />\n            </gmd:characterSet>\n            <gmd:topicCategory>\n                <gmd:MD_TopicCategoryCode>health</gmd:MD_TopicCategoryCode>\n            </gmd:topicCategory>\n            <gmd:extent>\n                <gmd:EX_Extent>\n                    <gmd:geographicElement>\n                        <gmd:EX_GeographicBoundingBox>\n                            <gmd:westBoundLongitude>\n                                <gco:Decimal>-1.96327</gco:Decimal>\n                            </gmd:westBoundLongitude>\n                            <gmd:eastBoundLongitude>\n                                <gco:Decimal>-1.46558</gco:Decimal>\n                            </gmd:eastBoundLongitude>\n                            <gmd:southBoundLatitude>\n                                <gco:Decimal>47.93192</gco:Decimal>\n                            </gmd:southBoundLatitude>\n                            <gmd:northBoundLatitude>\n                                <gco:Decimal>48.30684</gco:Decimal>\n                            </gmd:northBoundLatitude>\n                        </gmd:EX_GeographicBoundingBox>\n                    </gmd:geographicElement>\n                </gmd:EX_Extent>\n            </gmd:extent>\n        </gmd:MD_DataIdentification>\n    </gmd:identificationInfo>\n    <gmd:distributionInfo xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:MD_Distribution>\n            <gmd:distributionFormat>\n                <gmd:MD_Format>\n                    <gmd:name>\n                        <gco:CharacterString>GML</gco:CharacterString>\n                    </gmd:name>\n                    <gmd:version>\n                        <gco:CharacterString>3.2.1</gco:CharacterString>\n                    </gmd:version>\n                </gmd:MD_Format>\n            </gmd:distributionFormat>\n            <gmd:transferOptions>\n                <gmd:MD_DigitalTransferOptions>\n                    <gmd:onLine>\n                        <gmd:CI_OnlineResource>\n                            <gmd:linkage>\n                                <gmd:URL>https://public.sig.rennesmetropole.fr/geoserver/ows?service=wms&amp;request=GetCapabilities</gmd:URL>\n                            </gmd:linkage>\n                            <gmd:protocol>\n                                <gco:CharacterString>OGC:WMS</gco:CharacterString>\n                            </gmd:protocol>\n                            <gmd:name>\n                                <gco:CharacterString>sec_sanit:ddtm_csv_secteurs_affectes</gco:CharacterString>\n                            </gmd:name>\n                            <gmd:identifier>\n                                <gmd:MD_Identifier>\n                                    <gmd:code>\n                                        <gco:CharacterString>\n                            c186b44e-d1c1-49d0-8c53-d88023e3d37b\n                        </gco:CharacterString>\n                                    </gmd:code>\n                                    <gco:CharacterString>\n                    </gco:CharacterString>\n                                </gmd:MD_Identifier>\n                            </gmd:identifier>\n                            <gmd:description>\n                                <gco:CharacterString>Classement sonore des infrastructures routières sur Rennes Métropole : secteurs affectés</gco:CharacterString>\n                            </gmd:description>\n                        </gmd:CI_OnlineResource>\n                    </gmd:onLine>\n                    <gmd:onLine>\n                        <gmd:CI_OnlineResource>\n                            <gmd:linkage>\n                                <gmd:URL>https://public.sig.rennesmetropole.fr/geoserver/ows?service=wfs&amp;request=GetCapabilities</gmd:URL>\n                            </gmd:linkage>\n                            <gmd:protocol>\n                                <gco:CharacterString>OGC:WFS</gco:CharacterString>\n                            </gmd:protocol>\n                            <gmd:name>\n                                <gco:CharacterString>sec_sanit:ddtm_csv_secteurs_affectes</gco:CharacterString>\n                            </gmd:name>\n                            <gmd:description>\n                                <gco:CharacterString>Classement sonore des infrastructures routières sur Rennes Métropole : secteurs affectés</gco:CharacterString>\n                            </gmd:description>\n                        </gmd:CI_OnlineResource>\n                    </gmd:onLine>\n                </gmd:MD_DigitalTransferOptions>\n            </gmd:transferOptions>\n            <gmd:transferOptions>\n                <gmd:MD_DigitalTransferOptions>\n                    <gmd:onLine>\n                        <gmd:CI_OnlineResource>\n                            <gmd:linkage>\n                                <gmd:URL>https://data.rennesmetropole.fr/explore/dataset/classement-sonore-voies-secteurs-affectes</gmd:URL>\n                            </gmd:linkage>\n                            <gmd:protocol>\n                                <gco:CharacterString>WWW:LINK-1.0-http--link</gco:CharacterString>\n                            </gmd:protocol>\n                            <gmd:description>\n                                <gco:CharacterString>Site open data de Rennes Métropole</gco:CharacterString>\n                            </gmd:description>\n                        </gmd:CI_OnlineResource>\n                    </gmd:onLine>\n                </gmd:MD_DigitalTransferOptions>\n            </gmd:transferOptions>\n            <gmd:transferOptions>\n                <gmd:MD_DigitalTransferOptions>\n                    <gmd:onLine>\n                        <gmd:CI_OnlineResource>\n                            <gmd:linkage>\n                                <gmd:URL>https://public.sig.rennesmetropole.fr/geoserver/ows?service=wfs&amp;version=2.0.0&amp;request=getfeature&amp;typename=sec_sanit:ddtm_csv_secteurs_affectes&amp;srsname=EPSG:3948&amp;outputformat=GML3&amp;format_options=charset:utf-8</gmd:URL>\n                            </gmd:linkage>\n                            <gmd:protocol>\n                                <gco:CharacterString>OGC:GML</gco:CharacterString>\n                            </gmd:protocol>\n                            <gmd:description>\n                                <gco:CharacterString>Lien de téléchargement direct (GML3 EPSG:3948)</gco:CharacterString>\n                            </gmd:description>\n                        </gmd:CI_OnlineResource>\n                    </gmd:onLine>\n                </gmd:MD_DigitalTransferOptions>\n            </gmd:transferOptions>\n        </gmd:MD_Distribution>\n    </gmd:distributionInfo>\n    <gmd:dataQualityInfo xmlns:gfc=\"http://www.isotc211.org/2005/gfc\" xmlns:geonet=\"http://www.fao.org/geonetwork\">\n        <gmd:DQ_DataQuality>\n            <gmd:scope>\n                <gmd:DQ_Scope>\n                    <gmd:level>\n                        <gmd:MD_ScopeCode codeListValue=\"dataset\" codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_ScopeCode\" />\n                    </gmd:level>\n                </gmd:DQ_Scope>\n            </gmd:scope>\n            <gmd:report>\n                <gmd:DQ_DomainConsistency>\n                    <gmd:result>\n                        <gmd:DQ_ConformanceResult>\n                            <gmd:specification>\n                                <gmd:CI_Citation>\n                                    <gmd:title>\n                                        <gco:CharacterString>D2.8.III.5 INSPIRE Data Specification on Human Health and Safety – Technical Guidelines - v 3.0</gco:CharacterString>\n                                    </gmd:title>\n                                    <gmd:date>\n                                        <gmd:CI_Date>\n                                            <gmd:date>\n                                                <gco:Date>2013-12-10</gco:Date>\n                                            </gmd:date>\n                                            <gmd:dateType>\n                                                <gmd:CI_DateTypeCode codeList=\"http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#CI_DateTypeCode\" codeListValue=\"publication\" />\n                                            </gmd:dateType>\n                                        </gmd:CI_Date>\n                                    </gmd:date>\n                                </gmd:CI_Citation>\n                            </gmd:specification>\n                            <gmd:explanation>\n                                <gco:CharacterString>non testé</gco:CharacterString>\n                            </gmd:explanation>\n                            <gmd:pass>\n                                <gco:Boolean>false</gco:Boolean>\n                            </gmd:pass>\n                        </gmd:DQ_ConformanceResult>\n                    </gmd:result>\n                </gmd:DQ_DomainConsistency>\n            </gmd:report>\n            <gmd:lineage>\n                <gmd:LI_Lineage>\n                    <gmd:statement>\n                        <gco:CharacterString>Données fournies par la DDTM35. Pas de métadonnée.\nsecteurs affectéss probablement basés sur la BD Topo de l'IGN.</gco:CharacterString>\n                    </gmd:statement>\n                </gmd:LI_Lineage>\n            </gmd:lineage>\n        </gmd:DQ_DataQuality>\n    </gmd:dataQualityInfo>\n</gmd:MD_Metadata>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/resources/?objectStandard=gmd&format=xml",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources",
								""
							],
							"query": [
								{
									"key": "objectStandard",
									"value": "gmd"
								},
								{
									"key": "format",
									"value": "xml"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete meta GMD-XML",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete GMDXML meta\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    // pm.expect(responseJson.n).to.eq(2);",
									"    // pm.expect(responseJson.ok).to.eq(1);",
									"    pm.expect(responseJson.deletedCount).to.eq(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    \"{{softMetaGmdXml1Id}}\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/resources/deletion",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources",
								"deletion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete media GMD-XML",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete GMDXML media\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    // pm.expect(responseJson.n).to.eq(2);",
									"    // pm.expect(responseJson.ok).to.eq(1);",
									"    pm.expect(responseJson.deletedCount).to.eq(3);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    \"{{softMediaGmdXml1Id}}\",\n    \"{{softMediaGmdXml2Id}}\",\n    \"{{softMediaGmdXml3Id}}\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/media/deletion",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"media",
								"deletion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete org GMD-XML",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete GMDXML organizations\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    // pm.expect(responseJson.n).to.eq(2);",
									"    // pm.expect(responseJson.ok).to.eq(1);",
									"    pm.expect(responseJson.deletedCount).to.eq(2);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    \"{{softOrgGmdXml1Id}}\",\n    \"{{softOrgGmdXml2Id}}\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/organizations/deletion",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"organizations",
								"deletion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete contacts GMD-XML",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete GMD XML contacts\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    // pm.expect(responseJson.n).to.eq(2);",
									"    // pm.expect(responseJson.ok).to.eq(1);",
									"    pm.expect(responseJson.deletedCount).to.eq(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    \"{{softContactGmdXml1Id}}\",\n    \"{{softContactGmdXml2Id}}\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/contacts/deletion",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"contacts",
								"deletion"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "08. Add/edit/get reports",
			"item": [
				{
					"name": "Check portal connection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Testing portal connection\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    if(pm.response.text() === pm.globals.get('noPortalMsg')) return true",
									"    const token = pm.response.json().access_token",
									"    pm.expect(!!match.jwt(token)).to.be.true       ",
									"    pm.collectionVariables.set(pm.variables.get('portalJwtName'),token)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/portal/token",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"portal",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUB] Add report 1 (meta 1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create Integration report 1 for metadata 1\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    // console.log(responseJson);",
									"    const metaId = pm.variables.get('softMeta1Id');",
									"    const reportId = pm.variables.get('softReport1Id');",
									"    pm.expect(responseJson.report_id).to.eq(reportId);",
									"    pm.expect(responseJson.resource_id).to.eq(metaId);",
									"    pm.expect(responseJson.integration_status).to.eq(\"KO\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('softReport1Id', rand.get('{{$randomUUID}}'));",
									"pm.collectionVariables.set('dateReport', time.now());",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{{{portalJwtName}}}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"report_id\": \"{{softReport1Id}}\",\n    \"resource_id\": \"{{softMeta1Id}}\",\n    \"resource_title\": \"Test report\",\n    \"submission_date\": \"{{dateReport}}\",\n    \"treatment_date\": \"{{dateReport}}\",\n    \"integration_status\": \"KO\",\n    \"version\": \"{{apiVersion}}\",\n    \"comment\": \"soft test report 1\",\n    \"collection_tag\": \"{{stamp}}\",\n    \"integration_errors\": [\n        {\n            \"error_code\": \"ERR-500\",\n            \"error_message\": \"Une erreur technique est survenue. Veuillez contacter l'administrateur Rudi pour analyser l'erreur.\",\n            \"_id\": \"63999e55e3ff81f445ea71ee\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogServer}}/resources/{{softMeta1Id}}/report",
							"host": [
								"{{catalogServer}}"
							],
							"path": [
								"resources",
								"{{softMeta1Id}}",
								"report"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUB] Add report 2 (meta 1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create Integration report 2 for metadata 1\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    // console.log(responseJson);",
									"    const metaId = pm.variables.get('softMeta1Id');",
									"    const reportId = pm.variables.get('softReport2Id');",
									"    pm.expect(responseJson.report_id).to.eq(reportId);",
									"    pm.expect(responseJson.resource_id).to.eq(metaId);",
									"    pm.expect(responseJson.integration_status).to.eq(\"OK\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('softReport2Id', rand.get('{{$randomUUID}}'));",
									"pm.collectionVariables.set('dateReport', time.now());",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{{{portalJwtName}}}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"report_id\": \"{{softReport2Id}}\",\n    \"resource_id\": \"{{softMeta1Id}}\",\n    \"resource_title\": \"Test report\",\n    \"submission_date\": \"{{dateReport}}\",\n    \"treatment_date\": \"{{dateReport}}\",\n    \"integration_status\": \"OK\",\n    \"version\": \"{{apiVersion}}\",\n    \"comment\": \"soft test report 2\",\n    \"collection_tag\": \"{{stamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogServer}}/resources/{{softMeta1Id}}/report",
							"host": [
								"{{catalogServer}}"
							],
							"path": [
								"resources",
								"{{softMeta1Id}}",
								"report"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUB] Add report unkown meta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create Integration report for unkown metadata\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    // console.log(responseJson);",
									"    const metaId = pm.variables.get('unkownMetaId');",
									"    const reportId = pm.variables.get('softReport3Id');",
									"    pm.expect(responseJson.report_id).to.eq(reportId);",
									"    pm.expect(responseJson.resource_id).to.eq(metaId);",
									"    pm.expect(responseJson.integration_status).to.eq(\"KO\");",
									"    pm.expect(responseJson.report_treatment_error.error_type).to.eq(\"Object not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('unkownMetaId', rand.get('{{$randomUUID}}'));",
									"pm.collectionVariables.set('softReport3Id', rand.get('{{$randomUUID}}'));",
									"pm.collectionVariables.set('dateReport', time.now());",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{{{portalJwtName}}}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"report_id\": \"{{softReport3Id}}\",\n    \"resource_id\": \"{{unkownMetaId}}\",\n    \"resource_title\": \"unkown report\",\n    \"submission_date\": \"{{dateReport}}\",\n    \"treatment_date\": \"{{dateReport}}\",\n    \"integration_status\": \"KO\",\n    \"version\": \"{{apiVersion}}\",\n    \"comment\": \"test report for unkown metadata\",\n    \"collection_tag\": \"{{stamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogServer}}/resources/{{unkownMetaId}}/report",
							"host": [
								"{{catalogServer}}"
							],
							"path": [
								"resources",
								"{{unkownMetaId}}",
								"report"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUB] Get all reports (meta 1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"2 integration reports created for metadata 1\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const reportList = pm.response.json();",
									"    pm.expect(reportList.length).to.eq(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{{{portalJwtName}}}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/v1/resources/{{softMeta1Id}}/report",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"v1",
								"resources",
								"{{softMeta1Id}}",
								"report"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit report 2 (meta 1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Edit integration report 2 for metadata 1\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    // console.log(responseJson);",
									"    const metaId = pm.variables.get('softMeta1Id');",
									"    const reportId = pm.variables.get('softReport2Id');",
									"    const apiVersion = pm.variables.get('apiVersion');",
									"    pm.expect(responseJson.report_id).to.eq(reportId);",
									"    pm.expect(responseJson.resource_id).to.eq(metaId);",
									"    pm.expect(responseJson.integration_status).to.eq(\"OK\");",
									"    pm.expect(responseJson.version).to.eq(apiVersion);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"report_id\": \"{{softReport2Id}}\",\n    \"resource_id\": \"{{softMeta1Id}}\",\n    \"submission_date\": \"{{dateReport}}\",\n    \"comment\": \"edit\",\n    \"method\": \"POST\",\n    \"resource_title\": \"Test de RUDI en local 44\",\n    \"treatment_date\": \"{{now}}\",\n    \"integration_status\": \"OK\",\n    \"version\": \"{{apiVersion}}\",\n    \"collection_tag\": \"{{stamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/resources/{{softMeta1Id}}/reports",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources",
								"{{softMeta1Id}}",
								"reports"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUB] Get report 2 (meta 1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Edition of integration report 2 saved (access from metadata 1)\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    // console.log(responseJson);",
									"    const metaId = pm.variables.get('softMeta1Id');",
									"    const reportId = pm.variables.get('softReport2Id');",
									"    const apiVersion = pm.variables.get('apiVersion');",
									"    pm.expect(responseJson.report_id).to.eq(reportId);",
									"    pm.expect(responseJson.resource_id).to.eq(metaId);",
									"    pm.expect(responseJson.integration_status).to.eq(\"OK\");",
									"    pm.expect(responseJson.version).to.eq(apiVersion);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{{{portalJwtName}}}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/v1/resources/{{softMeta1Id}}/report/{{softReport2Id}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"v1",
								"resources",
								"{{softMeta1Id}}",
								"report",
								"{{softReport2Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get report 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Edition of integration report 2 saved (direct access)\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    // console.log(responseJson);",
									"    const metaId = pm.variables.get('softMeta1Id');",
									"    const reportId = pm.variables.get('softReport2Id');",
									"    const apiVersion = pm.variables.get('apiVersion');",
									"    pm.expect(responseJson.report_id).to.eq(reportId);",
									"    pm.expect(responseJson.resource_id).to.eq(metaId);",
									"    pm.expect(responseJson.integration_status).to.eq(\"OK\");",
									"    pm.expect(responseJson.version).to.eq(apiVersion);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/reports/{{softReport2Id}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"reports",
								"{{softReport2Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all test reports",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"2 integration reports created in total\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const reportList = pm.response.json();",
									"    pm.expect(reportList.length).to.gte(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/reports?collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"reports"
							],
							"query": [
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all reports",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"2 integration reports created in total\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const reportList = pm.response.json();",
									"    pm.expect(reportList.length).to.gte(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/reports?sort_by=-updatedAt",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"reports"
							],
							"query": [
								{
									"key": "sort_by",
									"value": "-updatedAt"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "09. Clean",
			"item": [
				{
					"name": "Delete org 1 prevented",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Organization 1 referenced\", () => {",
									"    pm.expect(pm.response.code).to.eql(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/organizations/{{softOrg1Id}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"organizations",
								"{{softOrg1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete contact 1 prevented",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Contact 1 deleted\", () => {",
									"    pm.expect(pm.response.code).to.eql(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/contacts/{{softContact1Id}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"contacts",
								"{{softContact1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete reports 1, 2 & 3 (meta 1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete report 1 & 2\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    // pm.expect(responseJson.n).to.eq(3);",
									"    // pm.expect(responseJson.ok).to.eq(1);",
									"    pm.expect(responseJson.deletedCount).to.eq(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    \"{{softReport1Id}}\",\n    \"{{softReport2Id}}\",\n    \"{{softReport3Id}}\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/reports/deletion",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"reports",
								"deletion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete meta 1, 2 & 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete metadata 1, 2 & 4\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    // pm.expect(responseJson.n).to.eq(2);",
									"    // pm.expect(responseJson.ok).to.eq(1);",
									"    pm.expect(responseJson.deletedCount).to.eq(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    \"{{softMeta1Id}}\",\n    \"{{softMeta2Id}}\",\n    \"{{softMeta4Id}}\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/resources/deletion",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources",
								"deletion"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUB] No metadata left",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const stamp = pm.variables.get('stamp')",
									"pm.test(`No metadata left with '${stamp}' stamp'`, () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const publicMetadataList = pm.response.json();",
									"    pm.expect(publicMetadataList.total).to.eq(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{{{portalJwtName}}}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/v1/resources?collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"v1",
								"resources"
							],
							"query": [
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add meta 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Metadata 1 created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    // console.log(responseJson);",
									"    const metaId = pm.variables.get('softMeta1Id');",
									"    pm.expect(responseJson.global_id).to.eq(metaId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"global_id\": \"{{softMeta1Id}}\",\n    \"local_id\": \"testingID {{softMeta1Id}}\",\n    \"doi\": \"10.1007/s00223-003-0070-444/{{softMeta1Id}}\",\n    \"resource_title\": \"Test de RUDI en local {{softMeta1Id}}\",\n    \"synopsis\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Courte description de RUDI en local 4444\"\n        }\n    ],\n    \"summary\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Mon résumé chg 4\"\n        }\n    ],\n    \"collection_tag\": \"{{stamp}}\",\n    \"purpose\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"{{stamp}}\"\n        }\n    ],\n    \"theme\": \"energyNetworks\",\n    \"keywords\": [\n        \"energy_consommation\",\n        \"electricity\"\n    ],\n    \"geography\": {\n        \"bounding_box\": {\n            \"west_longitude\": -1.677803,\n            \"east_longitude\": -1.677803,\n            \"north_latitude\": 48.112834,\n            \"south_latitude\": 48.112834\n        }\n    },\n    \"temporal_spread\": {\n        \"start_date\": \"2021-02-12T10:33:15Z\"\n    },\n    \"resource_languages\": [\n        \"fr\"\n    ],\n    \"producer\": {\n        \"organization_id\": \"{{softOrg1Id}}\",\n        \"organization_name\": \"{{softOrg1Name}}\",\n        \"organization_address\": \"{{softOrg1Address}}\",\n        \"collection_tag\": \"{{stamp}}\"\n    },\n    \"contacts\": [\n        {\n            \"contact_id\": \"{{softContact1Id}}\",\n            \"contact_name\": \"M. Fazot\",\n            \"email\": \"gpizj@irisa.fr\",\n            \"collection_tag\": \"{{stamp}}\"\n        },\n        {\n            \"contact_id\": \"{{softContact2Id}}\",\n            \"contact_name\": \"Mme. Feyza\",\n            \"email\": \"feyza@irisa.fr\",\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"metadata_info\": {\n        \"api_version\": \"{{apiVersion}}\",\n        \"metadata_provider\": {\n            \"organization_id\": \"{{softOrg1Id}}\",\n            \"collection_tag\": \"{{stamp}}\"\n        },\n        \"metadata_contacts\": [\n            {\n                \"contact_id\": \"{{softContact2Id}}\",\n                \"collection_tag\": \"{{stamp}}\"\n            }\n        ]\n    },\n    \"dataset_dates\": {\n        \"created\": \"{{now}}\",\n        \"updated\": \"{{now}}\",\n        \"published\": \"{{now}}\"\n    },\n    \"storage_status\": \"online\",\n    \"access_condition\": {\n        \"licence\": {\n            \"licence_type\": \"STANDARD\",\n            \"licence_label\": \"{{softLicence}}\"\n        }\n    },\n    \"available_formats\": [\n        {\n            \"media_type\": \"FILE\",\n            \"media_id\": \"{{softMedia1Id}}\",\n            \"connector\": {\n                \"url\": \"https://app.swaggerhub.com/apis/OlivierMartineau/RUDI-PRODUCER/{{apiVersion}}\"\n            },\n            \"file_type\": \"application/json\",\n            \"file_size\": 59016,\n            \"checksum\": {\n                \"algo\": \"MD5\",\n                \"hash\": \"4c9ee0f14e835927a1bbafde0eb89fb3\"\n            },\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/resources",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete meta 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Metadata 1 deleted\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    const metaId = pm.variables.get('softMeta1Id');",
									"    pm.expect(responseJson.global_id).to.eq(metaId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/resources/{{softMeta1Id}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources",
								"{{softMeta1Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete media 1 & 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete media 1 & 2\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    // pm.expect(responseJson.n).to.eq(2);",
									"    // pm.expect(responseJson.ok).to.eq(1);",
									"    pm.expect(responseJson.deletedCount).to.eq(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    \"{{softMedia1Id}}\",\n    \"{{softMedia2Id}}\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/media/deletion",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"media",
								"deletion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete org 1 & 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete organizations 1 & 2\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    // pm.expect(responseJson.n).to.eq(2);",
									"    // pm.expect(responseJson.ok).to.eq(1);",
									"    pm.expect(responseJson.deletedCount).to.eq(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    \"{{softOrg1Id}}\",\n    \"{{softOrg2Id}}\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/organizations/deletion",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"organizations",
								"deletion"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete contact 1, 2 & 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete contacts 1, 2 & 3\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    // pm.expect(responseJson.n).to.eq(3);",
									"    // pm.expect(responseJson.ok).to.eq(1);",
									"    pm.expect(responseJson.deletedCount).to.eq(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    \"{{softContact1Id}}\",\n    \"{{softContact2Id}}\",\n    \"{{softContact3Id}}\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/contacts/deletion",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"contacts",
								"deletion"
							]
						}
					},
					"response": []
				},
				{
					"name": "No metadata left (count)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const stamp = pm.variables.get('stamp')",
									"pm.test(`No metadata left with '${stamp}' stamp'`, () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const metadataList = pm.response.json();",
									"    pm.expect(metadataList.length).to.eq(0)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/resources?count_by=collection_tag&collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							],
							"query": [
								{
									"key": "count_by",
									"value": "collection_tag"
								},
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add meta 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Metadata 1 created\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    // console.log(responseJson);",
									"    const metaId = pm.variables.get('softMeta1Id');",
									"    pm.expect(responseJson.global_id).to.eq(metaId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"global_id\": \"{{softMeta1Id}}\",\n    \"local_id\": \"testingID {{softMeta1Id}}\",\n    \"doi\": \"10.1007/s00223-003-0070-444/{{softMeta1Id}}\",\n    \"resource_title\": \"Test de RUDI en local {{softMeta1Id}}\",\n    \"synopsis\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Courte description de RUDI en local 4444\"\n        }\n    ],\n    \"summary\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"Mon résumé chg 4\"\n        }\n    ],\n    \"collection_tag\": \"{{stamp}}\",\n    \"purpose\": [\n        {\n            \"lang\": \"fr\",\n            \"text\": \"{{stamp}}\"\n        }\n    ],\n    \"theme\": \"energyNetworks\",\n    \"keywords\": [\n        \"energy_consommation\",\n        \"electricity\"\n    ],\n    \"geography\": {\n        \"bounding_box\": {\n            \"west_longitude\": -1.677803,\n            \"east_longitude\": -1.677803,\n            \"north_latitude\": 48.112834,\n            \"south_latitude\": 48.112834\n        }\n    },\n    \"temporal_spread\": {\n        \"start_date\": \"2021-02-12T10:33:15Z\"\n    },\n    \"resource_languages\": [\n        \"fr\"\n    ],\n    \"producer\": {\n        \"organization_id\": \"{{softOrg1Id}}\",\n        \"organization_name\": \"{{softOrg1Name}}\",\n        \"organization_address\": \"{{softOrg1Address}}\",\n        \"collection_tag\": \"{{stamp}}\"\n    },\n    \"contacts\": [\n        {\n            \"contact_id\": \"{{softContact1Id}}\",\n            \"contact_name\": \"M. Fazzo\",\n            \"email\": \"gpizj@pzorzjeg.gt\",\n            \"collection_tag\": \"{{stamp}}\"\n        },\n        {\n            \"contact_id\": \"{{softContact2Id}}\",\n            \"contact_name\": \"Mme. Feyza\",\n            \"email\": \"feyza@irisa.fr\",\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ],\n    \"metadata_info\": {\n        \"api_version\": \"{{apiVersion}}\",\n        \"metadata_provider\": {\n            \"organization_id\": \"{{softOrg1Id}}\",\n            \"collection_tag\": \"{{stamp}}\"\n        },\n        \"metadata_contacts\": [\n            {\n                \"contact_id\": \"{{softContact2Id}}\",\n                \"collection_tag\": \"{{stamp}}\"\n            }\n        ]\n    },\n    \"dataset_dates\": {\n        \"created\": \"{{now}}\",\n        \"updated\": \"{{now}}\",\n        \"published\": \"{{now}}\"\n    },\n    \"storage_status\": \"online\",\n    \"access_condition\": {\n        \"licence\": {\n            \"licence_type\": \"STANDARD\",\n            \"licence_label\": \"{{softLicence}}\"\n        }\n    },\n    \"available_formats\": [\n        {\n            \"media_type\": \"FILE\",\n            \"media_id\": \"{{softMedia1Id}}\",\n            \"connector\": {\n                \"url\": \"https://app.swaggerhub.com/apis/OlivierMartineau/RUDI-PRODUCER/{{apiVersion}}\"\n            },\n            \"file_type\": \"application/json\",\n            \"file_size\": 59016,\n            \"checksum\": {\n                \"algo\": \"MD5\",\n                \"hash\": \"4c9ee0f14e835927a1bbafde0eb89fb3\"\n            },\n            \"collection_tag\": \"{{stamp}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/resources",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Meta 1 added",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const stamp = pm.variables.get('stamp')",
									"pm.test(`Meta 1 added with '${stamp}' stamp'`, () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const metadataList = pm.response.json();",
									"    pm.expect(metadataList.length).to.eq(1)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/resources?collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							],
							"query": [
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete meta with stamp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const stamp = pm.variables.get('stamp')",
									"pm.test(`Delete metadata with '${stamp}' stamp`, () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    // pm.expect(responseJson.n).to.eq(1);",
									"    // pm.expect(responseJson.ok).to.eq(1);",
									"    pm.expect(responseJson.deletedCount).to.eq(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    \"{{softMeta1Id}}\",\n    \"{{softMeta2Id}}\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/resources?collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							],
							"query": [
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete orgs with stamp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const stamp = pm.variables.get('stamp')",
									"pm.test(`Delete orgs with '${stamp}' stamp`, () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    // pm.expect(responseJson.n).to.eq(1);",
									"    // pm.expect(responseJson.ok).to.eq(1);",
									"    pm.expect(responseJson.deletedCount).to.eq(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    \"{{softMeta1Id}}\",\n    \"{{softMeta2Id}}\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/organizations?collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"organizations"
							],
							"query": [
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete contacts with stamp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const stamp = pm.variables.get('stamp')",
									"pm.test(`Delete contacts with '${stamp}' stamp`, () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    // pm.expect(responseJson.n).to.eq(2);",
									"    // pm.expect(responseJson.ok).to.eq(1);",
									"    pm.expect(responseJson.deletedCount).to.eq(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    \"{{softMeta1Id}}\",\n    \"{{softMeta2Id}}\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/contacts?collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"contacts"
							],
							"query": [
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete media with stamp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const stamp = pm.variables.get('stamp')",
									"pm.test(`Delete media with '${stamp}' stamp`, () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    // pm.expect(responseJson.n).to.eq(2);",
									"    // pm.expect(responseJson.ok).to.eq(1);",
									"    pm.expect(responseJson.deletedCount).to.eq(6);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    \"{{softMeta1Id}}\",\n    \"{{softMeta2Id}}\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/media?collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"media"
							],
							"query": [
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete reports with stamp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const stamp = pm.variables.get('stamp')",
									"pm.test(`Delete reports with '${stamp}' stamp`, () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const responseJson = pm.response.json();",
									"    // pm.expect(responseJson.n).to.eq(2);",
									"    // pm.expect(responseJson.ok).to.eq(1);",
									"    pm.expect(responseJson.deletedCount).to.eq(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/reports?collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"reports"
							],
							"query": [
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "No metadata left",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const stamp = pm.variables.get('stamp')",
									"pm.test(`No metadata left with '${stamp}' stamp'`, () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const metadataList = pm.response.json();",
									"    pm.expect(metadataList.length).to.eq(0)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/resources?collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"resources"
							],
							"query": [
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "No contact left",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const stamp = pm.variables.get('stamp')",
									"pm.test(`No contact left with '${stamp}' stamp'`, () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const metadataList = pm.response.json();",
									"    pm.expect(metadataList.length).to.eq(0)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/contacts?collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"contacts"
							],
							"query": [
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "No org left",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const stamp = pm.variables.get('stamp')",
									"pm.test(`No organization left with '${stamp}' stamp'`, () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const metadataList = pm.response.json();",
									"    pm.expect(metadataList.length).to.eq(0)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/organizations?collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"organizations"
							],
							"query": [
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "No report left",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const stamp = pm.variables.get('stamp')",
									"pm.test(`No report left with '${stamp}' stamp'`, () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const metadataList = pm.response.json();",
									"    pm.expect(metadataList.length).to.eq(0)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/reports?collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"reports"
							],
							"query": [
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "10. Public keys",
			"item": [
				{
					"name": "CLEAN previous tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Deleting all public keys\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const res = pm.response.json()",
									"    pm.expect(res.acknowledged).to.be.true",
									"    pm.expect(res.deletedCount).to.gte(0)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/pubKeys?collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"pubKeys"
							],
							"query": [
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ADD public key: PEM, no URL ⇒ OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creating a public key\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const pubKey = pm.response.json()",
									"    pm.expect(pubKey.name).to.be.not.null",
									"    pm.expect(pubKey.url).to.be.not.null",
									"    pm.expect(pubKey.pem).to.be.not.null",
									"    pm.expect(pubKey.type).to.be.not.null",
									"    pm.expect(pubKey.collection_tag).to.eql(pm.variables.get('stamp'))",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('pubKeyName',rand.randomize('pubKeyName'))",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{pubKeyName}}\",\n    \"pem\": \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBQ/tgB/vCQxkgSlzztRAmE4dNsOo1HzLXcqTOtDIhi rudi_prod_manager\",\n    \"collection_tag\": \"{{stamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/pub_keys",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"pub_keys"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADD public key: PEM, no URL ⇒ OK Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Editing a public key\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const pubKey = pm.response.json()",
									"    pm.expect(pubKey.name).to.be.not.null",
									"    pm.expect(pubKey.url).to.be.not.null",
									"    pm.expect(pubKey.pem).to.be.not.null",
									"    pm.expect(pubKey.type).to.be.not.null",
									"    pm.expect(pubKey.collection_tag).to.eql(pm.variables.get('stamp'))",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{pubKeyName}}\",\n    \"pem\": \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBQ/tgB/vCQxkgSlzztRAmE4dNsOo1HzLXcqTOtDIhi prod_manager\",\n    \"collection_tag\": \"{{stamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/pub_keys",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"pub_keys"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADD public key: PEM, no URL ⇒ OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creating a new public key with PUT\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const pubKey = pm.response.json()",
									"    pm.expect(pubKey.name).to.be.not.null",
									"    pm.expect(pubKey.url).to.be.not.null",
									"    pm.expect(pubKey.pem).to.be.not.null",
									"    pm.expect(pubKey.type).to.be.not.null",
									"    pm.expect(pubKey.collection_tag).to.eql(pm.variables.get('stamp'))",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('pubKeyName',rand.randomize('pubKeyName'))",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{pubKeyName}}\",\n    \"pem\": \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBQ/tgB/vCQxkgSlzztRAmE4dNsOo1HzLXcqTOtDIhi rudi_prod_manager\",\n    \"collection_tag\":\"{{stamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/pub_keys",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"pub_keys"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST an existing public key fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST an existing public key fails\", () => {",
									"    pm.expect(pm.response.code).to.eql(403);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{pubKeyName}}\",\n    \"pem\": \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBQ/tgB/vCQxkgSlzztRAmE4dNsOo1HzLXcqTOtDIhi rudi_prod_manager\",\n    \"collection_tag\": \"{{stamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/pub_keys",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"pub_keys"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET public keys (admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get all public keys from admin path\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/pub_keys?collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"pub_keys"
							],
							"query": [
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET a public key (admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Getting a public key from admin path\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const pubKey = pm.response.json()",
									"    pm.expect(pubKey.pem).to.be.not.undefined",
									"    pm.expect(pubKey.type).to.be.not.undefined",
									"    pm.expect(pubKey.name).to.be.not.undefined",
									"    pm.expect(pubKey.url).to.be.not.undefined",
									"    pm.expect(pubKey.collection_tag).to.be.not.undefined",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/pubKeys/{{pubKeyName}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"pubKeys",
								"{{pubKeyName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET a public key (public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Getting a public key from public path\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const pubKey = pm.response.json()",
									"    pm.expect(pubKey.url).to.be.not.undefined",
									"    pm.expect(pubKey.pem).to.be.not.undefined",
									"    pm.expect(pubKey.key).to.be.not.undefined",
									"    pm.expect(pubKey.type).to.be.not.undefined",
									"    pm.expect(pubKey.name).to.be.undefined",
									"    pm.expect(pubKey.collection_tag).to.be.undefined",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/v1/pub_keys/{{pubKeyName}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"v1",
								"pub_keys",
								"{{pubKeyName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET public keys (public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Throwing an error when creating a public key without name\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/pub_keys?collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"pub_keys"
							],
							"query": [
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET a public key PEM (admin API)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Getting a public key property\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const pem = pm.response.stream.toString('utf8');",
									"    pm.expect(pem).to.be.not.null",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/pub_keys/{{pubKeyName}}/pem",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"pub_keys",
								"{{pubKeyName}}",
								"pem"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET a public key PEM (public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Getting a public key property\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const pem = pm.response.stream.toString('utf8');",
									"    pm.expect(pem).to.be.not.null",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/v1/pub_keys/{{pubKeyName}}/pem",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"v1",
								"pub_keys",
								"{{pubKeyName}}",
								"pem"
							]
						}
					},
					"response": []
				},
				{
					"name": "DEL identified public key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Deleting a public key\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const pubKey = pm.response.json()",
									"    pm.expect(pubKey.name).to.be.not.null",
									"    pm.expect(pubKey.url).to.be.not.null",
									"    pm.expect(pubKey.pem).to.be.not.null",
									"    pm.expect(pubKey.type).to.be.not.null",
									"    pm.expect(pubKey.collection_tag).to.eql(pm.variables.get('stamp'))",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/pub_keys/{{pubKeyName}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"pub_keys",
								"{{pubKeyName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DEL all pub keys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Deleting all public keys\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const res = pm.response.json()",
									"    pm.expect(res.acknowledged).to.be.true",
									"    pm.expect(res.deletedCount).to.gt(0)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/pubKeys?collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"pubKeys"
							],
							"query": [
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ERR: URL doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creating a public key\", () => {",
									"    pm.expect(pm.response.code).to.eql(404);",
									"    const error = pm.response.json()",
									"    pm.expect(error.message.substring(0,34)).to.eql(\"Couldn't reach the public key URL:\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('pubKeyName',rand.randomize('pubKeyName'))",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{pubKeyName}}\",\n    \"url\": \"{{catalogUrl}}/v1/pub_keys/{{pubKeyName}}xx\",\n    \"pem\": \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBQ/tgB/vCQxkgSlzztRAmE4dNsOo1HzLXcqTOtDIhi rudi_prod_manager\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/pub_keys",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"pub_keys"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bad names get normalized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bad pubkey names get normalized\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{pubKeyName}}€%©\",\n    \"pem\": \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBQ/tgB/vCQxkgSlzztRAmE4dNsOo1HzLXcqTOtDIhi rudi_prod_manager\",\n    \"collection_tag\":\"{{stamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/pub_keys",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"pub_keys"
							]
						}
					},
					"response": []
				},
				{
					"name": "ERR: pub key already exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Pub key already exists\", () => {",
									"    pm.expect(pm.response.code).to.eql(400);",
									"    const error = pm.response.json()",
									"    pm.expect(error.message.startsWith('A public key already exists with the name ')).to.be.true",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{pubKeyName}}€%©\",\n    \"pem\": \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBQ/tgB/vCQxkgSlzztRAmE4dNsOo1HzLXcqTOtDIhi rudi_prod_manager\",\n    \"collection_tag\":\"{{stamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/pub_keys",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"pub_keys"
							]
						}
					},
					"response": []
				},
				{
					"name": "ERR no name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Throwing an error when creating a public key without name\", () => {",
									"    pm.expect(pm.response.code).to.eql(400);",
									"    const res = pm.response.json()",
									"    pm.expect(res.statusCode).to.eql(400)",
									"    pm.expect(res.message.substring(0, 54)).to.eq(\"La propriété 'name' doit être définie pour l'object : \")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"url\": \"{{catalogUrl}}/admin/pub_keys/52d8ae34-5b34-482f-9a80-645d63f3ba0b\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/pub_keys",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"pub_keys"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADD public key: PEM, no URL ⇒ OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Throwing an error when creating a public key without name\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const pubKey = pm.response.json()",
									"    pm.expect(pubKey.name).to.be.not.null",
									"    pm.expect(pubKey.url).to.be.not.null",
									"    pm.expect(pubKey.pem).to.be.not.null",
									"    pm.expect(pubKey.type).to.be.not.null",
									"    pm.expect(pubKey.collection_tag).to.eql(pm.variables.get('stamp'))",
									"    pm.collectionVariables.set('pubKeyUrl',pubKey.url)",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('pubKeyName',rand.randomize('pubKeyName'))",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{pubKeyName}}\",\n    \"pem\": \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBQ/tgB/vCQxkgSlzztRAmE4dNsOo1HzLXcqTOtDIhi rudi_prod_manager\",\n    \"collection_tag\":\"{{stamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/pub_keys",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"pub_keys"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check portal connection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Testing portal connection\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    if(pm.response.text() === pm.globals.get('noPortalMsg')) return true",
									"    const token = pm.response.json().access_token",
									"    pm.expect(!!match.jwt(token)).to.be.true       ",
									"    pm.collectionVariables.set(pm.variables.get('portalJwtName'),token)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/portal/token",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"portal",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADD public key: no PEM, good URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creating a public key\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const pubKey = pm.response.json()",
									"    pm.expect(pubKey.name).to.be.not.null",
									"    pm.expect(pubKey.url).to.be.not.null",
									"    pm.expect(pubKey.pem).to.be.not.null",
									"    pm.expect(pubKey.type).to.be.not.null",
									"    pm.expect(pubKey.collection_tag).to.eql(pm.variables.get('stamp'))",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"portalxx-{{stamp}}\",\n    \"url\": \"https://gist.githubusercontent.com/OlivierMartineau/a5320c749ce1fac68bec068a6b3d6767/raw/f28f205393a935bff1dd9a90da4c6fb0960d5f5a/gistfile1.txt\",\n    \"prop\": \"value\",\n    \"collection_tag\": \"{{stamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/pub_keys",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"pub_keys"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADD public key: no URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creating a public key without providing a URL\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const pubKey = pm.response.json()",
									"    pm.expect(pubKey.name).to.be.not.null",
									"    pm.expect(pubKey.url).to.be.not.null",
									"    pm.expect(pubKey.pem).to.be.not.null",
									"    pm.expect(pubKey.type).to.be.not.null",
									"    pm.expect(pubKey.collection_tag).to.eql(pm.variables.get('stamp'))",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"locazzszsddl\",\n    \"pem\": \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBQ/tgB/vCQxkgSlzztRAmE4dNsOo1HzLXcqTOtDIhi rudi_prod_manager\",\n    \"collection_tag\": \"{{stamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/pub_keys",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"pub_keys"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADD public key: Portal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creating the Portal key\", () => {",
									"    if (pm.variables.get('skipPortalConnection')) return true",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const pubKey = pm.response.json()",
									"    pm.expect(pubKey.name).to.be.eq('portal-' + pm.variables.get('stamp'))",
									"    pm.expect(pubKey.url).to.be.not.null",
									"    pm.expect(pubKey.pem).to.be.not.null",
									"    pm.expect(pubKey.type).to.be.not.null",
									"    pm.expect(pubKey.collection_tag).to.eql(pm.variables.get('stamp'))",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"portal-{{stamp}}\",\n    \"url\": \"{{portalUrl}}/konsult/v1/encryption-key\",\n    \"collection_tag\": \"{{stamp}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/pub_keys",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"pub_keys"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET portal public key val",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Getting a public key property\", () => {",
									"    if (pm.variables.get('skipPortalConnection')) return true",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const pem = pm.response.stream.toString('utf8');",
									"    pm.expect(pem).to.be.not.null",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/v1/pub_keys/portal-{{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"v1",
								"pub_keys",
								"portal-{{stamp}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DEL all pub keys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Deleting all public keys\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const res = pm.response.json()",
									"    pm.expect(res.acknowledged).to.be.true",
									"    pm.expect(res.deletedCount).to.gt(0)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/pubKeys?collection_tag={{stamp}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"pubKeys"
							],
							"query": [
								{
									"key": "collection_tag",
									"value": "{{stamp}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check portal URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get portal URL\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const portalUrl = pm.response.text()",
									"    pm.expect(portalUrl == 'https://rudi.bzh' || portalUrl == 'https://rudi-qualif.open-groupe.com' || portalUrl == pm.variables.get('noPortalMsg')).to.be.true",
									"    pm.collectionVariables.set('portalUrl', portalUrl)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/check/portal/url",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"check",
								"portal",
								"url"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add portal key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creating the Portal key\", () => {",
									"    if (pm.variables.get('skipPortalConnection')) return true",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const pubKey = pm.response.json()",
									"    pm.expect(pubKey.name).to.be.eq(pm.variables.get('portalKeyName'))",
									"    pm.expect(pubKey.url).to.be.not.null",
									"    pm.expect(pubKey.pem).to.be.not.null",
									"    pm.expect(pubKey.type).to.be.not.null",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const portalUrl = pm.variables.get('portalUrl')",
									"if (portalUrl === 'https://rudi.bzh')",
									"    pm.collectionVariables.set('portalKeyName', 'portail-rudi')",
									"else",
									"    pm.collectionVariables.set('portalKeyName', 'portail-qualif')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{portalKeyName}}\",\n    \"url\": \"{{portalUrl}}/konsult/v1/encryption-key\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{catalogUrl}}/admin/pub_keys",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"pub_keys"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET portal public key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Portal key added\", () => {",
									"    if (pm.variables.get('skipPortalConnection')) return true",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const pem = pm.response.stream.toString('utf8');",
									"    pm.expect(pem).to.be.not.null",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/v1/pub_keys/{{portalKeyName}}/key",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"v1",
								"pub_keys",
								"{{portalKeyName}}",
								"key"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "11. Functional checks",
			"item": [
				{
					"name": "Check node URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check portal URL\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const res = pm.response.text()",
									"    pm.expect(res.startsWith('http')).to.be.true",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/check/node/url",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"check",
								"node",
								"url"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check portal URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check portal URL\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const res = pm.response.text()",
									"    pm.expect(res.startsWith('http') || res === 'No portal connected').to.be.true",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/check/portal/url",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"check",
								"portal",
								"url"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check portal resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check portal resources\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    if (pm.variables.get('skipPortalConnection')) return true",
									"    const res = pm.response.json()",
									"    pm.expect(res.time).to.be.gt(0)",
									"    pm.expect(res.total).to.be.gt(0)",
									"    pm.expect(res.items?.length).to.eq(res.total)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/check/portal/resources",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"check",
								"portal",
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check portal resources ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check portal resources ids\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    if (pm.variables.get('skipPortalConnection')) return true",
									"    const res = pm.response.json()",
									"    pm.expect(res[0].global_id).to.be.not.undefined",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/check/portal/ids",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"check",
								"portal",
								"ids"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "getLogs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Accessing logs\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    const response = pm.response.json()",
									"    //const pm.response.header",
									"    pm.expect(response.length).to.lte(20)",
									"});",
									"",
									"mem.wipeCollectionVars(pm.collectionVariables,[],1)",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{catalogUrl}}/admin/logs?limit=20&sort_by=-updatedAt&updatedAfter={{dateUpdate}}",
							"host": [
								"{{catalogUrl}}"
							],
							"path": [
								"admin",
								"logs"
							],
							"query": [
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "sort_by",
									"value": "-updatedAt"
								},
								{
									"key": "updatedAfter",
									"value": "{{dateUpdate}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{{{catalogJwtName}}}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// --------------------------------------------------------------------------------------------------------------",
					"// Libs",
					"// --------------------------------------------------------------------------------------------------------------",
					"",
					"log = {",
					"    lvl: 1,",
					"    e: (here, ...args) => log.lvl >= 1 && console.error(`E [${here}] ERROR:`, ...args),",
					"    d: (here, ...args) => log.lvl >= 2 && console.log(`D [${here}]`, ...args),",
					"    t: (here, msg = '<', ...args) => log.lvl >= 3 && console.log(`T [${here}]`, msg, ...args),",
					"}",
					"",
					"const JWT_AUTH_DELEGATE_DEFAULT = 'rudi_api_pm'",
					"",
					"log.t('Time-related functions')",
					"time = {",
					"    now: () => new Date().toISOString(),",
					"    nowEpochMS: () => new Date().getTime(),",
					"    nowEpochS: () => Math.floor(new Date().getTime() / 1000),",
					"    timezone: () => new Date().getTimezoneOffset(),",
					"    wait: (delayMs, doSomething) => {",
					"        log.t('wait', `Waiting ${delayMs / 1000}s...`)",
					"        setTimeout(doSomething ? doSomething : () => { log.t('wait', `Waited ${delayMs / 1000}s`) }, delayMs)",
					"    },",
					"}",
					"",
					"log.t('Function to manipulate strings')",
					"const mergeStrings = (sep, ...args) => {",
					"    const here = 'mergeStrings'",
					"    log.t(here)",
					"    const argNb = args.length",
					"    if (argNb == 0 || args[0] === undefined || args[0] === null) return ''",
					"    let accumulatedStr = `${args[0]}`",
					"    for (let i = 1; i < argNb; i++) {",
					"        if (args[i] === undefined || args[i] === null) break",
					"        const newChunk = `${args[i]}`",
					"        const cleanChunk = newChunk.startsWith(sep) ? newChunk.slice(1) : newChunk",
					"        accumulatedStr = accumulatedStr.endsWith(sep)",
					"            ? accumulatedStr + cleanChunk",
					"            : accumulatedStr + sep + cleanChunk",
					"    }",
					"    return accumulatedStr",
					"}",
					"const pathJoin = (...args) => mergeStrings('/', ...args)",
					"",
					"log.t('Postman variables memory access functions')",
					"mem = {",
					"    get: (name) => {",
					"        const val = pm.variables.get(name) ?? pm.collectionVariables.get(name) ?? pm.environment.get(name) ?? pm.globals.get(name)",
					"        log.t('mem.get', name, val)",
					"        return val",
					"    },",
					"",
					"    set: (name, val) => pm.collectionVariables.set(name, val),",
					"",
					"    initStoredVar: (name, defaultVal) => {",
					"        const here = 'initStoredVar'",
					"        if (!mem.get(name)) {",
					"            log.t(here, `No value stored for ${name}`)",
					"            const val = mem.get(name) ?? defaultVal",
					"            mem.set(name, val)",
					"            return val",
					"        }",
					"        return mem.get(name)",
					"    },",
					"",
					"    wipeCollectionVars: (collectionVariables = pm.collectionVariables, keepVals, force = false) => {",
					"        // 'Function to wipe the cached values from previous tests'",
					"        const here = 'wipeCollectionVars'",
					"        log.t(here)",
					"        if (!force && collectionVariables.get('postmanEnv') == pm.environment.name) return",
					"        const cache = {}",
					"        if (keepVals === undefined) keepVals = [CATALOG_JWT_NAME, STORAGE_JWT_NAME, MANAGER_JWT_NAME, PORTAL_TOKEN_NAME]",
					"        keepVals = ['stamp', ...keepVals]",
					"        keepVals.map(key => {",
					"            const val = collectionVariables.get(key) ?? pm.collectionVariables.get(key)",
					"            if (val) {",
					"                cache[key] = collectionVariables.get(key)",
					"                log.t(here, `Memorizing the protected variable ${key}: ${cache[key]}`)",
					"            }",
					"        })",
					"        collectionVariables.clear()",
					"        log.t(here, 'collectionVariables wiped:', JSON.stringify(collectionVariables))",
					"        log.t(here, 'collectionVariables:', JSON.stringify(collectionVariables.values))",
					"",
					"        for (const key in cache) {",
					"            log.t(`Restoring the variable ${key}: ${cache[key]}`)",
					"            collectionVariables.set(key, cache[key])",
					"            pm.collectionVariables.set(key, cache[key])",
					"        }",
					"        collectionVariables.set('dateUpdate', time.now())",
					"        collectionVariables.set('postmanEnv', pm.environment.name)",
					"    }",
					"}",
					"",
					"log.t('Function to homogenize old environment variables')",
					"function changeVarName(oldName, newName) {",
					"    const here = 'changeVarName'",
					"    const val = pm.environment.get(oldName)",
					"    if (!val) return",
					"    log.t(here, `${oldName}=\"${val}\"`)",
					"    if (!mem.get(newName)) {",
					"        pm.environment.set(newName, val)",
					"        log.t(here, `${newName}=\"${val}\"`)",
					"    } else {",
					"        log.t(here, `(Already set) ${newName}=\"${val}\"`)",
					"    }",
					"    pm.environment.unset(oldName)",
					"    log.t(here, `=> ${oldName}=\"${pm.environment.get(oldName)}\"`)",
					"    log.t(here, `=> ${newName}=\"${pm.environment.get(newName)}\"`)",
					"}",
					"",
					"log.t('Variable names homogenization')",
					"function homogenizeVars() {",
					"    changeVarName('cryptoJwtUrl', 'jwtAuthUrl')",
					"    changeVarName('pmClientName', 'jwtAuthDelegate')",
					"    changeVarName('apiUrl', 'catalogUrl')",
					"    changeVarName('mediaUrl', 'storageUrl')",
					"    changeVarName('pmBackUrl', 'managerUrl')",
					"    changeVarName('pmFrontUrl', 'managerFrontUrl')",
					"    changeVarName('pmAdminUsr', 'managerAdminUsr')",
					"    changeVarName('pmAdminPwd', 'managerAdminPwd')",
					"    ",
					"    if (!(pm.environment.get('storageUrl'))) {",
					"        pm.environment.set('storageUrl', `${mem.get('managerUrl')}`.replace('/prodmanager', '/media'))",
					"    }",
					"    const catalogUrl = pm.environment.get('catalogUrl')",
					"    if (!(catalogUrl.endsWith('api') || catalogUrl.endsWith('catalog'))) {",
					"",
					"        const catalogPrefix = mem.get('catalogPrefix') ?? 'api'",
					"        pm.environment.set('catalogServer', catalogUrl)",
					"        pm.environment.set('catalogUrl', pathJoin(catalogUrl, catalogPrefix))",
					"        pm.environment.unset(catalogPrefix)",
					"    } else {",
					"        pm.environment.set('catalogServer', catalogUrl.replace(/\\/(api|catalog)/, ''))",
					"    }",
					"    const definedJwtAuthDelegate = pm.environment.get('pmClientName')",
					"    if (definedJwtAuthDelegate) {",
					"        if (definedJwtAuthDelegate != JWT_AUTH_DELEGATE_DEFAULT) {",
					"            pm.environment.set('jwtAuthDelegate', definedJwtAuthDelegate)",
					"        }",
					"        pm.environment.unset('pmClientName')",
					"    }",
					"    pm.environment.set('homogenized', true)",
					"}",
					"if (!pm.environment.get('homogenized')) homogenizeVars()",
					"",
					"",
					"const regexCheck = (regex, str) => str ? regex.exec(`${str}`) : regex",
					"",
					"log.t('Constants initialization')",
					"const REGEX_UUID = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i",
					"const REGEX_JWT = /^[\\w-]+\\.[\\w-]+\\.([\\w-]+={0,3})$/",
					"const REGEX_API_VERSION = /^[0-9]+\\.[0-9]+(\\.[0-9]+)?[a-z]*$/",
					"const REGEX_URI = /^(https?|ftp):\\/\\/([\\w-]+(\\.[\\w-]+)+|(:[0-9]+)?)([\\w.,@?^=%&amp;:\\/~+#-]*[\\w@?^=%&amp;\\/~+#-])?$/",
					"const REGEX_GIT_HASH_SHORT = /^[a-z0-9]{7}/",
					"",
					"match = {",
					"    uuid: (str) => regexCheck(REGEX_UUID, str),",
					"    jwt: (str) => regexCheck(REGEX_JWT, str),",
					"    version: (str) => regexCheck(REGEX_API_VERSION, str),",
					"    uri: (str) => regexCheck(REGEX_URI, str),",
					"    gitHash: (str) => regexCheck(REGEX_GIT_HASH_SHORT, str),",
					"}",
					"",
					"error = {",
					"    throwNotFound: (msg) => { throw { statusCode: 404, name: 'NotFound', message: msg } }",
					"}",
					"",
					"codec = {",
					"    streamToString: (data) => data?.stream?.toString('utf8'),",
					"    getResJson: (res, prop) => {",
					"        const resJson = JSON.parse(codec.streamToString(res))",
					"        return prop ? resJson?.[prop] : resJson",
					"    },",
					"    fromBase64: (data) => Buffer.from(data, 'base64')?.toString('utf-8'),",
					"",
					"    fromBase64Url: (base64UrlStr) => {",
					"        const here = 'fromBase64Url'",
					"        log.t(here)",
					"        if (!base64UrlStr) return ''",
					"        const paddedStr = (base64UrlStr.length % 4 == 0)",
					"            ? base64UrlStr",
					"            : base64UrlStr + \"====\".substring(base64UrlStr.length % 4)",
					"        const base64Str = paddedStr",
					"            .replace(\"_\", \"/\")",
					"            .replace(\"-\", \"+\")",
					"        return codec.fromBase64(base64Str)",
					"    }",
					"}",
					"",
					"log.t('Functions to initialiaze test variables')",
					"rand = {",
					"    get: (randName) => pm.collectionVariables.replaceIn(randName),",
					"",
					"    uuid: () => rand.get('{{$randomUUID}}'),",
					"",
					"    pickInList: (list) => list[(require('lodash')).random(0, list.length - 1)],",
					"",
					"    pick: (listName) => rand.pickInList(mem.get(listName)),",
					"",
					"    initVal: (field) => {",
					"        const val = mem.get(field)",
					"        if (val) return val",
					"        const randVal = rand.uuid()",
					"        mem.set(field, randVal, 'string')",
					"        return randVal",
					"    },",
					"",
					"    getContactEmail: (contactName) => `${contactName",
					"        .replace(/(Miss|(Ms|Mrs|Mr|Dr)\\.)\\s|'Jr\\.'/gi, '')",
					"        .toLowerCase()",
					"        .replace(/\\s+|\\.\\./g, '.')",
					"        .replace(/^\\.+|\\.+$|\\'+/g, '')",
					"        }@irisa.fr`,",
					"",
					"    randomize: (field) => {",
					"        const randVal = rand.uuid()",
					"        mem.set(field, randVal)",
					"        return randVal",
					"    },",
					"}",
					"",
					"log.t('Functions for connections')",
					"co = {",
					"    reqToStr: (req) => `${req.method} ${req.url}`,",
					"    sendRequest: (req) => {",
					"        const here = 'sendRequest'",
					"        log.t(here, co.reqToStr(req))",
					"        return new Promise(",
					"            (resolve, reject) => pm.sendRequest(req, (err, res) => {",
					"                if (!err && res?.code / 100 < 4) {",
					"                    log.t(`Request ${co.reqToStr(req)} succeeded with code ${res?.code}`)",
					"                    return resolve(res)",
					"                }",
					"                log.t(`Request ${co.reqToStr(req)} failed with code ${res?.code}`)",
					"                let message = `Request \"${req.url ?? req}\" failed (${res?.code})`",
					"                if (err?.message) message += `: ${err.message}`",
					"                return reject({ message })",
					"            })",
					"        )",
					"    },",
					"}",
					"",
					"log.t('Constants initialization')",
					"const TOKEN_DURATION_S = 4147200",
					"const MANAGER_COOKIE_NAME = `pmFrontToken`",
					"",
					"const CATALOG_JWT_NAME = `catalogJwt-${pm.environment.name}`; mem.set('catalogJwtName', CATALOG_JWT_NAME)",
					"const STORAGE_JWT_NAME = `storageJwt-${pm.environment.name}`; mem.set('storageJwtName', STORAGE_JWT_NAME)",
					"const MANAGER_JWT_NAME = `managerJwt-${pm.environment.name}`; mem.set('managerJwtName', MANAGER_JWT_NAME)",
					"const PORTAL_TOKEN_NAME = `portalJwt-${pm.environment.name}`; mem.set('portalJwtName', PORTAL_TOKEN_NAME)",
					"",
					"if (!pm.environment.get('portalUsr')) mem.set('skipPortalConnection', true)",
					"",
					"log.t('Functions for creating JWTs')",
					"secu = {",
					"    isTokenValid: (token) => {",
					"        const here = 'isTokenValid'",
					"        log.t(here, 'Checking token', token)",
					"        if (!token || typeof token !== 'string' || !match.jwt(token)) {",
					"            log.d(here, `Token is invalid: ${token}`)",
					"            return false",
					"        }",
					"        const jwtBodyEncoded = token.split('.')[1]",
					"        const jwtBody = JSON.parse(codec.fromBase64Url(jwtBodyEncoded))",
					"        if (!jwtBody.exp) {",
					"            log.d(here, 'No expiration time was found')",
					"            return false",
					"        }",
					"        const isValid = jwtBody.exp > time.nowEpochS()",
					"        log.d(here, `Token is ${(isValid ? '' : 'not ')}valid`)",
					"        return isValid",
					"    },",
					"",
					"    getCookie: (res, cookieName) => {",
					"        const here = 'getCookie'",
					"        log.t(here)",
					"        for (const cookie in res['Set-Cookie']) {",
					"            log.d(here, 'cookie', cookie)",
					"            if (cookie.startsWith(cookieName + '='))",
					"                return cookie.slice(cookieName.length() + 1)",
					"        }",
					"        return 'OK'",
					"    },",
					"",
					"    renewToken: async (tokenName, req, body, extractToken = (res) => codec.streamToString(res)) => {",
					"        const here = 'renewToken'",
					"        log.t(here)",
					"        let res",
					"        try {",
					"            if (body && !body.raw) req.body = { mode: 'raw', raw: JSON.stringify(body) }",
					"            log.d(here, 'req body:', req.body)",
					"            res = await co.sendRequest(req)",
					"            log.d(here, 'reply received:', res)",
					"        } catch (err) {",
					"            log.e(here, `Cannot reach ${req.url}:`, err.message)",
					"            throw new Error(`Cannot reach ${req.url}`)",
					"        }",
					"        pm.expect(res.code == 200).to.be.true",
					"",
					"        const token = extractToken(res)",
					"        log.d(here, 'extractedToken:', token)",
					"        if (!token) {",
					"            log.e(here, 'Could not extract token from', res)",
					"            throw new Error(`Could not extract token from ${res}`)",
					"        }",
					"        if (token == 'OK') return",
					"        if (!secu.isTokenValid(token)) {",
					"            log.e(here, `Token not vaild: ${token}`)",
					"            throw new Error(`Token not vaild: ${token}`)",
					"        }",
					"        mem.set(tokenName, token)",
					"        return token",
					"    },",
					"",
					"    getStorageJwt: async () => {",
					"        const here = 'getStorageJwt'",
					"        log.t(here)",
					"        const tokenName = mem.get(STORAGE_JWT_NAME)",
					"        const token = pm.vault.get(tokenName)",
					"        if (secu.isTokenValid(token)) return token",
					"",
					"        jwtAuthUrl = pathJoin(mem.get('jwtAuthUrl'), 'forge')",
					"        body = {",
					"            target: \"storage\",",
					"            url: mem.get('storageUrl'),",
					"            user_id: 102,",
					"            user_name: \"storage_postman\",",
					"            group_name: \"producer\"",
					"        }",
					"        const req = {",
					"            url: pathJoin(mem.get('jwtAuthUrl'), 'forge'),",
					"            method: 'POST',",
					"            header: { 'Content-Type': 'application/json' },",
					"        }",
					"        return await secu.renewToken(STORAGE_JWT_NAME, req, body)",
					"    },",
					"",
					"    getCatalogJwt: async () => {",
					"        const here = 'getCatalogJwt'",
					"        log.t(here)",
					"        const token = mem.get(CATALOG_JWT_NAME)",
					"        if (secu.isTokenValid(token)) return token",
					"        const body = {",
					"            'exp': time.nowEpochS() + TOKEN_DURATION_S,",
					"            'sub': mem.get('jwtAuthDelegate') ?? JWT_AUTH_DELEGATE_DEFAULT,",
					"            'client_id': mem.get('jwtAuthUser') ?? 'pm',",
					"        }",
					"        const req = {",
					"            url: pathJoin(mem.get('jwtAuthUrl'), 'forge'),",
					"            method: 'POST',",
					"            header: { 'Content-Type': 'application/json' }",
					"        }",
					"        return await secu.renewToken(CATALOG_JWT_NAME, req, body)",
					"    },",
					"",
					"    getPortalJwt: async () => {",
					"        const here = 'getPortalJwt'",
					"        log.t(here)",
					"        if (mem.get('skipPortalConnection')) return NO_PORTAL_MSG",
					"",
					"        const token = mem.get(PORTAL_TOKEN_NAME)",
					"        if (secu.isTokenValid(token)) return token",
					"",
					"        const catalogToken = await secu.getCatalogJwt()",
					"        const req = {",
					"            url: pathJoin(mem.get('apiUrl'), catalogPrefix, 'admin/portal/token'),",
					"            method: 'GET',",
					"            header: {",
					"                'Content-Type': 'application/json',",
					"                'Authorization': `Bearer ${catalogToken}`",
					"            },",
					"        }",
					"        return await secu.renewToken(PORTAL_TOKEN_NAME, req, null, (res) => codec.getResJson(res, 'access_token'))",
					"    },",
					"",
					"    getManagerJwt: async () => {",
					"        const here = 'getManagerJwt'",
					"        log.t(here)",
					"",
					"        const token = mem.get(MANAGER_JWT_NAME)",
					"        if (secu.isTokenValid(token)) return token",
					"        const body = {",
					"            'username': mem.get('managerAdminUsr'),",
					"            'password': mem.get('managerAdminPwd')",
					"        }",
					"        const req = {",
					"            url: pathJoin(mem.get('managerUrl'), mem.get('managerBack'), '/front/login'),",
					"            method: 'POST',",
					"            header: { 'Content-Type': 'application/json' }",
					"        }",
					"        return await secu.renewToken(MANAGER_JWT_NAME, req, body, res => secu.getCookie(res, MANAGER_COOKIE_NAME))",
					"    }",
					"}",
					"",
					"",
					"",
					"// --------------------------------------------------------------------------------------------------------------",
					"// Init function",
					"// --------------------------------------------------------------------------------------------------------------",
					"const init = async () => {",
					"    await Promise.all([secu.getCatalogJwt()])",
					"}",
					"",
					"",
					"// --------------------------------------------------------------------------------------------------------------",
					"// Launch",
					"// --------------------------------------------------------------------------------------------------------------",
					"init().then(() => log.t('run', 'Init completed'))",
					"time.wait(50, () => log.t('run', 'Pre-request Scripts loaded'))",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "stamp",
			"value": "catalog-tests",
			"type": "string"
		},
		{
			"key": "dateUpdate",
			"value": ""
		},
		{
			"key": "postmanEnv",
			"value": ""
		},
		{
			"key": "catalogJwtName",
			"value": ""
		},
		{
			"key": "storageJwtName",
			"value": ""
		},
		{
			"key": "managerJwtName",
			"value": ""
		},
		{
			"key": "portalJwtName",
			"value": ""
		},
		{
			"key": "catalogJwt-_Dev-Local",
			"value": ""
		},
		{
			"key": "keywords",
			"value": ""
		},
		{
			"key": "themes",
			"value": ""
		},
		{
			"key": "sanityLicence",
			"value": ""
		},
		{
			"key": "licences",
			"value": ""
		},
		{
			"key": "softMetaGmdXml1LocalId",
			"value": ""
		},
		{
			"key": "softOrgGmdXml1Name",
			"value": ""
		},
		{
			"key": "softMediaGmdXml1Id",
			"value": ""
		},
		{
			"key": "softMediaGmdXml2Id",
			"value": ""
		},
		{
			"key": "softMediaGmdXml3Id",
			"value": ""
		},
		{
			"key": "softOrgGmdXml1NewName",
			"value": ""
		},
		{
			"key": "softContactGmdXml1NewName",
			"value": ""
		},
		{
			"key": "softContactGmdXml1NewEmail",
			"value": ""
		},
		{
			"key": "softOrgGmdXml1Id",
			"value": ""
		},
		{
			"key": "softOrg1Name",
			"value": ""
		},
		{
			"key": "softOrgGmdXml2Name",
			"value": ""
		},
		{
			"key": "softOrgGmdXml2Id",
			"value": ""
		},
		{
			"key": "gitHash",
			"value": ""
		},
		{
			"key": "apiVersion",
			"value": ""
		},
		{
			"key": "rudiData",
			"value": ""
		},
		{
			"key": "softOrg1Id",
			"value": ""
		},
		{
			"key": "softOrg1Address",
			"value": ""
		},
		{
			"key": "softOrg2Id",
			"value": ""
		},
		{
			"key": "softOrg2Name",
			"value": ""
		},
		{
			"key": "softOrg2Address",
			"value": ""
		},
		{
			"key": "softContact1Id",
			"value": ""
		},
		{
			"key": "softContact1Name",
			"value": ""
		},
		{
			"key": "softContact1Email",
			"value": ""
		},
		{
			"key": "softContact2Id",
			"value": ""
		},
		{
			"key": "softContact2Name",
			"value": ""
		},
		{
			"key": "softContact2Email",
			"value": ""
		},
		{
			"key": "softContact3Id",
			"value": ""
		},
		{
			"key": "softContact3Name",
			"value": ""
		},
		{
			"key": "softContact3Email",
			"value": ""
		},
		{
			"key": "media2",
			"value": ""
		},
		{
			"key": "media1",
			"value": ""
		},
		{
			"key": "media1Id",
			"value": ""
		},
		{
			"key": "now",
			"value": ""
		},
		{
			"key": "softMeta1Id",
			"value": ""
		},
		{
			"key": "softMedia1Id",
			"value": ""
		},
		{
			"key": "randomTheme",
			"value": ""
		},
		{
			"key": "randomKeyword1",
			"value": ""
		},
		{
			"key": "randomKeyword2",
			"value": ""
		},
		{
			"key": "softLicence",
			"value": ""
		},
		{
			"key": "randomOrgId",
			"value": ""
		},
		{
			"key": "randomContact1",
			"value": ""
		},
		{
			"key": "randomContact2",
			"value": ""
		},
		{
			"key": "randomTitle",
			"value": ""
		},
		{
			"key": "randomSynopsis",
			"value": ""
		},
		{
			"key": "randomSummary",
			"value": ""
		},
		{
			"key": "softMeta2Id",
			"value": ""
		},
		{
			"key": "mediaId2",
			"value": ""
		},
		{
			"key": "softMedia2Id",
			"value": ""
		},
		{
			"key": "softMedia11Id",
			"value": ""
		},
		{
			"key": "countWithOrg1",
			"value": ""
		},
		{
			"key": "countWithOrg1pub",
			"value": ""
		},
		{
			"key": "softMeta4Id",
			"value": ""
		},
		{
			"key": "softMedia4Id",
			"value": ""
		},
		{
			"key": "softContactGmdXml1Id",
			"value": ""
		},
		{
			"key": "softContactGmdXml1Name",
			"value": ""
		},
		{
			"key": "softContactGmdXml1Email",
			"value": ""
		},
		{
			"key": "softMetaGmdXml1Id",
			"value": ""
		},
		{
			"key": "softMediaGmdXml4Id",
			"value": ""
		},
		{
			"key": "softMeta3LocalId",
			"value": ""
		},
		{
			"key": "softMetaGmdXml4LocalId",
			"value": ""
		},
		{
			"key": "softReport1Id",
			"value": ""
		},
		{
			"key": "dateReport",
			"value": ""
		},
		{
			"key": "portalJwt-_Dev-Local",
			"value": ""
		}
	]
}